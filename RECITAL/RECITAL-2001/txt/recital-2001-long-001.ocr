RECITAL 2001, Tours, 2-5 juillet 2001

LoX1 : outil polyvalent pour l'exploration de corpus annotés

Laurent AUDIBERT

DELIC — Université de Provence
29 Avenue Robert SCHUMAN
13621 Aix—en—Provence Cedex 1
laurent.audibert@up.univ—aix.fr

Résumé — Abstract

Cet article présente une application permettant d'écrire des requétes complexes sur des corpus
étiquetés et de formater librement les résultats de ces requétes. Le formalisme des requétes est
basé sur le principe des expressions régulieres bien connu de la plupart des linguistes
travaillant sur des corpus écrits. Contrairement a certains logiciels, qui ne permettent que
l’extraction de concordances au format relativement figé, le formatage libre du résultat des
requétes permet leur réutilisation par des programmes ultérieurs et autorise une grande
diversité d'applications, s'écartant largement du cadre des simples concordanciers.

This paper describes a tool that enables complex queries on tagged corpora, and free
formatting of the results. The formalism used is based on regular expressions, which are well-
known from most corpus linguists. As opposed to other software, the free formatting of the
results enables re-use of the query results by additional tools, and proves useful for a wide
range of applications well beyond that of simple concordance programs.

Mots clés — Keywords
Corpus, Concordancier, TAL, Parser, Expression réguliere.

Corpora, Concordancer, NLP, Parser, Regular expression.

1 Introduction

11 existe maintenant des applications permettant d'étiqueter de maniere efficace des corpus
écrits (par exemple, le logiciel Cordial, développé par la société Synapse Développement,2

1 LoX est disponible sur la page Web http.'//laurentaudibert. free. fr/lox.htm

2 Voir le site Web http://www.synapse—fr.co1n/

L. A UDIBERT

offre une lemmatisation et un étiquetage morpho-syntaxique relativement fiable). Il est alors
plus pertinent pour les utilisateurs (linguistes, lexicographes, terminologues, etc.), d'interroger
un corpus en écrivant des requétes ne portant plus uniquement sur des mots mais aussi sur des
lemmes ou des étiquettes morpho-syntaxiques.

Les linguistes travaillant sur des corpus écrits sont généralement familiers avec le formalisme
des expressions régulieres. Ces expressions se situent au niveau des caracteres et permettent
de décrire de maniere formelle des classes de chaines de caracteres. Le langage de requéte que
nous présentons ici est basé sur des méta-expressions régulieres. Ces expressions se situent au
niveau des mots et permettent de décrire de maniere formelle des classes de suites de mots,
donc des portions de texte. Ainsi, ce langage de requéte ne devrait pas dérouter le linguiste.

Le but premier d'un langage de requéte est de diminuer de maniere signiﬁcative la quantité
d'information a traiter manuellement. Mais il peut aussi s'avérer intéressant d'effectuer des
dénombrements ou encore de générer des résultats adaptés a des besoins particuliers. Aussi,
au contraire de langages précédemment proposés, par exemple par (Christ, 1994), 1e langage
de requéte que nous proposons contient un micro-langage de forrnatage du résultat qui permet
de préciser librement la forme que prendra le résultat des requétes.

2 Types de corpus

L'app1ication LoX reconnait actuellement deux types de corpus : les corpus de type texte brut
et les corpus étiquetés de format tabu1aire3.

2.1 Corpus de type texte brut
Un corpus de type texte brut est un corpus au format texte contenant le texte dépourvu de Inise

en forme typographique, et sans aucun ajout d'étiquette ou d'annotation. Voici un exemple de
texte brut :

La construction de centaines de digues et barrages entrainera le détournement de plusieurs fleuves, la
disparition de plus de mille lacs naturels et l'abattage d'arbres centenaires.

La segmentation en « mots » se fait suivant 1e principe de la segmentation maximale,
respectant ainsi les principes édictés par le projet GRACE (Adda, Mariani, Paroubek, Rajman,
& Lecomte, 1999) (i.e. les ponctuations, 1'apostrophe, etc. sont des mots distincts).

2.2 Corpus tabulaire
Ces corpus sont de forme tabulaire et au format texte. Chaque ligne correspondra a un élément

(i.e. un mot) tandis que chaque colonne correspondra a une propriété de 1'é1ément, c’est-a-dire
un étiquetage particulier (catégorie morpho-syntaxique, lemmatisation, ou autre). La fin d'une

3 D’autres formats sont envisageables ct peuvent étre facilement ajoutés (grace aux mécanismes d'abstraction

de la prograrnmation orientée objet) dans des Versions ultérieures, en particulier, 1e format SGML ou XML
proposé par la Text Encoding Initiative (Sperberg—McQueen & Burnard, 1994).

L0X .' outil polyvalemf pour l’expl0rati0n de corpus annotés

ligne est identifiée par un délimiteur particulier (retour chariot). De meme, un autre délimiteur
particulier sépare les colonnes (tabulation).

Ci-dessous est représenté un extrait du journal Le Monde étiqueté par le logiciel Cordial.

La "" le "" DETDFS " Da—fs—d ‘-' disparition " disparition " NCFS " Ncfs ‘-'
construction "-' construction "-' NCFS -' Ncfs ‘-' de -' de -' PREP -* Sp '-'
de "" de "" PREP " Sp ‘-' plus " plus " ADV " Rgn ‘-'
centaines ---' centaine ---' NCFP -' Ncfp '-' de -' de -' PREP -' Sp '-'
de ---v de ---v PREP -v Sp -' mille -v mille -v ADJNUM -v Mc.p <-'
diques "-' digue ---' NCFP -' Ncfp '-' lacs -' lacs -* NCMIN -' Ncmp '-'
et "" et "" COO " Cc ‘-' naturels -' naturel -* ADJMP -* Afpmp '-‘
barrages ---' barrage ---' NCMP --' Ncmp ‘-' et --' et "' COO " Cc ‘-'
entrainera ---' entrainer ---' VINDF3S ---* Vmif3s <-' l --* le --' DETDMS ---' Da—ms—d '-'
le ---v le ---v DETDMS -v Da—ms—d <-' ' -v // -v // -v // <-'
détournement "-' détournement ---' NCMS " Ncms ‘-' abattage " abattage -' NCMS -' Ncms ‘-'
de ---v de --+ PREP + Sp -' d + de + PREP + Sp -'
plusieurs ---' plusieurs ---' ADJIND -' Dt—.p— '-' ' -' // -' // " // ‘-'
fleuves ---' fleuve ---' NCMP -' Ncmp '-' arbres -' arbre -' NCMP -* Ncmp '-'
, ---* , ---* PCTFAIB ---* Ypw '-' centenaires -' centenaire -' ADJPIG -* Afpmp <-‘
la ---v le ---v DETDFS -v Da—fs—d 4-‘ -v -v PCTFORTE"" Yps 4-‘

2.3 Nom des propriétés

Les noms de propriétés sont des intitulés qui permettent de faire reference a une colonne
particuliere pour un mot donné (i.e. a une propriété ou une étiquette de ce mot) dans une
requéte ou dans le micro-langage de formatage du résultat (masque).

Un fichier de type texte brut est considéré comme un fichier ne comportant qu'une colonne
contenant le texte segmenté (un mot par ligne). On fera reference a un mot avec le mot clef
« word » (nom de l'unique propriété correspondant a l'unique colonne).

Pour utiliser un corpus de type tabulaire il faudra nommer chacune des colonnes du fichier.
Voici les noms de propriétés correspondant a l’exemple précédent4 :

Imot ---' lemme ---' typegram -"' codespe ‘-'

3 Syntaxe des requétes

3.1 Requéte sur les mots isolés : meta-expression réguliére atomique

Une méta-expression réguliere atomique (MERA) est une formule logique, sur les noms de
propriétés, les chaines de caracteres et les expressions régulieres. Un mot est décrit par la
MERA si l'expression logique associée est « vrai » pour le mot en question. Un exemple de
MERA est : [lemme="em,‘rafner" & zypegram~”"VIND”]. Cette MERA décrit tous les mots
dont l'étiquette «lemme » est « entrainer » et l'étiquette « typegram » commence par
« VIND ». I1 s'agit donc d'une recherche du verbe « entrainer » conjugué a l'indicatif.

[] est une MERA spéciale décrivant n'importe quel mot. En fait [] est equivalent a [true].

<< Typegram» ct << codespe » sont deux étiquetages morpho—syntaxiques différents produits par le logiciel
Cordial. Nous reprenons les dénominations de ce logiciel.

L. A UDIBERT

3.2 Répétiteur de MERA

Il est possible d'adjoindre un répétiteur pour répéter la MERA un certain nombre de fois. Un
répétiteur est de la forme {x, y}, avec x_<y, o1‘1 x est le nombre minimum de fois ou la MERA
doit étre répétée et y le nombre maximum de fois. Ainsi [ typegram~ ""NC " ] { 1,3 } décrira une
suite de un a trois noms communs consécutifs. Si dans le corpus se trouvent deux noms
communs consécutifs, cette expression décrira trois portions : la premiere correspondant au
premier nom commun, la seconde correspondant aux deux noms communs et la demiere
correspondant au second nom commun.

Il existe aussi des répétiteurs prédéﬁnis :
0 « * », pour dire un nombre quelconque de fois, est equivalent a [0, L0NG_MAX5} ;
0 « + » , pour dire au moins une fois, est equivalent a {I, LONG_MAX} ;
0 « ? » , pour dire zéro ou une fois, est equivalent a [0, 1}.

Un répétiteur particulier est aussi disponible, sa forme est {x,y} avec x>y. Ce répétiteur (que
nous nommerons répétiteur préférentiel) peut étre lu comme : la MERA doit étre répétée x
fois si possible, sinon x-I fois, sinon x-2 fois,  mais pas moins de y fois. Par exemple,
supposons la séquence de mots «x a b b b y ». Sur cette séquence, la requéte [a ][b ] { 1,4}
retournera trois correspondances {ab, abb, abbb} tandis que la requéte [a ][ b ] {4, I} n'en
retournera qu'une {abbb}.

Il est enﬁn possible de nommer une MERA pour faire référence ultérieurement au mot décrit
par celle-ci : cible.'[ lemme: "entrafner" & zypegram~”"VIND”]. Dans cet exemple, on po11rra
ultérieurement (ie. dans la suite de la requéte ou dans un masque) faire référence au verbe
décrit par la MERA en utilisant la variable « cible ».

L'ensemble constitué par la MERA, sa variable et son répétiteur associés sera appelé meta-
expression réguliere élémentaire (MERE).

3.3 Requéte sur des groupes de mots

Une requéte peut étre vue comme une expression réguliere sur les MERE. Il est donc possible
de juxtaposer une ou plusieurs MERE pour décrire des suites de mots mais il est aussi
possible d'utiliser les parentheses « ( » et « ) » un opérateur de disjonction « I » un opérateur de
conjonction « & » ainsi que les répétiteurs décrits dans la section précédente (section 3.2).

De plus, une requéte peut se terminer par la spécification d'une clause stop. Cette clause
permet de préciser une condition qui interrompt la recherche et rejette la tentative de
correspondance en cours.

Par exemple, la requéte identifiant les verbes conjugués positionnés avant un verbe a
l'inﬁnitif, au sein d'une meme phrase, po11rra s'écrire :

5 LONG_MAX est égal au plus grand entier que la machine peut représenter.

L0X .' outil polyvalemf pour l’expl0rati0n de corpus annotés

[type _gram~""V"&type _gram.’~""VINF |"VPARP|"VPARPRES "] [type _gram.’~""V" *
[type _gram~""VINF "] stop (type _gram="PCTFORTE")

ou la premiere MERA designe un verbe qui n'est ni a l'inﬁnitif, ni au participe present ni au
participe passe, la seconde une suite de mots sans verbe, et la derniere un verbe a l'inﬁnitif. La
clause stop precise que le resultat ne doit pas contenir de ponctuation forte.

3.4 Evaluation et optimisation d'une requete

La requete suivante decrit des n-grammes, avec n_<.5, contenant le lemme « chef », ne
contenant pas de ponctuation et commencant et ﬁnissant par un nom commun, un adverbe, un
verbe ou un adjectif (cf. section 5.3 pour un exemple de resultat).

([type_gram~"("NC|"ADV|"V|"ADJ)”][type_gram.’~""PCT"]{0,3})?
[ lemme: "chef']
( [ type _gram.’ ~ ""PC T" ] { 0, 3 }[ type _gram~ "( "NC |"ADV|"V|"ADJ ) " ] ) ?
st0p( ( end. index-begin. index )>4 )

Cette requete sera analysee de gauche a droite. Le corpus sera egalement parcouru de gauche a
droite. Ainsi, la requete Va tout d'abord tenter de decrire une portion du corpus commencant
par le premier mot du corpus, puis par le second,  La premiere MERE
([zype_gram~"("NC|"ADV|"V|"ADJ)"]) de la requete sera souvent Veriﬁee car de nombreux
mots sont un nom commun, un adverbe, un verbe ou un adjectif. La seconde MERE
([ type _gram.’~”"PCT”] { 0,3 }) decrira generalement quatre portions de corpus si les trois mots
suivant le mot decrit par la premiere MERE ne sont pas (les ponctuations (le cas est egalement
tres frequent). Ce n'est que sur la troisieme MERE de la requete ([lemme=”chef’]) que
l'application de la requete Va generalement echouer (un mot ayant pour lemme chef est un
phenomene rare dans un corpus). Ainsi, appliquee sur un corpus de taille importante,
l'eValuation de cette requete sera lente. I1 serait plus pertinent de rechercher les mots dont le
lemme est « chef » puis de continuer l'application de la requete autour de ces mots. Pour cela,
il sufﬁt d'encadrer par les delimiteurs « < » et « > » la partie de la requete devant etre evaluee
en premier. La requete devient donc :

( [ type _gram~ "( "N C |"ADV|"V|"ADJ ) " ] [ type _gram.’ ~ ""PC T" ] { 0,3 } ) ?
<[ lemme: "chef ' ] >

( [ type _gram.’ ~ ""PC T" ] { 0, 3 }[ type _gram~ "( "NC |"ADV|"V|"ADJ ) " ] ) ?
st0p( ( end. index-begin. index )>4 )

Dans une telle requete, la partie entre « <> » est evaluee en premier. Si l'eValuation reussit, la
partie suivante est evaluee de maniere classique (de gauche a droite) tandis que la partie
precedente est evaluee a rebours (de droite a gauche). Le sens de l'eValuation est important
dans le cas de l'utilisation du repetiteur preferentiel.

3.5 Cas particulier de l'utilisation du répétiteur préférentiel

Les deux requetes que nous venons de voir ne s'eValuent pas dans le meme intervalle de temps
sur un corpus (la seconde est bien plus rapide) mais elles retournent cependant le meme
resultat. Il n'en Va pas toujours de meme lorsque l'on ajoute les delimiteurs « < » et « > » dans
une expression contenant un repetiteur preferentiel {x,y} avec x>y. Par exemple, supposons la
sequence de mots «x b b b a b b y ». Sur cette sequence, la requete [b]{4,1 } [a] [b]{4,1}

L. A UDIBERT

retournera trois correspondances {bbbabb, bbabb, babb} tandis que la requéte
[b ] [4,] } <[a]> [b]{4,1} n'en retournera qu'une {bbbabb} en raison de l'évaluation a rebours
de la partie a gauche du délimiteur « < ».

4 Formatage des résultats (masque)

Une requéte permet de décrire de maniere formelle un phénomene linguistique. Une instance
de ce phénomene dans un corpus, c'est a dire une portion de corpus décrite par la requéte sera
appelée une correspondance. A une correspondance sont associées deux positions dans le
corpus (début et fin de la correspondance) ainsi qu’un certain nombre de references a des
mots de la correspondance (cf. fin de la section 3.2). Les masques permettent a l’utilisateur de
préciser comment la correspondance doit étre utilisée pour générer une chaine de caracteres.

Dans un masque, pour produire un caractere, il sufﬁt de taper ce caractere. On peut aussi
produire un caractere en utilisant son code ASCII, pour cela, il faut saisir [C.'<c0de_ASCII>].
On peut afficher un nombre grace a [N.'<n0mbre>]. On peut faire reference a une propriété
d'un mot en saisissant [P.'<variable>]. La syntaxe des masques comporte également une
structure de boucle permettant de générer de maniere itérative un masque
[B.'<masque>;<debut_itérati0n>;<ﬁn_itérati0n>] et une structure de choix
[?.' <expressi0n_l0gique>; <masque>; <masque>] .

Par exemple le masque [B.' [P.'m0t][C.'32] ; beginindex ; end.index] permet de générer une
chaine contenant tous les mots de la correspondance séparés par un espace. « begin » et
« end » sont deux variables prédéfinies qui pointent respectivement sur le premier et le dernier
mot de la correspondance.

5 Trois utilisations possibles

Le logiciel LoX permet trois types d’exploitation des requétes et de leurs masques associés.

5.1 Extraction de sous-corpus

La premiere utilisation ignore les masques et génere un sous-corpus constitué de toutes les
portions du corpus sources décrites par la requéte. Cette utilisation permet de produire un
sous-corpus dans lequel le phénomene que l'on désire observer sera dense. On ramene ainsi le
corpus de grande taille sur lequel on doit travailler a un corpus de taille raisonnable.

5.2 Applications des masques
La deuxieme utilisation consiste a générer un fichier constitué des chaines générées par

l'application des masques aux correspondances issues de l'application de la requéte sur le
corpus.

L0X .' outil polyvalemf pour l’expl0rati0n de corpus annotés

Exemple : ﬁchier pour un étiquetage sémantique manuel

Le but est de générer un fichier permettant un étiquetage sémantique manuel aisé des
occurrences du lemme « barrage » dans un grand corpus.

La requéte sera donc : cible:[ lemme: ”barrage ” ]

Le masque associé sera :

[B.'[P.'m0t][C.'32];cible. index-50;cible. index-I][C.'9]
[P.'cible. mot] [ C :9]

[C.'9]

[B.'[P.'m0t][C.'32];cible.index+I;cible. index+50][C.'9]
[B.'[P.'m0t][C.'32];cible.index-I;cible. index-5][C.'I0]

Voici un extrait du fichier généré (les contextes gauche et droit ont été tronqués) :

Contexte gauche Mot Eti Contexte droit Clef Gauche
communistes feront systématiquement barrage aux candidats de droite. systématiquement " feront
gardiens sont répartis en trois " barrages " distants d ' une centaine " trois en répartis
que les castors construisent des barrages ( exemple que nous empruntons des construisent castors
s ' adresse aux gardiens des barrages , aux délégués locaux , aux des gardiens aux adresse
inquiétantes courent de barrage en barrage : Il s ' adresse aux en barrage de courent
« Les castors construisent des barrages » fait partie du stereotype des construisent castors
voulu prendre le risque de faire barrage a ceux des rares élus locaux faire de risque le

Pour un exemple réel de ce type, voir (Reymond, 2001).

5.3 Dénombrement des masques

L'application des masques aux correspondances, reconnues par les requétes, produit un
ensemble de chaines. Il est possible de générer un tableau permettant de dénombrer le nombre
d'occurrences de chaque chaine dans l'ensemble des chaines générées. De plus, lorsqu'un
masque discriminant est généré, il est possible de produire un tableau de dénombrement a
deux dimensions.

Exemple : recherche deﬂgements

Le but est de dénombrer les n-grammes (n<5) contenant le lemme « chef » dans un grand
corpus. Nous utiliserons la requéte de la section 3.4, le masque associé sera :

[B.'[P.'m0t]_;begin. index;end. index-I ] [ P.‘ end. mot]

Voici un extrait du ﬁchier généré :

chef_—_d_‘ _oeuvre 42
chefs_de_publicité 41
chef_de_file 3 6
premier_chef 2 5
chefs_d_' _entreprise 2 5
chef_du_gouvernement 2 4
rédacteur_en_chef 2 1

L. A UDIBERT

Exemple : dénombrement avec discriminant

Il est possible de générer un deuxieme masque servant de discriminant, pour obtenir un
dénombrement a deux dimensions. Le tableau qui suit est extrait d'un ﬁchier résultant de
l'application de plusieurs requétes centrées sur le lemme «barrage » et appliquées sur un
corpus dont le lemme barrage a été étiqueté sémantiquement. Le masque discriminant renvoie
l'étiquette du sens du lemme «barrage ». Ce tableau permet d'observer la répartition des
phénomenes, formalisés par les regles, qui sont en cooccurrence avec le lemme « barrage » en
fonction du sens de ce lemme.

Coo_Phr_castor 7

pos (—1)_DETDMS 1 9
coo_faire 12 1 1
Coo_Phr_construction 9
Coo_Phr_construire 15
Coo_Phr_exemp1e 14
pos(—1)_PREP 2 9
2—gramme (faire_barrage) 12

3—gramme (barrage_au_déve1oppement) 7

3—gramme (construisent_des_barrages) 9
5—gramme (courent_de_barrage_en_barrage) 6
Coo_Phr_dommage 7
Coo_Phr_droite 6
Coo_Phr_déve1oppement 7

6 Perspectives

Les informations générées par un traitement adéquat, sur un corpus préalablement étiqueté
sémantiquement, peuvent permettre de rechercher quels sont les phénomenes, en cooccurrence
avec un mot donné, les plus indicateurs du sens de ce mot. Un traitement statistique
subséquent pourrait alors permettre une désambigu'1'sation sémantique automatique. C’est dans
cette perspective que s'inscriront les développements ultérieurs de l'application. Un
développement fort intéressant, notamment dans la perspective de désambigu'1'sation, serait de
pouvoir utiliser des bases de connaissance externes. En effet des sources d'informations sont
actuellement disponibles, comme WordNet (Miller, Beckwith, Fellbaum, Gross, & Miller,
1993), EuroWordNet (Vossen et al., 1998). Elles permettent d'augmenter considérablement
l'information disponible sur les mots. Il serait intéressant de pouvoir utiliser de telles sources
d'informations dans les requétes.

L'outil développé est extrémement ouvert et permet une grande diversité d'applications en
raison du grand pouvoir expressif des requétes et de leur libre interprétation au travers des
masques. Il est ainsi possible, dans le cadre de projets d'étudiants par exemple, de développer
des frontaux graphiques permettant une utilisation plus simple, plus intuitive, mais aussi plus
limitée des possibilités de l'application (par exemple une utilisation de type concordancier,
dénombrement de phénomenes bien particuliers, ...).

LoX .' outil polyvalent pour l ’exploration de corpus annotés

7 Conclusions

Nous avons présenté une application permettant d'écrire des requétes complexes sur des
corpus étiquetés et de formater librement les résultats de ces requétes. Le formalisme des
requétes est basé sur le principe des expressions régulieres bien connu de la plupart des
linguistes travaillant sur des corpus écrits. Contrairement a certains logiciels, qui ne
permettent que l’extraction de concordances au format relativement figé, le formatage libre du
résultat des requétes permet leur réutilisation par des programmes ultérieurs et autorise une
grande diversité d'applications, s'écartant largement du cadre des simples concordanciers.
Cette application se rapproche du logiciel INTEX développé au LADL (Silberztein, 2000)
mais est plus orienté vers le traitement de corpus étiquetés (notamment morpho-
syntaxiquement désambiguisé). LoX existe dans une version ligne de commande pouvant étre
compilée sur n'importe quelle plate-forme et dans une version disposant d'une interface
graphique pour une utilisation plus souple sous Windows.

Du fait du grand pouvoir expressif des requétes et de leur libre interprétation au travers des
masques LoX constitue un outil puissant et polyvalent pour tout linguiste ou lexicographe
travaillant sur des corpus écrits. Nous avons pris dans l’article l’exemple de l’étiquetage
morpho-syntaxique, mais le logiciel n’est pas dépendant du type particulier d’étiquetage
utilisé, et peut étre utilisé dans des domaines variés de la recherche basée sur les corpus.

Références

Adda, G., Mariani, J ., Paroubek, P., Rajman, M., & Lecomte, J. (1999). L'action GRACE
d'évaluation de l'assignation des parties du discours pour le francais. Langues, 2(1),
119-129.

Christ, 0. (1994). A Modular and Flexible Architecture for an Integrated Corpus Query
System. Proceedings of COMPLEX’94 3rd Conference on Computational
Lexicography and Text Research, 23-32.

Miller, G. A., Beckwith, R., Fellbaum, C., Gross, D., & Miller, K. (1993). Introduction to
WordNet .' An on-line lexical database (Technical Report). Princeton University:
Cognitive Science Laboratory.

Reymond, D. (2001, 2-5 juillet). Dictionnaires distributionnels et étiquetage lexical de
corpus. Paper presented at the RECITAL (TALN) 2001, Tours.

Silberztein, M. (2000). INTEX [Linguistic software]. Champs-sur-Marne: Association pour le
traitement informatique des langues (ASSTRIL).

Sperberg-McQueen, C. M., & Burnard, L. (1994). Guidelines for Electronic Text Encoding
and Interchange. Text Encoding Initiative.

Vossen, P., Bloksma, L., Rodriguez, H., Climent, S., Calzolari, N., Roventini, A., Bertagna,
F., Alonge, A., & Peters, W. (1998). The EuroWordNet Base Concepts and Top
Ontology (LE2-4003.): EuroWordNet project.

