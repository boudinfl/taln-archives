RECITAL 2004, Fe‘s, 21 avril 2004

Mot vide, mot plein ?
Comment traneher loealement

Frédérick HOUBEN

GREYC — Ul\/[R 6072 — Université de Caen
Bureau S2 301 — campus 11- BP 5186
F-14032 CAEN cedex
fhouben@info.unicaen.fr

Mots-elefs — Keywords

Traitements multilingues, découverte de mots vides, alternative a une stop-list, extraction de
régles et de motifs fréquents.

Multilingual NLP, function words discovery, stop-list alternation, rules and frequent pattern
mining.

Résumé — Abstract

Nous présentons une méthode multilingue de catégorisation en mot vide / mot plein a partir
de corpus brut. Cette méthode fait appel a des propriétés trés générales des langues ainsi qu’a
des techniques issues de la communauté de la fouille de données.

We are presenting a NLP multilingual method for function word / content word categorization
using no other resource than the raw text itself. This method uses very general linguistic
properties and also engineering from data mining community.

1 Introduction

Ce travail est une tache préliminaire dans le cadre de traitements linguistiques sans autres
ressources que le texte a analyser lui-méme. Cette absence de ressources permet d’analyser un
texte sans identification préalable de la langue dans laquelle il a été écrit et permet aussi
d’éviter le recours a une stop-list et le probléme lié des mots homographes pouvant étre a la
fois mot vide ou mot plein selon le contexte (son, vers, pas ...). Pour cela, nous utilisons des
connaissances trés générales (qualifiées parfois de méta-connaissances) sur les langues. Nous
ne prétendons cependant pas qu’une telle méthode soit totalement universelle et nous nous
contenterons de la réduire a certains groupes de langues aux propriétés communes (ici, les
langues de type alphabétique non agglutinées).

Dans le cadre de cet article, nous nous intéresserons a la discrimination locale mot vide / mot
plein. Cette tache peut servir d’amorce dans des travaux d’extraction de candidats termes
(V ergne, 2003) ou d’indexation automatique.

Frédérick H0 UBEN

2 Mots vides, mots grammaticaux, function Words

On trouve plusieurs definitions de ces mots Vides qui varient dans l’inclusion ou la non
inclusion des mots lexicaux relies au theme d’un corpus donne (ce mot n’est pas discriminant
dans le cadre de l’informatique documentaire et augmente la taille d’un index de maniere
inutile). Dans notre cas, nous nous situons plus dans l’optique de (Tesniere, 1969) et
considerons comme mots Vides l’ensemble des mots grammaticaux ainsi que les auxiliaires.
Les mots pleins sont donc tous les autres.

Il est important de noter ici que les deductions etant faites a l’aide du contexte, elles sont
totalement locales et peuvent donc differer pour une meme graphie.

3 Propriétés linguistiqucs utilisécs
Nous utilisons deux proprietes linguistiques tres generales :
0 Le << principe du moindre effort >> de Zipf consiste a dire que le locuteur a tendance a

raccourcir ce qui est d’usage courant (Zipf, 1949). En d’autres termes, les mots
grammaticaux sont a la fois frequents et de petite taille.

0 La seconde propriete est une consequence du principe de Saussure (Saussure, 1922)
selon lequel << dans la langue, il n’y a que des differences». Entre autre, nous
pouvons calculer des differences locales pour discriminer les mots Vides des mots
pleins, differences entre les criteres de taille et d’effectif tels que definis par Zipf.

0 Enfin, nous faisons l’hypothese que les mots Vides et les mots pleins ne se succedent
pas n’importe comment et que certaines chaines sont plus frequentes que d’autre.

4 Proccssus dc marquage

4.1 Une vue générale
99)

C°'p“5 Calcul des Extraction Application
brut motifs des regles des regles

 
   
       

Corpus

Base de marqué

regles

 

Figure 1: Processus de marquage mot Vide / mot plein

Notre processus se decompose en trois etapes distinctes. Une premiere etape perrnet de
collecter les motifs apres un decoupage du corpus en mots (et un comptage de l’effectif de
chaque graphie). Dans la deuxieme etape, nous utilisons le logiciel mvminerl, pour extraire
des regles a partir des motifs obtenus precedemment et enfin nous cherchons a appliquer ces
regles pour affiner nos resultats. En definitive, nous obtenons notre corpus avec, pour chaque
mot, l’indication du type calcule.

1 Logiciel d’etude realise par Francois RIOULT (RIOULT 2003). I1 extrait l’ensemble des motifs 8-libres qui
constituent une representation condensee des motifs frequents. Les resultats fournissent l’association d’un
motif libre et de sa ferrneture (au sens de Galois), ce qui constitue une regle forte.

Sens de lecture

Mot vide, motplein ? Comment trancher localement.

4.2

Dans notre cas, on appellera motif une suite de 5 lettresz parmi les suivantes : P (Plein), s
(signe de ponctuation), V (Vide) ou n (non determine). Ces motifs representent le type, d’apres
une deduction en contexte local des 5 mots d’une fenétre.

Calcul des motifs

7

n arréts

P

Graphies ni

motif

connu
P

V V 1'1

Figure 2 : Exemple de motif pour une fenétre

Dans cette partie, nous utilisons une fenétre glissante (Voir Figure 3), c'est-a-dire une suite de
5 mots consecutifs pris dans le sens de lecture. Dans cette fenétre, nous allons effectuer des
deductions locales pour determiner le type des 5 mots puis faire glisser la fenétre d’un cran
dans le sens de lecture afin d’analyser tout le corpus.

Nous disposons, pour chaque mot de la fenétre, de sa graphie, de son effectif total dans le
corpus, ainsi que de la liste des deductions locales realisees pour ce mot, dans les differentes
positions qu’il a occupees dans la fenétre aux precedentes positions de la fenétre, aVec donc
des contextes legerement differents a chaque fois.

_ _ Deductions obtenues pour chaque graphie
[Graph1es/ effectif] , _
Ordre des deductions
[conquétes 1 ] P P P P P
[impreVues l ] P P P P
[. 108 ] s s s
[La 5 ] nd V
[marche l ] P

Motif de la fenétre : P P s V P
conquétes est considere comme un mot plein apres recoupement en sortie de fenétre

[impreVues 1 ] P P P E P E P
[. 108 ] s s I s I s
[La 5 ] nd V V
[marche l ] P P
[triomphale l ] P

Motif de la fenétre : P s V P P
imprévues est considere comme un mot plein apres recoupement en sortie de
fenétre

Figure 3 : Exemple de fenétre aVec un glissement d’un mot

Nous allons calculer la moyenne geometrique des effectifs des mots de la fenétre (sauf les
ponctuations) ainsi que celle des tailles de ces mots. Les mots dont l’effectif est superieur a la

2 Nous avons determine la taille de ces motifs en estimant qu’un empan de 5 mots est suffisant pour garantir la

presence de mots Vides et pleins. En effet, puisque nous utilisons des differences locales, il faut etre sﬁr que
de telles differences existent dans notre fenetre.

Frédérick H0 UBEN

moyenne des effectifs et dont la taille est inferieure a la moyenne des tailles sont consideres
comme Vides. Les mots dont l’effectif est inferieur a la moyenne et dont la taille est
superieure sont consideres comme pleins. Dans tout autre cas, on considere qu’il y a
indetermination.

Lorsque la fenétre glisse d’un mot dans le sens de lecture, un nouVeau mot y entre, un autre
en sort. Le mot qui sort a ete dans les 5 positions (sauf premiers et demiers mots du corpus)
de la fenétre et a donc fait l’objet de 5 deductions locales qui peuVent étre differentes. Nous
effectuons alors un recoupement de ces cinq deductions (dans l’etat des traVaux, nous prenons
simplement la deduction majoritaire) pour attribuer un type unique << en sortie >> a ce mot.

Lorsque nous aVons parcouru le corpus et attribue a chacun des mots un type qui peut étre soit
Vide, soit plein, soit encore non determine, nous disposons d’une liste des mots et de leur
type. Nous allons donc essayer maintenant de trouVer le type des mots non encore determines.

4.3 Extraction des regles

Les regles sont calculees par le logiciel mvminer a partir des motifs collectes dans la phase
precedente. Les regles se presentent sous la forme classique << premisses => conclusion >>. 11
s’agit de regles a premisses minimales. Dans l’exemple ci-dessous, les premisses sont le
contexte suiVant : un mot Vide, un mot de type quelconque, un signe de ponctuation puis un
mot Vide. La conclusion nous indique que le mot de type quelconque est sans doute un mot
plein. Les regles peuVent aVoir des exceptions (tolerance en erreur) dont la quantite est
parametrable lors de l’execution de mvminer.

V s V => V E>P s V

Figure 4 : Exemple de regle

Nous ne gardons que les regles aVec un support minimal qui est fonction de la langue etudiee
afin de ne pas aVoir des << regles d’exceptions >>. De meme, seules les regles aVec au moins
deux elements dans les premisses sont conserVees. En effet, nous cherchons a deduire le type
d’un mot d’apres son contexte et les premisses correspondent a ce contexte. Enﬁn, les regles
contenant un element de type indeterrnine sont aussi rejetees puisque notre objectif est
justement de leVer cette indetermination.

Notons enfin, et cela est essentiel, que la maniere dont les regles sont extraites garantit qu’il
ne peut pas y en aVoir deux contradictoires (premisses identiques, conclusions opposees).

4.4 Application des regles

des conquétes imprevues . La marche
Effectif 3 l l l 108 5 1
Type initial V P P s n P
Regle appliquee P s ':> V P
Type ﬁnal v

Figure 5 : Application d'une regle

Pour appliquer les regles, nous sortons du cadre de la fenétre pour modifier le type des mots
tel que defini apres recoupement, type que nous aVions appele << en sortie >>. Nous cherchons
simplement a retrouVer automatiquement un contexte qui correspond aux premisses d’une

Mot vide, motplein ? Comment trancher localement.

regle et nous Verifions que la conclusion de cette regle permettra de remplacer un mot dont le
type n’aVait pas encore ete determine.

5 Evaluation et discussion des résultats

Nous avons cherche a evaluer ces resultats en deux temps. Tout d’abord le degre de
categorisation des mots des la premiere etape, basee sur le simple calcul de double difference
taille / effectif. Ensuite, la part d’amélioration apportee par l’utilisation des regles.

Le tableau ci-dessous presente les resultats sur un corpus en francais (article de Coubertin sur
le football). Ce corpus est de taille Volontairement limitee pour perrnettre une Validation a la
main des resultats obtenus. Dans chaque colonne, nous mettons le nombre de graphies ayant
ete considerees comme des mots Vides, comme des mots pleins ou de type non determine.

Les deductions locales sont les calculs effectues au cours de la premiere etape, a l’interieur
d’une fenétre. Chaque mot apparaissant dans les 5 positions de la fenétre, il y a
approximativement 5 fois plus de deductions que de graphies.

Les recoupements sont les types definitifs, quand le mot est sorti de la fenétre et que nous
avons fait la synthese des deductions locales effectuees sur ce mot. La encore, ce sont des
calculs effectues lors de la premiere etape. Cette fois-ci, il y a un type par graphie du corpus.

La demiere colonne montre les resultats obtenus apres avoir extrait et applique les regles.
Nous retrouvons les resultats precedents auxquels nous ajoutons les graphies dont le type
n’etait pas encore determine et qui l’a ete grace a l’application des regles.

3287 graphies dont Apres deductions Apres recoupements Apres application des
1118 differentes locales en sortie de fenétre regles
Vides 6265 1262 1277
Pleins 6252 1256 1277
Indeterminés 2178 (24 %) 423 (14,4 %) 387 (13,2 %)

Figure 6 : Resultats sur un corpus francais

De maniere plus precise, nous remarquons que des cas difficiles sont ainsi resolus. Par
exemple, 0s, ans, vie, jeu sont reconnus pleins malgre leur tres petite taille (Voir Figure 7)
mais grace au contexte dans lequel nous les avons lus. Jeu presentait meme une deuxieme
difficulte puisque le texte analyse portait sur le football et quejeu faisait partie des mots lies
au theme et donc a grand effectif (11 occurrences).

Graphies regles du jeu ; I1 les
Effectif/ Type initial 5 /P 42/V 11/n 31 /s 39/V 58 /V
Regle appliquee V I:> P s V

Figure 7 : Exemple de deduction reussie

Nous avons aussi cherche a calculer la Valeur de ces resultats. Nous avons donc procede a une
annotation manuelle du corpus en mot Vide / mot plein a laquelle nous avons compare nos
resultats de calculs. Nous avons regarde le nombre de mots auxquels un type a ete donne
(Vide ou plein) pour calculer un taux de rappel ainsi que le nombre de ces mots dont le type
donne est le bon afin d’etablir une mesure de precision. Nous avons effectue ces deux
mesures avant et apres l’application des regles extraites, afin de pouvoir determiner

Frédérick H0 UBEN

l’amélioration apportée par cette méthode. Nous avons ainsi obtenu un rappel de 85,6 % avant
et 86,84 % apres application des regles pour une précision de 93,37 % avant et 93,11 % apres.

Nous avons enfin cherché a évaluer la précision des modiﬁcations effectuées grace aux
regles. Nous avons simplement regardé quels étaient les mots ayant subit une modiﬁcation de
type (indéterminé avant l’application des regles, vide ou plein apres) et dont le nouveau type
était correct. Pour plus de détail, nous avons séparé ceux dont le nouveau type était vide de
ceux dont le nouveau type était plein. 15 mots ont été déterminés vides dont 14 correctement
et 21 mots déterminés pleins dont 15 correctement.

6 Conclusion

Cette méthode présente de bons résultats et perrnet d’obtenir, sans ressources préalables, une
discrimination en mots vides / mots pleins y compris sur des cas difficiles comme les mots
dont la taille ou l’effectif ne permettrait pas que nous les détections en utilisant simplement la
loi de Zipf. Nous résolvons le probleme des mots pleins de petite taille, des mots pleins de
grand effectif (mots liés au theme du corpus notamment), le probleme des mots vides avec
majuscule (et donc faible effectif) et aussi certains cas d’homographie. ..

Cette méthode peut étre vue comme un classifieur r1a'1'f dans son fonctionnement actuel. Elle
présente surtout l’originalité de faire appel a des techniques issues de la communauté de la
fouille de données qui peuvent s’appliquer a notre domaine avec une certaine réussite. Il
faudrait maintenant comparer cette méthode avec des méthodes d’apprentissage déja
existantes comme les réseaux connexionnistes afin d’en voir la réelle efficacité dans l’optique
de traitements sans ressource.

Nous envisageons bien sﬁr de développer et d’améliorer cette méthode notamment au travers
d’une collaboration accrue entre Francois RIOULT et moi-méme, chacun de nous amenant
ses connaissances spécifiques et son regard neuf sur le domaine de l’autre.

Références
Ben Yahia S., Cherif C. L., Mineau G., Jaoua A. (2003), Actes des 3é’"eEGC, 131-143.

Bourigault Didier (2002), Upery : un outil d'analyse distributionnelle étendue pour la
construction d’ontologies a partir de corpus, Actes TALN 2002, Nancy, pp.75-84.

Do C. (2003), Posterior Decoding for Generative Constituent-Context Grammar Induction,
Grammatical Induction Community website : http://eurise.univ-st-etienne.fr/gi/

Klein D., Manning C. D.(2002), A Generative Constituent-Context Model for Improved
Grammar Induction, Proceedings of the 40th Annual Meeting of A CL, 128-13 5.

Rioult F., Crémilleux B. (2003), Condensed Representations in Presence of Missing Values
Proceedings 0fIDA '03, LNCS 2810, p. 578-588.

7

Tesniere L. (1959), Elements de syntaxe structurale, Paris, Klincksieck.

Vergne J. (2003), Un outil d'extraction terminologique endogene et multilingue, Actes de
TALN 2003, tome 2, 139-148.

Wolff J. G. (2003), Unsupervised Grammar Induction in a Framework of Information
Compression by Multiple Alignment, Unification and Search

Zipf G. K. (1949), Human Behaviour and the Principle of Least Effort, New York, Harper.

