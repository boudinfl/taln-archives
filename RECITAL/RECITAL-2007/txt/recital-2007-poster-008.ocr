RECITAL 2007, Toulouse, 5-8 juin 2007

Architecture modulaire portable pour la génération
du langage naturel en dialogue homme-machine

Vladimir POPESCUL2
1 Laboratoire d’Inforrnatique de Grenoble, France
2 Université « Politehnica >> de Bucarest, Roumanie
Vladimir . Popescu@imag . fr

Résumé. La génération du langage naturel pour le dialogue oral homme-machine pose des
contraintes spéciﬁques, telles que la spontanéité et le caractere fragrnenté des énoncés, les types
des locuteurs ou les contraintes de temps de réponse de la part du systeme. Dans ce contexte,
le probleme d’une architecture rigoureusement spéciﬁée se pose, autant au niveau des étapes
de traitement et des modules impliqués, qu’au niveau des interfaces entre ces modules. Aﬁn de
permettre une liberté quasi-totale a l’égard des démarches théoriques, une telle architecture doit
étre a la fois modulaire (c’est-a-dire, permettre l’indépendance des niveaux de traitement les uns
des autres) et portable (c’est-a-dire, permettre l’interopérabilité avec des modules concus selon
des architectures standard en génération du langage naturel, telles que le modele RAGS - « Re-
ference Architecture for Generation Systems >>). Ainsi, dans cet article on présente de maniere
concise l’arcl1itecture proposée, la comparant ensuite au modele RAGS, pour argurnenter les
choix opérés en conception. Dans un second temps, la portabilité de l’architecture sera décrite
a travers un exemple étendu, dont la généralité réside dans l’obtention d’un ensemble de régles
perrnettant de plonger automatiquement les représentations des informations de notre architec-
ture vers le format du modele RAGS et inversement. Finalement, un ensemble de conclusions
et perspectives cléturera 1’ article.

Abstract. Natural language generation for human-computer dialogue imposes speciﬁc
constraints, such as the spontaneous and fragmented character of the utterances, speaker types
or constraints related to the system’s time of response. In this context, the issue of a thouroughly
speciﬁed architecture stems naturally, with respect to the processing stages in the modules in-
volved and to the interfaces between these modules as well. In order to allow for a quasi-total
freedom concerning the theoretical principles driving the processing stages, such an architecture
must be modular (i.e., allowing the independence of the modules of each other) and portable
(i.e., allowing a certain interoperability between modules designed following this architecture
and existing modules, designed following standard, reference architectures, such as the RAGS
model). Thus, in this paper ﬁrstly the proposed architecture will be presented in a concise man-
ner, comparing it then to the RAGS model and arguing for the design choices being made. Af-
terwards, the portability of the architecture will be described, via an extended example whose
general character resides in the fact that a set of rules are obtained, that allow automatic transla-
tions between representation formats in our architecture and in the RAGS model, in both ways.
Finally, a set of conclusions and pointers to further work end up the paper.

Mots-clés 2 génération, dialogue, architecture modulaire, portabilité, XML.
Keywords: generation, dialogue, modular architecture, portability, XML.

407

Vladimir POPESCU

1 Introduction

Nos recherches se situent dans le cadre de la génération du langage naturel pour le dialogue oral
homme-machine et concement le développement d’un module de génération du langage naturel
pour donner un caractere aussi « naturel » et expressif que possible aux réponses langagieres
du systeme face aux requétes des usagers. Ce travail poursuit ainsi des recherches commencées
depuis plusieurs armées (Imberdis & Caelen, 1997). Le probleme n’est pas simple, car la plu-
part des générateurs textuels existants sont concus pour des situations de monologue, et il s’y
ajoutent le caractere spontané et fragmenté du dialogue, auquel des contraintes de pertinence,
expressivité et temps de réponse se conjuguent (McTear, 2002).

Ainsi, nous considérons (Popescu et al., 2007) que la réponse du systeme se situe a cinq ni-
veaux auxquels le langage naturel peut étre « produit » par un systeme de dialogue 2 (i) le
niveau logique instantié dans un controleur de dialogue et ne faisant pas partie du générateur,
mais fournissant l’intention communicationnelle a mettre sous forme linguistique, (ii) le niveau
pragmatique gérant les aspects lies a l’expressivité des énoncés et a leur pertinence par rapport
au contexte dialogique, (iii) le niveau linguistique produisant le texte pour l’intention commu-
nicationnele, (iv) le niveau expressif calculant la forme ﬁnale de l’énoncé et la prosodie, et (V)
le niveau acoustique réalisant la synthese de la parole proprement dite.

L’ architecture concue pour la génération dans le cadre du dialogue homme-machine part d’un
ensemble de principes 2

1. prendre en compte les aspects pragmatiques (rhétoriques - structuration discursive et ex-
pressifs - valences émotionnelles) et la gestion des tours de parole (dialogue oral spon-
tané), ainsi que les particularités des locuteurs;

2. considérer surtout les performances des agents du dialogue (en dépit des norrnes de com-
pétence qui varient d’un contexte (social, situationnel, etc.) a 1’ autre et ne sont donc pas
génériques);

3. s’appuyer sur un corpus de dialogues réels entre hurnains et entre homme et machine (en
dépit des prescriptions grarnrnaticales ﬁxées a priori) pour controler les aspects linguis-
tiques en generation;

4. rendre les traitements appropriés a un fonctionnement en temps réel (et donc éviter des
processus d’inférence relativement coﬁteux);

5. diminuer autant que possible la dépendance a la tﬁche et a la langue, en perrnettant des
pararnétrages aisés;

6. rendre les niveaux de traitement de la parole aussi indépendants que possible des traite-
ments purement textuels.

Le premier point des désidérata ci-dessus est réalisé dans le générateur pragrnatique, ou les
aspects rhétoriques-discursifs sont gérés par l’utilisation adaptée de la théorie SDRT (« Seg-
mented Discourse Representation Theory ») (Asher & Lascarides, 2003), tandis que les aspects
expressifs au niveau de chaque énoncé sont gérés par le controle du « degré de puissance de
la force illocutoire ». De plus, on prévoit la prise en compte, dans le générateur pragrnatique,
d’un doublet d’attributs caractérisant chaque partenaire du dialogue (en termes de niveau de
farniliarité par rapport au dialogue courant et de relation sociale de l’un avec 1’ autre).

Le cinquieme point est réalisé par le fait que, autant au niveau pragrnatique que linguistique, les
méthodes utilisées sont indépendantes de la tﬁche et de la langue (supposant en ﬁn de compte

408

Architecture modulaire portable pour la generation du LN en dialogue homme-machine

NOTRE ARCHITECTURE

 

Niveau Logique

Niveau pragmatique

FIG. 1 — Architecture modulaire de generation et correspondances avec le modele RAGS

des traitements du type appariement des graphes) et pararnetrables dans une langue et pour une
tﬁche donnees.

Le sixieme point est realise par 1’uti1isation d’un format standard pour la representation des
connaissances (XML) et d’une theorie de representation pragmatique-discursive dont 1e fonna-
lisme « inteme » n’est pas pris en compte (la SDRT - « Segmented Discourse Representation

E
§ {Formule logique}
D
Q
E GENERATEUR
I; PRAGMATIQUE
U
E
§
5
Z GENERATEUR
E 3 E LINGUISTIQUE
<3 P E
E’ 2 °
2 : % :
E id § {Texte}
E3
E

GENERATEUR

PROSODIQUE

{Texte + Contour F0}

 

Niveau expressif Niveau linguistique

GENERATEUR
ACOUSTIQUE

( {Parole} )

Niveau acoustique

4
6

409

 

Niveau
rhetorique

Niveau
documentaire

 

Niveau

semantique

Niveau
switaxique

S}mRep

i

Niveau
citationnel

Vladimir POPESCU

Theory », dont on ne prend en compte que les relations rhetoriques et leurs semantiques infor-
melles).

L’idee de concevoir une architecture pour la generation du langage nature] a ete deja enoncee
dans plusieurs etudes, comme celle de Reiter et Dale (Reiter & Dale, 2000) et 1’ architecture
RAGS (Mellish et al., 2006). Mais aucun de ces deux modeles ne traite le dialogue homme-
machine. 11 existe peu de travaux pour deﬁnir une architecture adaptee pour la generation en
dialogue (Imberdis & Caelen, 1997), (McTear, 2002).

D’autres travaux ont aborde la generation en dialogue de diverses facons, dont les plus notables
sont, a notre sens, ceux d’Amanda Stent (Stent, 2001), de Mariet 'Iheune ('Iheune, 2000) et
de Matthew Stone (Stone, 1998), puisqu’ils sont explicitement concemes par le dialogue oral
homme-machine, aboutissant en meme temps a des systemes fonctionnels. Ces demarches ne
sont pas generiques, sont sans reference a un « standard » en generation (tels que 1’ architecture
de Reiter et Dale ou le modele RAGS). Cela implique le manque de portabilite et de reutilisation
de ces systemes. Notre architecture proposee ici est fortement compatible a la fois avec le propos
de Reiter et Dale et avec le modele RAGS.

Pour l’utilisation de la SDRT en generation en situations de monologues, les travaux de Lau-
rence Danlos et son equipe peuvent etre citees (Danlos et al., 2001); pour des extensions de la
SDRT pour l’inte1pretation des dialogues, les travaux de Laurent Prevot (Maudet et al., 2004)
et son equipe sont interessants, mais ne concement pas la generation. Dans ce contexte, les
travaux assumes par notre proj et essaient de renforcer les recherches en generation pour le dia-
logue homme-machine ﬁnalise.

2 Architecture modulaire compatible avec les « standards »
en génération

Le schema global de l’architecture est illustre dans la ﬁgure 1, ou on met en evidence la relation
entre les niveaux de traitement, les modules (generateurs) et les connaissances echangees entre
les modules et implicitement entre les niveaux.

Sur cette ﬁgure les modules de traitement sont representes par des rectangles et les structures
de donnees par des ellipses. A droite, les ﬂeches doubles montrent les niveaux de traitement,
tandis qu’a gauche, les ﬂeches situent l’architecture proposee ici par rapport a l’architecture de
reference de Reiter et Dale (Reiter & Dale, 2000), qui represente une premiere speciﬁcation,
plut6t theorique, d’une architecture pour la generation du langage naturel.

Les interfaces entre les modules de generation sont speciﬁees en XML et les choix de concep-
tion pour notre architecture ont ete decrites de maniere etendue dans (Popescu et al., 2007).
Le modele RAGS est decrit dans (Mellish et al., 2006). Les entites denommees « primitives
abstraites » a un niveau de traitement dans la description du modele RAGS ci-dessus sont en
fait des pointeurs renvoyant vers les representations les plus complexes au niveau inferieur; par
exemple, la primitive RhetLeaf au niveau rhetorique renvoie vers une structure semantique,
SemRep.

Le modele RAGS speciﬁe une architecture « pipeline », permettant des raccourcis entre les
niveaux de representation, via les ﬂeches non-locales (Mellish et al., 2006). Donc, la double
incidence du niveau expressif a d’ autres niveaux de traitement est compatible en theorie et en

410

Architecture modulaire portable pour la generation du LN en dialogue homme-machine

pratique avec RAGS.

Les correspondances entre RAGS et notre architecture sont montrees dans la ﬁgure 1, oil les
connaissances transferees dans le modele RAGS sont des primitives (dans le cas de KB|d et
Quote) ou des representations derivees (pour le reste - cf. la discussion ci-dessous).

Notre architecture Le modele RAGS

— Niveau Logique - Ce niveau de traitement ne fait pas partie a — Niveau conceptuel - Ce niveau de traitement fournit des repre-
vrai dire de la composante de generation d’un systeme de dia- sentations non-linguistiques desinformations aoommuniquer (par
logue, mais on le precise ici en raison de oompatibilite avec les exemple des formules logiques) ; oes representations conceptuelles
architectures existantes dans le domaine de la generation; il four- sont manipulees via des pointeurs vers des entites primitives dans
nit une forme logique oorrespondante a l’intention communica- une base de oonnaissanoes et appelees KB|d (« Knowledge Base

tionnelle a mettre sous forme linguistique, prenant en entree une Identiﬁer »);

formule logique oorrespondante a l’intention communicationnelle

d’un enonce provenu de l’usager; — Niveau rhetorique - Ce niveau de traitement deﬁnit des relations
discursives entre les enonces enchaines dans un diseours; la ma-
niere dont les relations sont realisees est speciﬁee via les primitives
abstraites RhetRe| (pour la relation) et RhetLeaf (pour les argu-
ments de la relation) a partir desquelles les structures composites

_ . . _ . . 1 . .
Nrveau pragmatrque Ce niveau de trartement est e premier a Rhemepseq et Rhemep sont communes;

faire vraiment partie du systeme de generation; il utilise la SDRT
et les actes de langage pour fournir une representation discursive
du dialogue oourant, prenant en entree la formule logique pour
l’enonoe a engendrer ;

— Niveau documentaire - Ce niveau de traitement ooncerne la dis-
position physique des enonces (voire typage du texte) a produire
et les structures de donnees fournies sont DocAttr, DocLeaf, Do-
cRepSeq et DocRep, oonstruites a partir des primitives abstraites
DocFeat, DocAtom et DocLeaf;

— Niveau linguistique - Ce niveau de traitement opere la mise en - NW8“ Sémﬁllﬁqlle - C9 DiV9a'1 ‘19 ‘fai¢9m911tP9“té‘1'9 Combiﬂé
forme linguistique du message a generer par le systeme et pr-end avec le niveau rhetorique, ainsi qu’au niveau semantique on code a
en eutrée la structuxe discursive pour le dialogue oouram, foumjs. la fois les propositions atomiques (cf. oelles trouvees dans les struc-
sant le texte correspondant a l’enonoe materialisant la reponse du tures rhetoriques) ﬁt 195 °Ig311i53ﬁ°115 5‘-'“"t“1’é°5 de PF°P°Siti011S,
systems; pour l’entree aux generateurs dits « a entree semantique »; les

structures de donnees fournies par oe niveau, SemRep, Scoped-
SemRep, SemType, SemArtr,Scoping et Scopeconstr sont
oonstruites a partir des primitives abstraites DR, Semconstant,

— Niveau expressif - Ce niveau de traitement ajoute un degre d’ex- Sam Fred et SCOPEREI ;

pressivite au texte engendre au niveau linguistique, prenant en en-
tree la structure discursive pour fournir en sortie les parametres
prosodiques appropries associes au texte a generer; l’expressivite
est consideree seulement a l’egard de la qualite du signal vocal

— Niveau syntaxique - Ce niveau fournit une representation syn-
taxique abstraite qui ne speciﬁe pas l’ordre des mots a l’interieur
des enonces; par rapport a la representation semantique, la struc-
ture syntaxique comprend les fonctions grammaticales des mots et

symhéﬁsable apatﬁr du texte; est representee par les types SynRep, FVM (de « Feature-wulue
matrix », matrioe attribut-wleur), SynArg, et Adj, oonstruites a

partir des primitives nil, SynFun, SynFeat et SynAtom ;
- NWG8“ 3°0“5ﬁ‘l“¢ ' C9 “W93” Féalise 13 Syllﬂlése V003-19 PF°Pl'°' — Niveau citationnel - Ce niveau ooncerne surtout les fragments
B19111 dites 911 FY9113“ 5\1’911‘1'é9 “11 texte amwté P0“! “119 8955011 ﬁxes de texte (les structures ﬁgees) incluses, sans modiﬁcation,
ﬁne de 13 PF0S0di9 P0“! f°“mjf 911 Wale 13 Pawle SYN-hétisée 2 dans la sortie du systeme de generation ; pour la representation des

donnees a ce niveau seule une primitive abstraite existe, Quote ;

L’ architecture proposee ici et son parallele, l’architecture RAGS sont compares ci-dessous.

Ainsi, le niveau logique de notre architecture correspond au niveau conceptuel du modele RAGS
seulement du point de vue de la generation, car le generateur logique (en fait, le controleur de
dialogue) a un role plus etendu que le niveau conceptuel de RAGS. C’est pour cela que le niveau
logique ne fait pas a vrai dire partie de notre architecture, mais represente seulement l’interface
du systeme de generation au contexte dialogique.

Le niveau pragrnatique de notre architecture correspond au niveau rhetorique de RAGS et au
niveau docurnentaire de ce dernier, car notre generateur pragrnatique assure la situation et la
coherence rhetorique de l’acte de langage a engendrer, en foumissant en meme temps une re-
presentation qui constitue une structuration discursive.

Le niveau linguistique de notre architecture correspond a trois niveaux de RAGS 2 les niveaux

411

Vladimir POPESCU

semantique, syntaxique et citationnel.

Quant aux niveaux expressif et acoustique de notre architecture, ceux-ci n’ont pas de correspon-
dants en RAGS car le cote prosodie et synthese de parole represente un aspect de la generation
dont RAGS ne rend pas compte. RAGS est conceme seulement avec l’obtention du texte comme
resultat ﬁnal du processus de generation.

En conclusion, on observe que l’architecture, bien qu’elle s’appuie sur d’autres architectures
de reference, soit plus theoriques comme celle de Reiter et Dale, soit plus orientees logiciel,
comme RAGS, reste particuliere dans les details ﬁns.

3 Architecture portable

Nous discutons maintenant de l’isomo1phisme entre les representations de RAGS et les repre-
sentations de notre architecture, en nous appuyant sur un exemple de representations dans le
modele RAGS et dans notre architecture.

Nous illustrons cela autour d’un exemple pour la representation rhetorique correspondante a un
dialogue court entre deux locuteurs, ayant comme objet l’etablissement d’un rendez-vous 2

U 2 7n 2 Quand es-tu disponible aujourd’hui ?
M 2 7r2 2 I e suis disponible aujourd’hui des 16h!

Ainsi, en employant une formalisation rhetorique a la SDRT (Asher & Lascarides, 2003), on
suppose que les generateurs doivent representer la structuration rhetorique du dialogue indique
ci-dessus.

Pour ce texte, la representation rhetorique RhetRep que le r1iveau rhetorique de RAGS construit
dans son langage inteme est montree dans la ﬁgure 2, a cote de la representation issue de r1otre
architecture, dans le cadre de la SDRT. Les conventions de representation pour le RAGS sont les
suivantes (Mellish et al., 2006) 2 (i) les noeuds sont des objets qui representent des structures
et des sous-structures (types primitifs); a chaque objet on associe un type RAGS (de ceux
deﬁnis dans le modele) ; de ces types, seulement les types primitifs speciﬁent des informations
se reportant a la theorie choisie pour concrétiser 1’ architecture abstraite de RAGS, et (ii) les
fléches entre les obj ets representent les relations entre ces demiers ; pour chaque ﬂeche il existe
une et seulement une source et une cible; en meme temps, chaque ﬂeche est designee par une
etiquette unique. De plus, les ﬂeches sont typees, dans le sens que pour chaque etiquette il y a
un unique type pour la source et un type toujours unique pour la cible; ces types sont precises
lors de la deﬁnition de chaque ﬂeche, donc, immuables. En revanche, pour la representation de
notre architecture, la notation « > » separe deux elements en structure arborescente, tandis que
« 2 2 » separe un element (a gauche) d’un attribut des siens propres.

On peut voir le texte ci-dessus relie par la relation discursive SDRT QAP (« Question - Answer
Pair »), dont la representation RAGS est illustree dans la ﬁgure 2.

La representation XML correspondant a la representation de la ﬁgure 2, pour cet exemple, est
donnee dans la ﬁgure 3.

La ﬁgure 4 montre un ensemble de regles permettant le passage de la representation rhetorique
de RAGS a la representation utilisee en sortie du module pragmatique de r1otre architecture ; on
utilise les memes notations concemant « > » et « 2 2 ».

412

Architecture modulaire portable pour la generation du LN en dialogue homme-machine

  
  

LE MODELE RAGS N(Yl' RE ARCHITECTURE
I0 : RhetRep pi0 : SDRS >
1 — el 2 — el pi1 : STATE > UTTERANCE :: speaker, strategy, speech—act,
closed i]loc—force
r1 : Rhetkel _ QAP I2 : Rhetkepseq FORMULA > %Logic—fom1ula
1 — e 2 — el pi2 : STATE > UTTERANCE :: speaker, strategy, speech—act,
i]loc—force
r3 : RhetLeaf r4 : RhetLeaf FORMULA > %Logic—fom1ula
rs : semkep <5 6 r6 : semkep rhol ; RRELATION :: type="QAP",1eft="pi1",r1gh1="pi2"

FIG. 2 — Exemple de representation rhetorique dans RAGS et dans notre architecture pour une
instance de dialogue simple

Cet ensemble de regles montre que pour 23 des 34 regles il existe une correspondance entre
les elements et attributs dans la representation RAGS et dans notre architecture, donc il y a
une superposition de 2/3 entre les representations dans les deux architectures au sens ou la
representation dans notre architecture couvre 2/3 de la representation equivalente en RAGS. Le
reste comprend surtout des informations d’identiﬁcation inteme des structures de donnees, ce
qui n’est pas necessaire dans notre architecture, car elle est concue pour le dialogue homme-
machine ou le systeme doit generer un tour de parole a un instant donne et non pas elaborer des
discours monologiques etendus, ou un plus fort reperage des structures linguistiques partielles
est necessaire dans le temps.

Procedant a l’envers et construisant un ensemble de regles permettant de « traduire » la spe-
ciﬁcation XML des informations rhetoriques echangees entre les modules de generation prag-
matique et linguistique en representation selon le modele RAGS on obtient une couverture de
5/6 selon un ensemble de regles semblables a ceux juste presentees ci-dessus. Le reste de 1/6
releve du manque de « transport » vers la representation RAGS des marqueurs speciﬁques au
dialogue (l’identite des locuteurs et les marqueurs pragmatiques dialogiques - strategie, acte de
langage et force illocutoire). Ces informations peuvent cependant etre recuperees au niveau des
identiﬁants en RAGS, qu’une structure parallele realisant les correspondances appropriees peut
accompagner, en tant que connaissances statiques sous forme de tableau de correspondances.

4 Conclusion

Dans cet article nous avons presente une vue d’ensemble d’architecture générique (dans le
sens que les modules de traitement sont independants des interfaces entre eux), modulaire
(dans le sens que les traitements dans un module sont independants des traitements dans les
autres modules) et portable (dans le sens que meme au niveau des interfaces les modules sont
independants pourvu qu’on plonge les representations des connaissances a chaque niveau de
traitement dans une architecture standard en generation du langage naturel, telle que le modele
RAGS).

Plus precisement, un exemple etendu ou la representation de l’interface entre les modules prag-
matique et linguistique dans notre architecture, comportant des informations rhetoriques echan-

413

LE A/IODELE RAGS
<RAGS>
<RhelRep idenl:"id1" type:"lup|e"
|englh:"2">
<RhetRe| name="QAP"l>
<RhetRepSeq ident="i2" type="sequence">
<RhelLeaf ident="|D3"/>
<RhelLeaf ident:"|D4"/>
</RhelRepSeq>
</RhetRep>
<arrow name:"refers_to" source:"|D3"
target:"|D5"f>
carrow name:"refers_to" source:"|D4"
target: D6"/5
<SernRep ident:"|D5" type:"lup|e"
|englh:"3">
<DR name="r5"/>
<SemType type="set">
<SemPred name:"avai|ab|e"/>
</SemType>
<SemAtlr type:"funcliona|">
<SemRo|eRep>
<SemRo|e name:"actor"f>
<SemConstant idem:"C1"
name:"patient"/5
</SemRo|eRep>
<SemRo|eRep>
<SemRo|e name="aclee">
<SemRep ident="s2" type="lup|e"
|ength="3">
<DR name:"r7"/>
<SemType type:"s t">
<SemPred name:"tu"l>
</SemType>
<SemArtr type:"functiona|">
<SemRo|eRep>
<SemRo|e name:"person"/>
<xref idref:"C1"/>
</SemRo|eRep>
</SemAtlr>
</SemRo|e>
</SemRep>
</SemRo|eRep>
<lSemAltr>
</SemRep>
<SemRep ident:"|D6" type:"tup|e"
|ength:"3">
<DR name:"r6"/x
<SemTvpe tvpe:"set">
<SemPred name:"16:00"l>
</SemType>
<SemAtlr type="funv:lionaI">
<SemRo|eRep>
<SemRo|e name:"5ubject"/>
<xref idref:"S2"/>
<lSemRo|eRep>
<lSemAnr>
</SemRep>
</RAGS>

  
 

Vladimir POPESCU

NOTREARCHITECTURE
<SDRS |abe|:"pi0" nstates—"2" nre|s:"1">
<STATE label: pil" type TT">
<UTTERANCE speaker:"A" slrategy:"K2"
speech—act="FFS" i||ov:—fon:e="36"/>

 

<FORMULA>
<quanl name="exisls" variab|e="X">
<type>person</type>
<quant name:"exi5t5" variab|e:"Y">
<type>lime<ltype>
<conn name "and">
<pred name:"equa|s">
<term name:"X"/> <term name:"A"/>
4/'precI>
<pred name:"equa|s">
<lerm name:"Y"/> <lerm name:"?",’>
</pred>
<pred name="avai|ab|e">
<lerm name:"X"> <term name:"Y">
</pred>
</Conn>
</quant>
</qL1ant>
A/FORMULA>
4/STATE>
<STATE |abe|:"pi2" type:"UTT">
<UTTERANCE speaker:"B" slrategy:"K2"
speech—act="FS" i||oc—fon:e="54"]>
<FORMULA>
<quanl name="exisls" variab|e="X">
<type>person</type>
<quant name:"exist5" variab|e:"Y">
<tvpe>lime<ltype>
<quant name:"exists" variab|e:"Z">
<type>oﬂset</type>
<quam name:"exists" variab|e:"T">
<type>direction</type>
<conn name:"and">
<pred nam equa|s">
<lern| name="X",/> <term name="A"/>
</pred>
<pred name:"equal5">
<lerm name: Y"/> <term name:"16:00+Z"/>
<lpred>
<pred name:"equa|s">
<term name:"Z"/> <term name:"0"/>
4'pred>
<pred name:"equa|s">
<|erm name— T"/> <term name:"t+"/>
</pred>
</::onn>
</quant>
</quanl>
<fquant>
</quant>
<IFORMULA>
</STATE>
<RRELAT|0N |abe|:"rho1"type:"QAP" |eft:"pil" right:"pi2"/x
4/SDRS>

   

FIG. 3 — Représentations XML des informations rhétoriques, dans le modéle RAGS et dans
notre architecture

414

Architecture modulaire portable pour la generation du LN en dialogue homme-machine

    

1. RAGS —» 0

2. RAGS > RhetRep —» SDRS

3. RAGS > RhetRep : : ident —» SDRS : : label

4. RAGS > RhetRep type —» ll

5. RAGS > RhetRep : : length —» SDRS : : nstates

6. RAGS > RhetRep > RhetRe| —» SDRS > RRELATION

7. RAGS > RhetRep > RhetRe| : : name —» SDRS > RRELATION : :type

8. RAGS > RhetRep > RhetRepSeq —» SDRS > RRELATION

9. RAGS > RhetRep > RhetRepSeq : : ident —» SDRS > RRELATION : : label

10. RAGS > RhetRep > RhetRepSeq : : type —» ll

11. RAGS > RhetRep > RhetRepSeq > RhetLeaf —» SDRS > STATE

12. RAGS > RhetRep > RhetRepSeq > RhetLeaf : : ident —» SDRS > STATE : : label |

SDRS > RRELATION : : |eft|
SDRS > RRELATION : : right

13. RAGS > arrow —» 0)

14. RAGS > arrow : : name —» ll

15. RAGS > arrow : : source —» ll

16. RAGS > arrow : : destination —» 0)

17. RAGS > SemRep —» SDRS > STATE | SDRS > STATE > FORMULA
18. RAGS > SemRep: : ident —» SDRS > STATE : : label

19. RAGS > SemRep: : type —» SDRS > STATE : : type

20. RAGS > SemRep : : length —» ll

21. RAGS > SemRep > DR —» SDRS > STATE

22. RAGS > SemRep > DR : : name —» SDRS > STATE : : label

23. RAGS > SemRep > SemType —» SDRS > STATE | SDRS > STATE > FORMULA
24. RAGS > SemRep > SemType : : type —» SDRS > STATE : : type

25. RAGS > SemRep > SemType > SemPred —» SDRS > STATE > FORMULA > quant > com

> red
26. RAGS > SemRep > SemType > SemPred : : name —» SBRS > STATE > FORMULA > quant > com
> pred : : name
27. RAGS > SemRep > SemAttr —» 0)
28. RAGS > SemRep > SemAttr : : type —»

ll

29. RAGS > SemRep > SemAttr > SemRoleRep —» SDRS > STATE > FORMULA |
SDRS > STATE > FORMULA > quant |
SDRS > STATE > FORMULA > quant > com

30. RAGS > SemRep > SemAttr > SemRo|eRep > SemRole —» SDRS > STATE > FORMULA > quant > com

> pred > term | SDRS > STATE > FORMULA

> quant
31. RAGS > SemRep > SemAttr > SemRo|eRep > SemRo|e : : name —» SDRS > STATE > FORMULA > quant > type
32. RAGS > SemRep > SemAttr > SemRo|eRep > Constant —» ll
33. RAGS > SemRep > SemAttr > SemRo|eRep > Constant : : ident —» SDRS > STATE > FORMULA > quant > variable
34. RAGS > SemRep > SemAttr > SemRo|eRep > Constant : : name —» SDRS > STATE > FORMULA > quant > type

FIG. 4 — Regles de transformation du format XML RAGS vers celui de notre architecture

gees, a ete plongee dans la representation rhetorique, situee au niveau conceptuel de traitement,
dans le modele RAGS. Lors de cet exercice, rendu possible via un ensemble de regles transfor-
rnationnelles, on a constate que la « traduction » dans les deux formats de representation 11’ est
pas totale, mais conserve les elements per1'.inents par rapport a la nature de l’echange, dans les
deux sens, de notre architecture vers RAGS et a l’inverse. Ce resultat nous amene a demontrer
la portabilite annoncee 2 les modules dans notre architecture peuvent etre combines ou « en-
trelaces » avec des modules concus suivant les speciﬁcations du modele RAGS; par exemple,
on pourrait construire un systeme de generation du langage naturel ayant les niveaux logique et
pragrnatique de notre architecture, ayant aussi un niveau linguistique eclate en niveaux seman-
tique, switaxique et citationnel d’un module de generation suivant les speciﬁcations du modele
RAGS.

On a donc presente une architecture qui etend un modele de generation automatique des textes
(RAGS) au dialogue oral homme-machine, en gardant, dans une mesure importante, la compa-
tibilite entre les deux.

Nous envisageons de concevoir des algorithmes pour l’obtention automatique des regles de
traduction entre notre architecture et le modele RAGS; ceci peut se realiser en principe par
l’appariement d’ arbres XML pour les representations dans les deux architectures; la suite des

415

Vladimir POPESCU

transformations d’un arbre vers l’autre constitue l’ensemble des regles. Evidemment, les de-
marches décrites dans cet article concemant l’interface entre les niveaux pragmatique et lin-
guistique dans notre architecture et, respectivement, l’interface entre les niveaux rhétorique et
sémantique dans le modele RAGS doivent étre étendues aux autres interfaces entre les modules
des deux architectures.

Remerciement

L’ auteur remercie vivement Jean Caelen, du Laboratoire d’Informatique de Grenoble, pour ses
conseils attentifs et pour son apport aux travaux présentés dans cet article.

Références

ASHER N. & LASCARIDES A. (2003). Logics of Conversation. Cambridge University Press.
DANLOS L., GAIFFE B. & ROUSSARIE L. (2001). Document structuring a la sdrt. In ACL,
Ed., Proceedings of the 8th European Workshop on Natural Language Generation EWNLG
2001.

IMBERDIS L. & CAELEN J. (1997). Generation d’actes illocutoires pour le dialogue. In Actes
du Colloque Generation automatique du texte GAT’97, Grenoble.

MAUDET N., MULLER P. & PREVOT L. (2004). Tableaux conversationnels en sdrt. In
Workshop SDRT, TALN 2004.

MCTEAR M. F. (2002). Spoken language technology 2 Enabling the conversational user in-
terface. In ACM Computer Surveys 34 ( I ) : ACM.

MELLISH C., SCOTT D., CAHILL L., PAIVA D., EVANS R. & REAPE M. (2006). A refe-
rence architecture for natural language generation systems. In Journal of Natural Language
Engineering 12 ( I ), p. 1-34 : Cambridge University Press.

POPESCU V., CAELEN J. & BURILEANU C. (2007). Generic architecture for natural language
generation in spoken hurnan-computer dialogue. In C. BURILEANU, Ed., The 4th Conference
on Speech Technology and Human- Computer Dialogue SpeD 2007 2 Romanian Academy Pu-
blishing House.

REITER E. & DALE R. (2000). Building Natural Language Generation Systems. Cambridge
University Press.

STENT A. (2001). Dialogue Systems as Conversational Partners .' Applying ConversationActs
Theory to Natural Language Generation for Task-Oriented M ixed-Initiative Spoken Dialogue.
Ph D Thesis, University of Rochester.

STONE M. (1998). Modality in Dialogue .' Planning, Pragmatics and Computation. Ph D
Thesis, University of Pennsylvarmia.

THEUNE M. (2000). From Data to Speech : Language Generation in Context. Ph D Thesis,
University of Eindhoven.

416

