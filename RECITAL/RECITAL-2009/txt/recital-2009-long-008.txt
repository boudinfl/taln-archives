RECITAL 2009, Senlis, 24‚Äì26 juin 2009
Mod√©lisation des mouvements explicites dans les ACG avec le
produit d√©pendant
Florent Pompigne1
(1) ENS Cachan / INRIA Nancy - Grand-Est
florent.pompigne@loria.fr
Abstract. Abstract Categorial Grammars (ACG) is a grammatical framework based on li-
near lambda-calculus. As in Muskens‚Äô Lambda Grammars, an abstract term in this kind of cate-
gorial grammar can be realized in different directions, such as syntactic and semantic ones. This
structure provides autonomy for these different processings. ACG‚Äôs architecture is independent
from the logic used and so the type system is easily extensible in order to deal better with some
linguistic phenomena. We will first introduce ACGs and the dependent product construction
.This paper will then be concerned with the issue of overt grammatical movements, in particu-
lar extraction constraints in relative propositions, and how several close frameworks deal with
it. Last we will show how to capture this phenomenon in extended ACG.
Mots-cl√©s : syntaxe, grammaires cat√©gorielles abstraites, types d√©pendant, mouvements
explicites, extraction.
Keywords: Syntax, abstract categorial grammars, dependant product, overt movements,
extraction.
Florent Pompigne
1 Introduction
La description de la syntaxe d‚Äôune langue naturelle et de la relation entre ce niveau syntaxique et
le niveau s√©mantique est traditionnellement op√©r√©e en Traitement Automatique des Langues par
un formalisme grammatical. Les Grammaires Cat√©gorielles Abstraites (ACG), propos√©es par de
Groote (de Groote, 2001), se distinguent dans le paysage des formalismes existants par des
propri√©t√©s h√©rit√©es des grammaires cat√©gorielles (sensibilit√© aux ressources) et des propri√©t√©s
propres √† leur architecture : elles s‚Äôappuient sur un langage abstrait, dont les termes corres-
pondent √† des structures de d√©rivation, et un langage objet dont les termes correspondent aux
structures d√©riv√©es.
Les mouvements grammaticaux explicites d√©signent les d√©placements qui ont lieu dans des
constructions comme les formes interrogatives ou les propositions relatives par rapport aux
phrases correspondantes. L‚Äôextraction d‚Äôun composant de la phrase par ces constructions peut
s‚Äôeffectuer √† distance arbitraire, et selon des contraintes pr√©cises de la langue qui sont bien √©tu-
di√©es et transcrites dans de nombreux formalismes grammaticaux. Le propos de cet article est
de pr√©senter une mod√©lisation de ce ph√©nom√®ne pour les ACG.
Dans la partie suivante on introduira le formalisme des ACG ainsi que l‚Äôextension du syst√®me
de type avec le produit d√©pendant. Dans la partie 3 sera pr√©sent√© le probl√®me des mouvements
explicites, √† travers les contraintes √† l‚Äôextraction dans les constructions relative en fran√ßais, et
les r√©ponses apport√©es dans plusieurs formalismes voisins, et la partie 4 d√©taillera la solution
propos√©e pour les ACG.
2 Grammaires Cat√©gorielles Abstraites
Avec une approche similaire aux Lambda Grammars (Muskens, 2007) ou aux Convergent
Grammars (Pollard, 2007) , (Pollard, 2008), chaque ACG introduit une fonction d‚Äôun espace
de termes dits abstraits vers un espace de termes objets. Ces termes objets peuvent repr√©senter
diff√©rentes structures de donn√©es utilis√©es en traitement automatique des langues, comme des
arbres ou des cha√Ænes de caract√®re, et on choisit donc de les construire sur le Œª-calcul lin√©aire.
2.1 Architecture du formalisme
Intuitivement, une ACG consiste en deux signatures, appel√©es vocabulaire abstrait et vocabu-
laire objet, qui d√©clarent des types et des constantes typ√©es dans le fragment implicatif de la
logique lin√©aire, et d‚Äôun homomorphisme, appel√© lexique, de la premi√®re vers la seconde. Une
Grammaire Cat√©gorielle Abstraite g√©n√®re deux langages, un langage abstrait et un langage ob-
jet. Le langage abstrait est d√©fini comme l‚Äôensemble des Œª-termes lin√©aires (chaque abstraction
lie une unique variable) clos construits sur le vocabulaire abstrait qui sont du type sp√©cifique S.
Le langage objet est alors l‚Äôimage du langage abstrait par le lexique.
Cette architecture permet √† l‚Äôaide de deux ACG partageant un m√™me langage abstrait (corres-
pondant au niveau tectogrammatique) de r√©aliser ces termes abstraits vers un langage d√©crivant
Mod√©lisation des mouvements explicites dans les ACG avec le produit d√©pendant
leur s√©mantique et un langage d√©crivant leur forme de surface (correspondant au niveau ph√©-
nogrammatique). Nous ne nous int√©ressons uniquement dans ce papier √† la description de la
syntaxe et donc √† la relation entre tectogrammatique et ph√©nogramatique. Donnons un exemple
d‚Äôune telle ACG :
N, NP, S : type (vocabulaire abstrait)
hommec, villagec, amic : N
joyeuxc : N( N
unc, lec : N( NP
dormirc : NP( S
aimerc, rencontrerc : NP( NP( S
Jeanc, Mariec, Paulc : NP
dec : NP( N( N
string : type (vocabulaire objet)
homme, joyeux, un, ... : string
N, NP, S ‚àí‚Üí string (lexique)
hommec ‚àí‚Üí homme
joyeuxc ‚àí‚Üí Œªx.x+ joyeux
unc ‚àí‚Üí Œªx.un+ x
dormirc ‚àí‚Üí Œªx.x+ dort
aimerc ‚àí‚Üí Œªx, y.y + aime+ x
Jeanc ‚àí‚Üí Jean
dec ‚àí‚Üí Œªx, y.y + de+ x
(on note par "+" l‚Äôop√©ration de concat√©nation des cha√Ænes de caract√®re)
On peut v√©rifier que le terme suivant appartient au langage abstrait
{ NP
rencontrerc } }}{{ {(unc (dec Mariec amic})) Jean} {{ N }c
S
Son image par le lexique fait donc partie du langage objet
rencontrerc (unc (dec Mariec amic)) Jeanc
‚àí‚Üí (Œªx, y.y + rencontre+ x) ((Œªx.un+ x) ((Œªx, y.y + de+ x) Marie ami)) Jean
‚àí‚Üí Jean rencontre un ami de Marie (Œ≤-r√©duction)
A l‚Äôinverse, la possibilit√© de partir d‚Äôun terme de surface et de d√©cider s‚Äôil appartient au langage
d‚Äôune ACG est un probl√®me ouvert √©quivalent √† la d√©cidabilit√© du fragment exponentiel multi-
plicatif de la logique lin√©aire (Salvati, 2005). Cependant, si on se restreint √† la classe des ACG du
Florent Pompigne
second ordre, dans lesquelles les termes du langage abstrait sont de la forme q1( ...( qk ( p
o√π les qi sont des types atomiques , ce probl√®me de l‚Äôappartenance est d√©cidable en temps po-
lynomial.
2.2 Extension par les produits d√©pendants
L‚Äôarchitecture des ACG ne d√©pend pas de la logique sur laquelle elles reposent. Contrairement
aux autres constructions propos√©es par Philippe de Groote et Sarah Maarek (de Groote & Maa-
rek, 2007)(implication non lin√©aire, produit cart√©sien, union disjointe et type unit) pour √©tendre
le syst√®me de type, le produit d√©pendant ne correspond pas √† une primitive de la logique li-
n√©aire. Il vient de la th√©orie intuitionniste des types de Martin-L√∂f (Martin-L√∂f, 1973) et a √©t√©
utilis√© dans le contexte de la logique lin√©aire par Cervesato et Pfenning (Cervesato & Pfenning,
2002). Le produit d√©pendant permet d‚Äôintroduire des types qui d√©pendent de termes. Le forma-
lisme ainsi √©tendu est Turing-complet, et le probl√®me de l‚Äôappartenance est donc ind√©cidable
(de Groote et al., 2007). Il reste √† √©tudier quels fragments utilisant le pouvoir d‚Äôexpression ainsi
gagn√© restent d√©cidables. Cet exemple montre comment utiliser les types d√©pendants pour ins-
tancier un groupe nominal par son genre.
gender = {m, f} : type (vocabulaire abstrait)
NP,N : (gender) type
S : type
villagec : Nm
villec : N f
unc : (Œ†x : gender) N x( NP x
joyeuxc : (Œ†x : gender) N x( N x
dormirc : (Œ†x : gender) NP x( S
gender = {m, f} : type (vocabulaire objet)
string : type
ville joyeux, joyeuse, un, une, ... : string
gender ‚àí‚Üí gender
N, NP ‚àí‚Üí Œªx.string (lexique)
S ‚àí‚Üí string
villec ‚àí‚Üí ville
villagec ‚àí‚Üí village
unc ‚àí‚Üí Œªg. Œªx. {m‚Üí un, f ‚Üí une} g + x
joyeuxc ‚àí‚Üí Œªg. Œªx. x+ {m‚Üí joyeux, f ‚Üí joyeuse} g
dormirc ‚àí‚Üí Œªg. Œªx. x+ dort
On peut v√©rifier que le terme suivant appartient au langage abstrait.
Mod√©lisation des mouvements explicites dans les ACG avec le produit d√©pendant
{ N}P}f {
dormirc f (unc f (
{}
joyeux
{ {
c{f villec}))} N f }
S
On en d√©duit que son image par le lexique appartient au langage objet
dormirc f (unc f (joyeuxc f villec))
‚àí‚Üí une ville joyeuse dort
3 Mouvements grammaticaux explicites
Les mouvements grammaticaux explicites sont ceux visibles au niveau de surface du langage :
ce sont les extractions de constituants syntaxiques par des constructions comme les interroga-
tives en qu, les relatives, ou les semi-cliv√©es en fran√ßais. On s‚Äôinteressera ici √† la mod√©lisa-
tion des contraintes d‚Äôextraction par les constructions relatives dans la langues fran√ßaise, ces
contraintes √©tant tr√®s proches pour les autres mouvements explicites (Abeill√©, 2002).
3.1 Propositions relatives en fran√ßais dans les ACG
Dans les ACG le pronom relatif sujet qui serait repr√©sent√© au niveau abstrait par le terme
quic : (NP( S)( N( N
Le premier argument correspond √† la suite de la proposition relative : c‚Äôest une phrase √† laquelle
il manque un sujet. Le second argument correspond au nom compl√©t√© par cette proposition.
L‚Äôimage de cette constante par le lexique serait alors : ŒªS. Œªn. n + qui + (S ). On peut par
exemple v√©rifier que la phrase suivante appartient au langage objet de surface :
dormirc (lec (quic (Œªx.aimerc Mariec x) hommec))
‚àí‚Üí l‚Ä≤homme qui aime Marie dort
Il faut noter que le syst√®me de type, contrairement √† la tradition des grammaires cat√©gorielles,
n‚Äôop√®re aucun contr√¥le sur l‚Äôordre des mots dans les ACG. Cet ordre des mots est g√©r√© par le
lexique. On n‚Äôa donc pas ici de probl√®me √† g√©n√©rer des extractions non-p√©riph√©riques (l‚Äôhomme
que Marie aime passionnement dort) ou √† distance arbitraire (l‚Äôhomme que Jean dit que Pierre
croit que Marie aime dort). D‚Äôun autre c√¥t√©, sans contr√¥le sur la construction de nos termes
abstraits, on rencontre plusieurs ph√©nom√®nes de surg√©n√©ration. Le premier est li√© √† l‚Äôabsence
de contraintes sur le r√¥le du constituant grammatical extrait. Rien n‚Äôemp√™che en effet de recon-
na√Ætre l‚Äôhomme qui Marie aime dort de mani√®re similaire √† l‚Äôexemple initial. L‚Äôautre contrainte
Florent Pompigne
qui doit √™tre prise en compte est l‚Äôexistence d‚Äô√Ælots d‚Äôextraction √† l‚Äôint√©rieur desquels l‚Äôextrac-
tion est impossible depuis l‚Äôext√©rieur. Les propositions relatives elle-m√™mes sont un exemple
d‚Äô√Ælot d‚Äôextraction, et en effet L‚Äôhomme que ma soeur qui aime dort ne devrait pas √™tre reconnu
comme une phrase de la langue fran√ßaise. Pourtant le terme
le (que (Œªx.dormir (ma (qui (Œªy.aime x y) soeur))) homme)
fait bien partie de notre langage abstrait. Les propositions compl√©tives ne sont, elles, des √Ælots
que pour l‚Äôextraction de sujet : l‚Äôhomme qui Marie crois que vient est grammaticalement incor-
rect.
3.2 Le probl√®me dans quelques autres formalismes
Les ph√©nom√®nes d‚Äôextraction ont √©t√© consid√©r√©s sous de nombreux angles diff√©rents. Exami-
nons rapidement les solutions adopt√©es dans quelques formalismes voisins aux ACG.
Les Tree Adjoining Grammars permettent de bien rendre compte du ph√©nom√®ne (Abeill√©, 2002).
Le sch√©ma de formation des arbres √©l√©mentaires √† compl√©ment relativis√© modifie les arbres √† ra-
cine phrastique pour placer le compl√©ment en t√™te de phrase avec un trait <qu>. Ce compl√©ment
pouvait se trouver √† profondeur arbitraire dans l‚Äôarbre initial puisqu‚Äôil apparait sur le sch√©ma
sous un lien de dominance sous-sp√©cifi√©. Dans le cas d‚Äôune proposition relative, l‚Äôarbre obtenu
est domin√© par un noeud de cat√©gorie N qui domine un autre noeud de cat√©gorie N d√©crivant
l‚Äôant√©c√©dent. Dans tous les cas un noeud interm√©diaire phrastique est ajout√© : il permet avec
l‚Äôop√©rateur d‚Äôadjonction d‚Äôajouter un nombre arbitraire de constructions comme Marie croit
que. L‚Äôextraction du sujet est trait√©e de mani√®re similaire mais distincte.
Dans les grammaires d‚Äôinteraction, chaque pronom relatif est d√©crit par un arbre dans lequel
le compl√©ment extrait apparait mais est morphologiquement vide. Cette trace du compl√©ment
pourra donc √™tre unifi√©e avec les autres arbres o√π le compl√©ment est d√©crit, mais elle n‚Äôapparaitra
pas en surface. Afin de permettre une d√©pendance √† distance arbitraire entre le pronom relatif et
le compl√©ment extrait, la trace est surmont√©e d‚Äôune relation de d√©pendance sous-sp√©cifi√©e. Ce-
pendant, pour bloquer la travers√©e d‚Äô√Ælots d‚Äôextraction, cette relation est contr√¥l√©e : elle ne peut
franchir que des noeuds √©tiquet√©s S et de fonction objet ou nulle (contraintes satisfaites par que
Marie aime par exemple). L‚Äôarbre d√©crivant le pronom relatif sujet se distingue par l‚Äôabsence de
trace : le pronom assure la fonction de sujet. (Perrier, 2007).
Les grammaires cat√©gorielles s‚Äôappuient traditionnellement sur le calcul de Lambek. Le connec-
teur implicatif est double : le / prend son argument directement √† sa droite et le \ directement √†
sa gauche. L‚Äôordre des mots est donc g√©r√© dans le syst√®me de type. Ce syst√®me est trop rigide
pour les constructions relatives puisqu‚Äôil emp√™che les extractions non-p√©riph√©riques : l‚Äôargu-
ment d‚Äôun pronom relatif est une phrase √† laquelle il manque un constituant √† sa droite ou √†
sa gauche seulement. Une possibilit√© est d‚Äôajouter un constructeur ‚Üë et sa r√®gle d‚Äôintroduction,
A‚ÜëB √©tant le type d‚Äôun terme qui compl√©t√© quelque part d‚Äôun terme de type B serait de type A.
On peut alors donner au pronom qui le type N\N/(S‚ÜëNP). On retrouve √† ce moment la m√™me
Mod√©lisation des mouvements explicites dans les ACG avec le produit d√©pendant
surg√©n√©ration que dans les ACG. La mod√©lisation des √Ælots d‚Äôextraction peut se faire √† l‚Äôaide de
constructeurs modaux rattach√©s √† l‚Äôextracteur et √† la trace qui doivent se combiner tandis que
les √Ælots d‚Äôextraction jouent le r√¥le de portes verrouill√©es √† ces constructeurs (Moortgat, 1996) ,
(Carpenter, 1997). C‚Äôest √©galement l‚Äôapproche pr√©sente dans les Lambda Grammars (Muskens,
2007). On verra que c‚Äôest de cette technique qu‚Äôon s‚Äôapprochera le plus.
Dans les Convergent Grammars, les pronoms relatifs (et les autres constituants op√©rant des
mouvements explicites) sont affect√©s d‚Äôune cat√©gorie sp√©ciale G[A,B,C] indiquant que ce terme
se combine avec un terme de cat√©gorie A contenant une variable libre de type B et renvoie un
terme de type C tout en liant cette trace. Cette cat√©gorie sp√©ciale permet de ne construire aucun
terme par lambda-abstraction. Il suffit donc de v√©rifier que des variables libres ne sortent pas
des √Ælots d‚Äôextraction.
4 Mod√©lisation des contraintes d‚Äôextraction dans les ACG
√©tendues
Le syst√®me de type √©tendu va nous permettre de contr√¥ler la construction des termes du langage
abstrait dans le respect des contraintes de la langue. Le premier terme dont doivent d√©pendre
les types de nos constantes est un marqueur de cas, qui v√©rifiera le r√¥le des constituants extraits
(comme on ne s‚Äôint√©resse ici qu‚Äô√† la signature abstraite on omettra d‚Äôindicer chaque nom de
constantes par c).
cas = {nom, acc, gen, comp} : type
NP, N : (cas) type
S : type
Jean, Marie, Paul, Laurent : (Œ†c : cas) NP c
chien, maison, homme : (Œ†c : cas) N c
un, le : (Œ†c : cas) N c( NP c
aimer, rencontrer : NP acc( NP nom( S
dormir : NP nom( S
qui : (Œ†c : cas) (NP nom( S)( NP c( NP c
La phrase suivante n‚Äôappartient plus au langage : aimer contraint la variable x √† prendre comme
argument le cas acc, et qui le cas nom. Le terme ne peut donc pas √™tre typ√©.
dormirc (lec nom (quic (Œªx.aimerc x acc Mariec nom) hommec nom))
‚àí‚Üí l‚Ä≤homme qui Marie aime dort
On introduit un autre marqueur, de type ext pour extraction. L‚Äôid√©e est que les pronoms relatifs
forcent les propositions relatives √† √©tiqueter la variable trace de l‚Äôextraction par ce marqueur √†
0. Ce marqueur est propag√© aux niveaux syntaxiques sup√©rieurs mais ne peut pas franchir les
√Ælots d‚Äôextraction. Il reste alors au pronom relatif de contr√¥ler que la proposition relative est bien
√©tiquet√©e par 0. Une troisi√®me valeur du marqueur permet d‚Äôindiquer qu‚Äôun √Ælot √† l‚Äôextraction
Florent Pompigne
de sujet a √©t√© franchit. Cette valeur interm√©diaire sera donc √©galement accept√©e par tous les
pronoms sauf le qui extracteur de sujet.
ext = {0, 1, 2} : type
NP : (ext) (cas) type
N : (ext) (cas) type
S : (ext) type
S* : (ext) type
chien,maison, homme : (Œ†c : cas) N 2 c
un, le,mon :(Œ†c : cas) N 2 c( NP 2 c
marcher, dormir :(Œ†y : ext) NP y nom( S y
aimer, rencontrer :(Œ†y1, y2 : ext) NP y1 acc( NP y2 nom( S min (y1 y2)
qui :(Œ†c : cas) (NP 0 nom( S 0)( N 2 c( N 2 c
que :(Œ†y : ext, c : cas) (NP 0 acc( S y ‚àí 1)( N 2 c( N 2 c
que‚Ä≤ :(Œ†y : ext) S y( S ‚àó max(y, 1)
(je crois *que* l‚Äôid√©e est bonne)
croire, dire :(Œ†y1, y2 : ext)S ‚àó y1( NP y2 nom( Smin (y1 y2)
On peut v√©rifier que ce terme n‚Äôest plus typ√© par la grammaire : (on omet d‚Äô√©crire les termes du
produit d√©pendant pour une meilleure lecture)
L‚Äôhomme que ma soeur qui aime dort
le (que (Œªx.dormir (ma (qui (Œªy.aime x y) soeur))) homme)
En effet les deux variables qui jouent le r√¥le de traces x et y doivent porter le marqueur 0 (exi-
gence du type des pronoms relatifs). Ce marqueur va √™tre consomm√© par le qui, et le marqueur
d‚Äôextraction qui arrivera au que ne pourrait √™tre que 2, ce qui rend le terme intypable. A l‚Äôinverse
le terme suivante reste toujours typable :
L‚Äôhomme que{ma soeur qui dort aime S}}0 { { {S}}0
le (que (Œªx. aime }{x{} (ma (qui (Œªy. dort }{y{} ) soeur))) homme))
NP 0 acc
} } {{ {N{P 0 nom }N 2 nom }
N 2 c
Enfin, on v√©rifie que ce groupe nominal n‚Äôest plus typable :
Pierre qui je crois que vient
qui2(Œªx.croire }(que‚Ä≤(v{e{nir x)}))je)Pierre} {{S ‚àó 1 }
NP 0 nom(S 1
Le marqueur 0 de la variable trace devient 1 en passant par le je crois que. Le terme r√©sultant
n‚Äôa donc pas le bon type pour √™tre argument de qui.
Mod√©lisation des mouvements explicites dans les ACG avec le produit d√©pendant
Pierre que je crois que Marie aime
a la m√™me forme de d√©rivation de type, √† la diff√©rence de que qui, lui, accepte ce type pour son
argument.
Ce contr√¥le s‚Äô√©tend ais√©ment aux autres pronoms relatifs et aux autres √Ælots d‚Äôextraction, comme
les si ou les propositions infinitives. Les √Ælots lexicalis√©s, comme le verbe hurler ne posent pas
plus de probl√®mes. De plus les autres ph√©nom√®nes de mouvements explicites (interrogatives
en qu, semi-cliv√©es) peuvent utiliser le m√™me marqueur et la m√™me structure de contr√¥le. No-
tons enfin que l‚Äôon pourrait avoir d√©multipli√© les entr√©es lexicales plut√¥t qu‚Äôutiliser les types
d√©pendants, on est donc rest√© dans un fragment r√©versible des ACG.
5 Conclusion
Un atout des ACG est de proposer directement un contr√¥le sur les structures de d√©rivations, qui
constituent notre langage abstrait. Il est ainsi possible de mod√©liser des ph√©nom√®nes linguis-
tiques sans quitter le formalisme ni le lambda-calcul typ√©. Cette technique de mod√©lisation des
contraintes √† l‚Äôextraction propose une illustration pratique des possibilit√©s offertes par l‚Äôexten-
sion du syst√®me de type des ACG.
D‚Äôautres ph√©nom√®nes de d√©placement peuvent √™tre mod√©lis√©s selon le m√™me sch√©ma. En par-
ticulier, les mouvements grammaticaux implicites, qui sont visibles au niveau de la r√©alisation
s√©mantique, pr√©sentent des caract√©ristiques proches des mouvements pr√©sent√©s dans cet article,
sur la nature des extractions (op√©r√©es dans ce cas par les prises de port√©e des quantificateurs)
comme sur celle des √Ælots d‚Äôextraction (Ruys & Winter, 2008).
R√©f√©rences
ABEILL√â A. (2002). Une grammaire √©lectronique du fran√ßais. CNRS Editions.
CARPENTER B. (1997). Type-Logical Semantics. The MIT Press.
CERVESATO I. & PFENNING F. (2002). A linear logical framework. Information and Com-
putation, 179(1), 19‚Äì75.
DE GROOTE P. (2001). Towards abstract categorial grammars. In Association for Computa-
tional Linguistics, 39th Annual Meeting and 10th Conference of the European Chapter, Pro-
ceedings of the Conference, p. 148‚Äì155.
DE GROOTE P. & MAAREK S. (2007). Type-theoretic extensions of abstract categorial gram-
mars. In New Directions in Type-Theoretic Grammars, proceedings of the workshop, p. 18‚Äì30.
DE GROOTE P., YOSHINAKA R. & MAAREK S. (2007). On two extensions of abstract cate-
gorial grammars. In N. DERSHOWITZ & A. VORONKOV, Eds., Logic for Programming, Arti-
ficial Intelligence, and Reasoning, 14th International Conference, LPAR 2007, Yerevan, Arme-
nia, October 15-19, 2007, Proceedings, volume 4790 of Lecture Notes in Computer Science,
p. 273‚Äì287 : Springer.
Florent Pompigne
MARTIN-L√ñF P. (1973). An intuitionistic theory of types : Predicative part. In F.ROSE &
J.SHEPERDSON, Eds., Logic Colloquium ‚Äô73, p. 73‚Äì118.
MOORTGAT M. (1996). Categorial type logics. In J. VAN BENTHEM & A. TER MEULEN,
Eds., Handbook of Logic and Language, p. 93‚Äì177. Amsterdam : Elsevier Science Publishers.
MUSKENS R. (2007). Separating syntax and combinatorics in categorial grammar. Research
on language and computation.
PERRIER G. (2007). A french interaction grammar. In 6th International Conference on Recent
Advances in Natural Language Processing, Borovets, Bulgaria, 2007., p. 463‚Äì467.
POLLARD C. (2007). The logic of pied-piping. Presentation at the Colloquium in Honour of
Alain Lecomte.
POLLARD C. (2008). An introduction to convergernt grammar. Presentation at Calligramme
Seminar.
RUYS E. & WINTER Y. (2008). Quantifier scope in formal linguistics. To appear in D. Gabbay
(ed.), Handbook of Philosophical Logic - Second Edition.
SALVATI S. (2005). Probl√®mes de filtrage et probl√®mes d‚Äôanalyse pour les grammaires cat√©-
gorielles abstraites. PhD thesis, Institut National Polytechnique de Lorraine.
