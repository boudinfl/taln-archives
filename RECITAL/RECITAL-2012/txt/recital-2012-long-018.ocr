Peuplement d’une ontologie modélisant le comportement
d’un environnement intelligent
guidé par l’extraction d’instances de relations

Driss Sadoun1»2
(1) LIMSI/CNRS, B.P. 133 91403 Orsay Cedex, France
(2) Université Paris—Sud, 91400 Orsay, France
driss . sadounﬁlimsi . fr

RESUME

Nous présentons une approche de peuplement d’ontologie dont le but est de modéliser le
comportement de composants logiciels aﬁn de faciliter le passage de descriptions d’exigences
en langue naturelle a des spécifications formelles. L’ontologie que nous cherchons ‘a peupler
a été concue ‘a partir des connaissances du domaine de la domotique et est initialisée ‘a partir
d’une description de la conﬁguration physique d’un environnement intelligent. Notre méthode est
guidée par l’extraction d’instances de relations permettant par la-méme d’extraire les instances de
concepts liés par ces relations. Nous construisons des régles d’extraction a partir d’éléments issus
de l’analyse syntaxique de descriptions de besoins utilisateurs et de ressources terminologiques
associées aux concepts et relations de l’ontologie. Notre approche de peuplement se distingue
par sa ﬁnalité qui n’est pas d’extraire toutes les instances décrivant un domaine mais d’extraire
des instances pouvant participer sans conﬂit 21 un des multiples fonctionnements décrit par des
utilisateurs.

ABSTRACT
Population of an Ontology Modeling the Behavior of an Intelligent Environment Guided
by Instance Relation Extractions

We present an approach for ontology population, which aims at modeling the behavior of software
components, for enabling a transition from natural language requirements to formal speciﬁcations.
The ontology was designed based on the knowledge of the domotic domain and is initialized
from a description of a physical conﬁguration of an intelligent environment. Our method focuses
on extracting relation instances which allows the extraction of concept instances linked by these
relations. We built extraction rules using elements coming from syntactic analysis of user need
descriptions, semantic and terminological resources linked to the knowledge contained in the
ontology. Our approach for ontology population, distinguishes itself by its purpose, which is not
to extract all instances describing a domain but to extract instances that can participate without
any conﬂict to one of the mutiple operation decribed by users.

MOTS-CLI§'.S : extraction de relations, peuplement d’ontologie, représentation des connaissances.

KEYWORDS: relation extraction, ontology population, knowledge representation.

Actes de la con_fe'rence conjointe JEP-TALN-RECITAL 2012, volume 3: RECITAL, pages 281-294,
Grenoble, 4 au 8 juin 2012. ©2012 ATAI.A 8: AFCP

281

1 Introduction

Les ontologies permettent une modélisation formelle d’un domaine, en décrivant ses concepts et
les relations qu’ils entretiennent ainsi que les individus (ou instances) qui leurs sont associés.
La conception d’une ontologie se fait en deux étapes, d’abord sa conceptualisation (Bendaoud
et al., 2007) (Wang et 'Iun1er, 2009) qui a pour but de faire émerger les concepts et relations
représentant le domaine visé, ainsi que les axiomes qui pennettront d’ordonner concepts et
relations dans l’ontologie et de classer leurs instances, ensuite son peuplement ou instanciation
qui consiste ‘a associer des instances a des concepts et relations existants. C’est cette deuxiéme
tache qui sera traitée dans cet article.

La méthode de peuplement choisie est en général conditionnée par l’usage auquel est destinée
l’ontologie. Dans le cas d’une ontologie modélisant un domaine de fagon descriptive (De Boer
et aL, 2007) (Maynard et al., 2008), le but est de détecter, d’extraire et de lister systématiquement
toutes les instances contenues dans les textes pouvant reﬂéter un concept ou une relation
du domaine ‘a décrire. L’ontologie que nous avons congue a pour vocation de modéliser le
comportement dynamique d’un systéme de composants logiciels, en l’occurrence le comportement
d’un environnement intelligent, que nous avons modélisé ‘a partir de l’étude des domaines de
réseaux de capteurs, des environnements intelligents et de la domotique (Sadoun et al., 2011).
Le processus de peuplement aura pour but d’extraire seulement les instances reﬂétant un
comportement possible de ce systéme spéciﬁque a des exigences d’utilisateurs.

L’ambition du projet (Envie Verte 1) dans lequel s’inscrit ce travail, est de permettre le pilotage
d’un environnement intelligent en partant de descriptions en langue naturelle du comportement
du systéme vers des spéciﬁcations formelles. Les spéciﬁcations sont données par des utilisateurs
pour exprimer leurs besoins. L’intérét est de permettre une vériﬁcation formelle de la conﬁgura-
tion résultat avant de la déployer. A cette ﬁn, nous avons proposé de passer par l’intermédiaire
d’une ontologie du comportement de composants logiciels, pour faciliter le passage de l’informel
vers le formel (Sadoun et aL, 2012). En effet, du fait de leur forrnalisme basé sur les logiques de
description, les ontologies constituent un outil puissant pour l’aide a la vériﬁcation d’exigences et
de spéciﬁcations formulées en langue naturelle. Nous exploitons ontologie et régles pour repré-
senter et vériﬁer la consistance et la complétude des spéciﬁcations décrivant les comportements
de composants logiciels. L’intérét est de rendre ces comportements facilement paramétrables et
adaptables.

L’ontologie a ant été déﬁnie, cet article en décrit une méthode de eu lement. La méthode

Y P P
proposée est centrée sur la détection d’instances de relations appartenant a la conceptualisation,
point de départ pour l’identiﬁcation d’instances de concepts.

La section suivante décrit l’état de l’art, la section 3 décrit brievement l’ontologie, la section
4 décrit les descriptions d’environnement et des exigences. En section 5, nous introduisons la
notion d’interprétation des exigences. La section 6 décrit la méthode de peuplement d’ontologie,
puis en section 7 nous discutons la gestion de l’implicite avant la conclusion et la déﬁnition des
perspectives.

1. http :/ /envieverte.1imsi.fr/, projet ﬁnancé par DIGITEO 2010

282

2 Etat de l’art

Le peuplement automatique d’ontologie a par1ir de textes est une problématique qui a donné
lieu a différentes approches (Alani et al., 2003) , (Alani et al., 2004) , (Amardeilh et al., 2005),
(Maynard et al., 2008).

Aﬁn d’extraire des connaissances relatives aux artistes sur le web, (Alani et al., 2004) applique
une analyse syntaxique et sémantique pour la reconnaissance d’entités nommées et l’extraction
de relations entre instances. La base de connaissance ainsi peuplée servira a la génération
automatique de biographies.

(Amardeilh et al., 2005) propose l’enrichissement d’une base de connaissance (Topics Maps)
contrainte par une ontologie du domaine. Pour cela il déﬁnit des régles d’acquisition en langage
XPath pour mettre en correspondance des extractions linguistiques avec l’ontologie du domaine.
Ces régles d’acquisition s’appuient sur le parcours d’arbres conceptuels contenant les informations
pertinentes pour le domaine. (Maynard et al., 2008) utilise une méthode linguistique et statistique
pour la reconnaissance de termes et utilise des inforrnations contextuelles de trois types :
syntaxique, terminologique et sémantique. (Witte et al., 2010) utilise des annotations issues
d’analyses syntaxiques pour associer des entité nommées a des instances de concepts et relations.

L’identiﬁcation de relations conceptuelles dans les textes est un probléme majeur dans le processus
de peuplement d’une ontologie, cette tache a suscité plusieurs travaux.

(Makki et al., 2008) décrit l’utilisation d’outils de traitement des langues pour le peuplement
d’une ontologie de gestion des risques. En partant du principe que les relations sémantiques
entre concepts sont le plus souvent représentées par des verbes, il extrait des relations issues
d’une analyse des verbes et de leur entourage afin d’extraire des triplets, en utilisant des listes
de verbes synonymes des relations conceptuelles construites ‘a l’aide de WordNet. Dans notre
méthode nous construisons des classes sémantiques contenant des termes, et pas uniquement
des verbes, dont l’association avec des relations sémantiques ou concepts est propre au domaine
d’application.

(Hasegawa et al., 2004) propose une approche fondée sur le regroupement de paires d’enti-
tés nommées apparaissant dans des contextes similaires, o1‘1 chaque paire d’une méme classe
est considérée comme une instance de la méme relation. (Bentibebel et al., 2009) généralise
cette approche en construisant des classes d’association de termes représentant des relations
conceptuelles potentielles. Une fois ces relations conceptuelles validées, ils y associent des régles
d’extraction pour extraire d’autres occurrences.

(Lin et Pantel, 2001) avance que des relations binaires peuvent étre représentées par des chemins
dans les arbres de dépendances syntaxiques, ces chemins auront des signiﬁcations similaires
s’ils ont tendance ‘a se connecter aux mémes ensembles de mots. (Nakamura-Delloye et Stern,
2011) exploite ces chemins syntaxiques, pour identifier des relations entre couple d’entité
nomrnées préalablement extraits (Nakamura-Delloye, 2011) et leurs régles. Nous généralisons
cette approche pour la définition de régles d’extraction d’instances de relations et de concepts,
en exploitant des chemins reliant different types d’unité textuelles.

283

3 Ontologie de l’environnement intelligent

L’environnement intelligent consiste en un ensemble d’objets communicants (capteurs, action-
neurs et processus de contréle) qui peut étre vu comme un réseau de capteurs. Ces objets
inﬂuencent le comportement des équipements de l’environnement, sous des conditions bien
déﬁnies. On peut distinguer une partie matérielle : les différents équipements, leur nombre, leur
type, leur localisation etc. et une partie logicielle : la conﬁguration du comportement.

Ces deux aspects permettent de décrire le comportement général d’un environnement intelligent :

— Un capteur détecte l’apparition d’un phénoméne ou mesure un phénoméne quantiﬁable dans
un espace restreint.

— Un phénoméne, pour étre détecté ou mesuré par un capteur, doit étre localisé dans la zone de
capture du capteur et étre du type pergu par le capteur (température, mouvement, ...)

— Un actionneur est ﬁxé ou connecté a un appareil de l’environnement.

— Quand un phénoméne (ou un ensemble de phénoménes) est mesuré ou détecté, un contréle des
informations collectées est effectué et peut conduire a l’activation d’un ou plusieurs actionneurs
pour déclencher une ou plusieurs actions (allumer, éteindre, diminuer, augmenter) sur les
appareils auxquels ils sont connectés.

— Un actionneur peut étre activé par un capteur (ou un ensemble de capteurs), s’il est localisé
dans sa zone (leur zone) de contréle et gére le(s) méme type(s) de phénoméne.

La ﬁgure 1 représente la conceptualisation du comportement de l’environnement intelligentz.

Q9 :disininI partiﬁn .

 

mputycnmceui-an ‘U,’
Ac!unhe_un: rumuonat '
Detect: Filmﬁunnl

loutedjln: Tnnsiu've / W"
Measure: l7unch'onn.l H_ We '

7~~—°*—°°n~°‘= -Wm! ‘ W

7m=—°L9wins= Functional D°£"““°"°' m
H-um: nu-cuuml

FIGURE 1 — Ontologie d’environnement intelligent

3.1 Réle de l’ontologie

L’ontologie que nous avons concue a pour vocation de faciliter le passage de descriptions des
besoins ‘a des spéciﬁcations formelles, en vue d’une vériﬁcation de la consistance et de la

2. L’absence d’un concept utilisateur dans1’onto1ogie, est dﬁ au fait que les utilisateurs de l’environnement ne sont

représenté que par les phénoménes qu’i1 peuvent engendrer tel qu’une piece vide ou pleine.

284

cohérence de la conﬁguration décrite en langage naturel par l’utilisateur de l’environnement
intelligent. Elle n’a donc pas vocation a décrire exhaustivement le domaine des environnements
intelligents et doit rester a un niveau de description assez élevé pour étre la plus générale possible,
aﬁn de pouvoir représenter tous les cas de fonctionnement envisageables par un utilisateur. Pour
plus de détails sur la conception de l’ontologie voir (Sadoun et al., 2012)

La conceptualisation n’étant pas soumise au changement selon les besoins utilisateurs, la structure
de l’ontologie (concepts et relations) a été concue et ﬁgée ‘a partir de l’étude du domaine des
environnements intelligents et des réseaux de capteurs. Au contraire, l’instanciation de l’ontolo-
gie variera en fonction des descriptions de la conﬁguration physique de l’environnement et des
besoins utilisateur, et reﬂétera pour chaque instanciation un comportement particulier de l’envi-
ronnement intelligent. Ia vérification du modéle résultant permettra de détecter d’éventuelles
incohérences ou oublis dans les descriptions.

Nous avons décidé d’utiliser comme langage de modélisation, le langage OWL augmenté de SWRL
et SQWRL pour sa grande expressivité de représentation des connaissances et ses mécanismes
de raisonnement perrnettant d’effectuer un bon nombre des vérifications nécessaires avant le
déploiement du systéme modélisé.

3.2 Connaissances modélisées

L’ontologie contient deux niveaux : terminologique ('IBox) et assertionnel (Abox). Le premier
niveau permet d’exprimer ‘a l’aide d’axiomes des relations entre concepts, ce qui permet par
exemple de déﬁnir le Domaine et le Range d’une relation ou de marquer la différence entre un
capteur qui mesure et un capteur qui détecte.

La relation Measure a comme Domaine : M easuring_Sensor et comme Range : Measurable
Un capteur qui mesure est un capteur qui mesure un mesurable.
Measuring_Sensor E Sensor A E|Measure.Measurable

La relation Detect a comme Domaine : Detecting_Sensor et comme Range : Event
Un capteur qui détecte est un capteur qui détecte un événement.
Detecting_Sensor E Sensor A E|Detect.Event

Le peuplement portera sur le second niveau de notre ontologie et consistera a créer les assertions
identiﬁées a partir de l’analyse des descriptions. Différents cas de comportement seront modélisés
par différentes instanciations, issues des descriptions d’environnement et des besoins utilisateurs.
Chaque instanciation est une spécialisation de l’ontologie, qui représente un comportement
spéciﬁque d’un environnement donné correspondant aux exigences des utilisateurs.

3.3 Régles de comportement

Des régles SWRL permettent de représenter les régles de comportement dynamique de l’envi-
ronnement, liant phénomenes et capteurs et capteur et actionneur. Certaines de ces régles sont
indépendantes des descriptions, car elles représentent un comportement général du systéme.
D’autres régles sont créées automatiquement lorsqu’elles reﬂétent un comportement spéciﬁque
aux exigences d’utilisateurs.

285

Les régles SWRL (1),(2),(3) représentent des régles de comportement général de l’environnement,
la régle (4) représente une régle spécifique ‘a des spécifications d’exigence. Les deux regles ci-
dessous permettent de déduire (ou de créer) les instances de la relation Shared_type( ?s, ?e)

Le phénoméne p et le capteur s partagent le méme type
Has_type(?p,?t),Perceived_type(?s,?t) —> Shared_type(?p, ?s) (1)

I.’actionneur a et le capteur s partagent le méme type
Managed_type(?a, ? t), Perceived_type(?s, ? t) —> Shared_type(?p, ?s) (2)

Ainsi, certaines instances sont issues du processus de peuplement quand d’autres sont déduites
lors d’un raisonnement sur les instances présentes dans l’ontologie.

La régle SWRL ci-dessous, stipule que la présence d’un événement e et d’un capteur s qui partagent
le méme type, quand e est localisé dans la zone de détection de 5, entraine la détection de e par 5
(Detect(?s, ?e) )

Event(?e),Sensor(?s), Shared_type(s?, ?e), Located_in(?e, l),

Zone_of_sensing(?s, l) —> Detect(?s,?e) (3)

Dans la régle spécifique ci-dessous, nous distinguons deux parties, une premiere ﬁxe et indé-

pendante des textes, et une seconde partie (soulignée dans la régle) générée en fonction des
exigences décrites dans les textes.

Lorsqu’un capteur mesure une valeur supérieure ‘a 20 , l’actionneur du méme type augmente
l’appareil qu’il contréle.

Actuator(?a), Physical_process(?p),Actuate_on(?a, ?p), Located_in(?a, ?l), Measure(?s, ?m),
Shared_type(?s, ?a), Zone_of_control(?s, ?l),Has_value(?m, ?v), lessThanOrEqual(?v, ”20”)
—> Increase(?a, ?p) (4)

4 Descriptions textuelles

Pour piloter son environnement, un utilisateur décrit, selon la conﬁguration physique de son
environnement, les fonctionnalités devant étre conﬁgurées pour satisfaire ses besoins.

1. Description de l’environnement intelligent: décrit les composants de l’environnement (cap-
teurs, actionneurs, processus physique, ...), leur nombre, leur type, leur localisation et
leur maniére d’interagir. Cette partie déﬁnit l’état statique de l’environnement et doit étre
traitée avant les besoins utilisateur.

Exemple : Eappartement vert possede un couloir, deux chambres, une salle de bain, et un
grand living qui contient une salle c‘1 manger et une cuisine. Chaque piece est e’quipée de
capteurs de mouvement. Chaque ampoule est e’quipe’e d’un actionneur.

2. Besoins utilisateur : décrit comment et sous quelles conditions les objets de l’environnement
doivent interagir. Cela permet de produire différentes instanciations de l’ontologie selon
différents scénarios.

Exemple : Quand une personne est dans le living room, y allumer la lumiére.

Le but de notre projet étant la vériﬁcation automatique d’exigences, la description de l’environne-
ment qui ne fait qu’énumérer des composants physiques et leurs modes d’utilisau'on. ne nous

286

intéressera pas dans la phase d’extraction automatique d’informations pour le peuplement de
l’ontologie. Cette description sert néanmoins ‘a initialiser l’ontologie (premiere instanciation)
avec les connaissances liées aux caractéristiques physiques de l’environnement qui seront non
soumises aux changements. L’instanciation automatique s’appuiera donc plus paniculierement
sur les informations contenues dans les descriptions des besoins utilisateur.

Dans le cadre de notre projet nous partons de descriptions en anglais. Pour la collecte de descrip-
tions de besoins utilisateurs (en anglais et francais), nous avons mis en place une plateforme 3
permettant ‘a des participants de décrire un environnement intelligent, en l’occurrence une
maison intelligente, dont la conﬁguration physique est représentée par un plan et une description
de différents objets de l’environnement et de leur mode d’interaction. Cette description reste
néanmoins assez générale de sorte a permettre aux participants d’exprimer différentes idées de
conﬁguration correspondant a des besoins variés.

5 Interprétation des exigences utilisateur

Les descriptions utilisateur décrivent le comportement de l’environnement en fonction de la
présence de différents phénoménes. Comme les phénoménes possibles ne peuvent généralement
pas tous apparaitre en méme temps, ces descriptions contiennent en fait différents cas de
fonctionnement qu’on appelle interprétation.

Une interprétation représente l’état de l’environnement intelligent ‘a un instant t, cet état sera
déterminé par toutes les instances qui seront présentes dans l’ontologie ‘a l’instant t. Une inter-
prétation ne contiendra pas toutes les instances reconnues dans les textes mais seulement un
sous-ensemble cohérent d’instances modélisant une partie des exigences utilisateur.

Ces instances ont une existence conditionnelle, comme cela est illustré par les deux phrases
suivantes "When someone is in the kitchen, turn on the light." et "When nobody is in the kitchen,
turn off the light“. Les instances de relations et de concepts pouvant étre extraites de ces phrases
devront donc logiquement appartenir a deux interprétations différentes, car il ne peut y avoir au
méme instant quelqu’un et personne dans la cuisine. Dans le cas contraire les mémes instances
déclencheraient deux régles contradictoires engendrant l’assertion des deux relations 'Iurn_on et
'Iurn_off entre les mémes instances, ce qui créera une incohérence lors du raisonnement.

L’instanciation doit donc prendre garde a ne pas ajouter toutes les instances extraites en méme
temps ou du moins celles pouvant étre en conﬂit. Pour le moment, l’instanciation et le raison-
nement portent sur les instances d’une phrase a la fois pour éviter les incohérences dues a des
instances opposées pouvant déclencher des régles contradictoires. H y a donc autant d’instancia-
tions que de phrases présentes dans les descriptions. L’identiﬁcation d’instances en conﬂit s’inscrit
dans nos travaux futurs.

Aﬁn de pouvoir naviguer entre descriptions et ontologie, chaque instance extraite se voit allouer
un indice composé de deux numéros, celui de la phrase dont elle est issue ainsi que la position
de son noeud dans l’arbre syntaxique.

Exemple : Si l’instance i est issue de l’analyse de la phrase numéro 11 et que le numéro du
noeud représentant i dans l’arbre syntaxique est 4, on crée les deux instances de relations
Phrase_number(i, 11) et Node_number(i,4).

3. http : //perso.1imsi.fr/Individulsadoun/App1ica1ion/en/Smart!-Iome.php

287

Cette référence a l’arbre syntaxique va perrnettre d’aller dans les descriptions pointer dans les
phrases les termes correspondant aux instances qui sont ambigués ou qui créent des incohérences,
pour permettre aux utilisateurs de corriger et d’améliorer leurs exigences.

6 Peuplement de l’ontologie

La ﬁgure 2 illustre le processus de peuplement a par1ir de spéciﬁcations en langue naturelle.
L’ontologie est d’abord initialisée avec les instances qui décrivent sa conﬁguration physique.
L’utilisation des résultats d’une analyse syntaxique des descriptions utilisateurs faite par le
Stanford Parser (de Marneffe et al., 2006), de ressources terminologiques et des connaissances
déja présentes dans l’ontologie, permettent d’appliquer des regles pour l’extraction d’instances.
Les instances extraites vont peupler l’ontologie et peuvent a leur tour servir a l’identiﬁcation de
nouvelles instances.

 
      
  
  

Application
Analyse de

syntaxique Q3195

Cl’e><traCtI0n

Ontologie

Initialisation

de
lbnoologie

Ressnuces

Descriptions Description
utilisateur termumlngiques ‘ 116
ronnement

   

FIGURE 2 — Processus de peuplement de l’ontologie

6.1 Initialisation de l’ontologie

La phase d’initialisation a pour but de peupler l’ontologie avec toutes les instances qui re-
présentent la conﬁguration physique de l’environnement intelligent (instances de capteurs,
d’actionneurs, appareils, localisations et relations entre instances). Ces instances sont peu sujettes
aux changements, et donc l’initialisation ne se fait qu’une fois via une interface de saisie.

Ci-dessous un exemple d’instanciation du concept Detec ting_sensor :

Detecting_sensor(s1) : s1 est une instance de Detecting_sensor. (I1)
Perceived_type(s1, movement) : s1 détecte des phénoménes de type movement. (12)
Zone_of_sensing(s1,kitchen) : s1 a come zone de détection kitchen (13)
Zone_of_contro1(s1,kitchen) : s1 a comme zone de conlI6le kitchen (14)

Lors de l’initialisation de l’ontologie, une instance est créée pour chaque capteur avec comme

288

propriétés son type, sa zone de détection et sa zone de controle.

6.2 Extraction des instances

Nous avons choisi de prendre comme point de départ la détection d’instances de relations plut6t
que de concepts pour aborder le processus de peuplement, choix qui se justiﬁe, par la liste plus
limitée des formulations pouvant représenter des instances de relations dans les corpus. De plus,
seule l’extraction des instances de concepts participant a une relation sémantique modélisée dans
l’ontologie nous intéresse.

Pour extraire une instance de relation, il faut reconnaitre d’abord des concepts pouvant la reﬂéter,
puis vériﬁer que les concepts auxquels elle est liée dans le texte correspondent aux concepts du
Domaine ou du Range de la relation.

Nous distinguons deux types de classes sémantiques, certaines calquées sur les concepts et
relations modélisés dans l’ontologie, telle que la classe "Turn on" contenant tous les termes
pouvant reﬂéter l’action d’allumer ou de mettre en marche (light on, switch on, open, ...), a
l’opposé de la classe “Turn off" (light off, switch off, close, ...) qui reﬂéte l’action d’éteindre ou de
mettre ‘a l’arrét, ou la classe "Location" contenant tous termes correspondant ‘a une instance de
localisation issue de la description de l’environnement (hall, kitchen, parent’s bedroom, living
room, ...). et d’autres classes sémantiques portant sur des connaissances moins spéciﬁques, telle
que la classe Sémantique Conditional Introducer (when, if, each time, ...) qui contient les termes
introduisant une condition.

L’utilisation de ressources telles que WordNet, VerbNet ou FrameNet s’avére utile pour la construc-
tion de ressources terminologiques. Néanmoins, étant basées sur des connaissances générales, les
classes sémantiques qu’elles déﬁnissent se révélent étre moins pertinentes en domaine spécialisé
et ne correspondent pas aux concepts que nous avons déﬁnis.

L’ontologie permet de définir un vocabulaire conceptuel sans toutefois contenir le volet termi-
nologique. L’essenu'el des connaissances terminologiques que nous utilisons pour l’extraction
d’instances de relations et de concepts sont issues de ressources terminologiques extérieures ‘a
l’ontologie mais liées aux connaissances qu’elle modélise.

6.3 Extraction des instances

Nous avons choisi de prendre comme point de départ la détection d’instances de relations plut6t
que de concepts pour aborder le processus de peuplement, choix qui se justiﬁe par la liste plus
limitée des formulations pouvant représenter des instances de relations dans les corpus. De plus,
seule l’extraction des instances de concepts participant a une relation sémantique modélisée dans
l’ontologie nous intéresse.

Pour extraire une instance de relation, il faut reconnaitre d’abord des termes et structures
syntaxiques pouvant la reﬂéter, puis vériﬁer que les concepts auxquels elle est liée dans le texte
correspondent aux concepts du Domaine ou du Range de la relation.

Nous avons donc consuuit des lexiques permettant de lier termes et concepts. Nous distinguons
deux types de classes sémantiques. Certaines sont calquées sur les concepts et relations modélisés

289

dans l’ontologie, telle que la classe "Turn on" contenant tous les termes pouvant reﬂéter l’action
d’allumer ou de mettre en marche (light on, switch on, open, ...), ‘a l’opposé de la classe "Tum
off" (light off, switch off, close, ...) qui reﬂete l’action d’éteindre ou de mettre ‘a l’arrét, ou la
classe "Location" contenant tous termes correspondant a une instance de localisation issue de la
description de l’environnement (hall, kitchen, parent’s bedroom, living room, ...). D’autres classes
sémantiques portent sur des connaissances moins spécifiques, telle que la classe Sémantique
Conditional Introducer (when, if, each time, ...) qui contient les termes introduisant une condition.

L’utilisation de ressources telles que WordNet, VerbNet ou FrameNet s’avére utile pour la construc-
tion de ressources terminologiques. Néanmoins, étant basées sur des connaissances générales, les
classes sémantiques qu’elles déﬁnissent se révélent étre moins pertinentes en domaine spécialisé
et ne correspondent pas directement aux concepts que nous avons déﬁnis.

L’ontologie permet de définir le vocabulaire conceptuel sans toutefois contenir le volet termi-
nologique. L’essentiel des connaissances terminologiques que nous utilisons pour l’extraction
d’instances de relations et de concepts sont issues de ressources terminologiques extérieures ‘a
l’ontologie mais liées aux connaissances qu’elle modélise.

6.4 Construction de régles d’extraction
6.4.1 Chemin syntaxique

La construction de régles d’extracu'on s’appuie sur une analyse des dépendances syntaxiques.
Dans un arbre de dépendances (cf ﬁgure 3), les dépendances syntaxiques lient deux noeuds, le
premier que nous appellerons noeud directeur et le second noeud dépendant. Un chemin syntaxique
entre deux noeuds est représenté par les dépendances qui les lient.

Par exemple, soit la dépendance syntaxique sub j(is,someone)

— nsubj : nom de la relation (dépendence sujet nominal)
— is : mot contenu dans le noeud directeur.
— someone : mot contenu dans le noeud dépendant.

Exemple : When someone is in the kitchen, turn on the light. La ﬁgure 3 représente l’arbre des
dépendances syntaxiques de cette phrase4.

advcl

nsubj

advmod prep pobj prep pobj

When someone is into the kitchen , turn on the Iigth
WRB NN VBZ W DT NN , VB VN DT NN

 

FIGURE 3 — Arbre des dépendances syntaxiques

4. Image produite a l’a1'de de DependenSee.jaI http ://chaoticitycom/dependensee-a-dependency-parse-visua]isation-
tool/

290

6.4.2 Régles d’extract1'on

Les regles d’extraction que nous construisons doivent étre assez générales pour s’appliquer sur
différentes formulations de phrases et assez spéciﬁques pour n’extraire que les instances de
relations et de concepts les plus pertinentes.

L’utilisat1'on de chemins syntaxiques pour reconnaitre la présence d’instances candidates ‘a
l’extraction permet de traiter différent types de phrases car les dépendances syntaxiques formant
ces chemins peuvent apparaitre dans différentes formulations. Ia veriﬁcation de la pertinence
des instances candidates se fait a l’aide d’éléments issus de l’analyse syntaxique des descriptions,
des ressources terminologiques, ainsi que des connaissances modélisées dans l’ontologie.

Dans les exemples qui suivent, les termes commengant par des minuscules et contenant des
majuscules représentent des fonctions codées en java permettant d’accéder aux ressources
terminologiques ou aux connaissances contenues dans l’ontologie.

Régle pour 1’extIaction d’une instance de la relation Located_in() :

Cette regle identiﬁe tous les chemins syntaxiques existant entre les deux dépendances prep 5 et
pobj 5, en vériﬁant qu’il existe un noeud commun p entre elles, que ce noeud est une préposition
de lieu (isPrepLocation(p)), que le noeud directeur I de la dépendance pobj corresponde a
une instance du concept Location (isLocation(l)) existante dans l’ontologie, puis que le noeud
dépendant i de la dépendance prep a comme catégorie syntaxique un nom ou un verbe.
pobj(l,p) A prep(p, i) A isPrepLocation(p) A isLocation(l) A (isNoun(i) V isVerb(i))

—> Located_in(i, l)

I.’application de cette régle a la phrase précédente a pour résultat :

pobj(kitchen,i_n) Aprep(Q, is) A isPrepLocation(in) A isLocation(kitchen)

A (isNoun(is) V isVerb(is)) —> Located_in(is, kitchen)

Dans le cas o1‘1le directeur de la relation I.ocated_in i est issu du verbe auxiliaire to be et qu’il
existe une relation nsubj 7 entre cet auxiliaire et un nom, l’auxiliaire est remplacé par ce nom :
Located_in(i, l) A isToBe(i) A nsubj(i, n) —> Located_in(n, l)

Ce qui a pour résultat :

Located_in(is, kitchen) A isToBe(is) A nsubj(is, someone) —> Located_in(someone, kitchen)

L’instance de relation Located_in(someone, kitchen) extraite ne permet pas de typer ou de
déduire lors d’un raisonnement sur les instances, le type de someone car le domaine de la relation
Located_in est égal ‘a tous les concepts (Thing). Aussi, nous décrivons des regles d’extraction
d’instances de concepts permettant de désambiguiser des instances qui ne pourraient l’étre au
sein de l’ontologie.

Régle pour 1’extIaction d’une instance du concept Event :

Cette régle identiﬁe tous les chemins syntaxiques existant entre les deux dépendances advmod 8

. pobj : objet de la préposition

. prep : modiﬁcateur prépositionnel
. nsubj : sujet nominal

. advmod : modiﬁcateur adverbial

m\10\<l'|

291

et nsubj, en vériﬁant qu’il existe un noeud commun v entre elles, que ce noeud est issu du verbe
auxiliaire to be, que le noeud dépendant c de la dépendance advmod appartient a la classe
Sémantique Conditional Introducer et que le noeud dépendant 11 de la dépendance nsubj participe
déja a une instance de la relation Located_in dans l’ontologie, car un événement n’a aucun intérét
si l’on ne connait pas sa localisation.

advmod(v, c) A nsubj(v, n) A isToBe(v) A IsCondIntroducer(c) A Located_in(n, l)
—> Event(n)

Ce qui a pour résultat :

advmod(is,When) A nsubj(is,someone) A isToBe(is) A IsCondIntroducer(When) A
Located_in(someone,kitchen) —> Event(someone)

Régle pour 1’extIaction d’une instance de la relation Has_type :

La régle ci-dessous identiﬁe 1a présence des deux instances Event et Located_in issues de l’ontolo-
gie, contenant l’instance commune n dénotant le type t (information présente dans nos ressources
terminologiques et sémantiques)

Event(n) A Located_in(n, l) A denoteType(n, t) —> Has_type(n, t)
Le terme someone en tant qu’événement dénote le type movement, on donc a pour résultat :

Event(someone) A Located_in(someone, kitchen) A denoteType(someone, movement)
—> Has_type(someone, movement)

A l’aide de ces régles, nous obtenons des instances de relations et de concepts qui sont ajoutées a
l’ontologie et qui peuvent étre réutilisées dans d’autres régles.

L’ordre d’application des régles d’extraction n’a pas de conséquences sur le résultat du peuplement.
Néanmoins comme l’application de certaines régles nécessite des résultats (instances) issues
de l’application d’autres régles, il est préférable d’ordonner leur application pour optimiser le
processus.

Les régles varient en fonction des instances a extraire, mais aussi pour une méme instance en
fonction de toutes les formulations. Dans un premier temps, nous compléterons celles-ci pour
déﬁnir les plus courantes, aﬁn de valider notre méthodologie d’instanciation de l’ontologie.
Nous étudierons ensuite comment disposer d’un plus large corpus si le nombre de descriptions
collectées ne nous permet pas d’avoir recours a des méthodes d’acquisition automatique.

7 Discussion

Dans les descriptions utilisateur, les références aux capteurs ne sont pratiquement jamais pré-
sentes, ces références sont souvent implicites, réduisant le capteur a son fonctionnement, ce que
l’on voit bien dans la phrase : When someone is in the kitchen, turn on the light.

Or, une instance de relation que nous souhaitons extraire est la relation Detect, qui représente la
détection d’un événement par un capteur.

C’est la que réside tout l’intérét de notre modéle, qui ne s’appuie pas seulement sur les infor-
mations présentes dans les descriptions, mais tient aussi compte de connaissances issues du

292

domaine, qui, le cas échéant, permettent de lever les ambiguités. L’ontologie modélise ainsi le fait
qu’un capteur est identiﬁable par sa zone de détection et le type d’événement qu’i1 peut détecter.
Aussi la reconnaissance d’instances de ces concepts permettra de déduire le capteur concerné.

Nous allons détailler ce processus pour l’exemple :

Les connaissances issues des initialisations I1, 12, 13 (Section 6.1) font que le déclenchement
de la régle SWRL (3) (Section 3) n’est plus soumis qu"a l’extraction des instances suivantes :
Located_in(someone,kitchen), Event(someone), Has_type(someone,movement), car le capteur
devant intervenir dans la régle, sera déduit automatiquement.

Instanciation de la régle SWRL (3)
Event(someone), Sensor(s1), Shared_type(s1,someone), Located_in(someone, kitchen),
Zone_of_sensing(s1, kitchen) —> Detect(s1, someone)

8 Conclusion et travaux futurs

Nous avons décrit une méthode pour le peuplement automatique d’une ontologie modélisant
le comportement d’un environnement intelligent, laquelle a pour but de faciliter le passage de
descriptions de besoins utilisateurs en langue naturelle vers des spéciﬁcations forrnelles de ces
besoins.

Cette problématique est distincte des approches habituelles pour le peuplement d’ontologie a
partir de textes qui ont pour but de peupler une ontologie avec toutes les instances extraites
des textes permettant de décrire un domaine. L’approche adoptée dans cet ar1icle vise a extraire
uniquement les instances participant a la modélisation d’un des multiples comportements d’un
systéme de composants logiciels.

Notre méthode est guidée par l’extraction d’instances de relations permettant par la-méme
d’extraire les instances de concepts liées par ces relations. L’extraction d’instances se fait a l’aide
de régles construites manuellement ‘a partir de résultats d’analyse syntaxique, de ressources
terrninologiques et des connaissances modélisées dans l’ontologie. Ainsi seules les instances
les plus pertinentes, car participant ‘a au moins une relation conceptuelle, sont extraites. Le
recours aux connaissances modélisées par l’ontologie offre un cadre formel pour la résolution
des ambiguités.

La modélisation résultante perrnet la navigation entre descriptions des exigences en langue
naturelle et spéciﬁcations formelles, pour la vériﬁcation de ces exigences et leur amélioration.

Nos travaux futurs porteront sur l’approfondissement de l’acquisition de régles, la création
automatique de régles SWRL spéciﬁques au comportement décrit dans les descriptions utilisateurs
et l’identification d’instances pouvant étre en conﬂit et dont la présence simultanée dans une
méme instanciation serait incohérente.

Références

ALANI, H., KIM, S., MILLARD, D. E., WEAL, M. J., HALL, W., LEWIS, P. H. et SHADBOLT, N. (2004).
Using protege for automatic ontology instantiation. In 7th International Prote’ge’ Conference.

293

ALANI, H., KIM, S., MILLARD, D. E., WEAL, M. J., HALL, W., LEWIS, R H. et SHADBOLT, N. R. (2003).
Automatic ontology-based knowledge extraction from web documents. IEEE Intelligent Systems.

AMARDEILH, E, LAUBLET, P. et MINEL, J.-L. (2005). Document annotation and ontology population
from linguistic extractions. In Proceedings of the 3rd international conference on Knowledge
capture.

BENDAOUD, R., RoUANE HACENE, M., TOUSSAINT, Y., DELEcRoIx, B. et NAPOLI, A. (2007). Construc-
tion d’une ontologie a partir d’un corpus de textes avec l’ACF. In IC 2007.

BENTIBEBEL, R., NAZARENKO, A. et SZULMAN, S. (2009). Mise en lumiére de relations sémantiques
pour la construction d’ontologies a partir de textes. In 'I'IA 2009.

DE BoER, V, VAN SOMEREN, M. et WIELINGA, B. J. (2007). Relation instantiation for ontology
population using the web. In Proceedings of the 29th annual German conference on Artificial
intelligence.

de MARNEFFE, M.-C., MACCARTNEY, B. et MANNING, C. D. (2006). Generating typed dependency
parses from phrase structure trees. In LREC.

HASEGAWA, 'I'., SEKINE, S. et GRISHMAN, R. (2004). Discovering relations among named entities
from large corpora. In Proceedings of the 42nd Annual Meeting on Association for Computational
Linguistics.

LIN, D. et PANTEL, P. (2001). Discovery of inference rules for question answering. Natural
Language Engineering.

MAKR1, J., ALQUIER, A.-M. et PRINCE, Vp, V (2008). Ontology Population via NLP Techniques in
Risk Management. In ICSWE : Fifth International Conference on Semantic Web Engineering.

MAYNARD, D., 1.1, Y. et PETERS, W. (2008). Nlp techniques for term extraction and ontology
population. In Proceeding of the 2008 conference on Ontology Learning and Population : Bridging
the Gap between Text and Knowledge.

NAKAMURA-DELLoYE, Y. (2011). Named entity extraction for ontology enrichment. In IPS.I Special
Interest Group - Information Fundamentals and Access Technologies (IFAT).

NAKAMURA-DELLOYE, Y. et STERN, R. (2011). Extraction de relations et de patrons de relations
entre entités nommées en vue de l’enrichissement d’une ontologie. In TO'I‘h 201 1 : Terminologie
& Ontologie : 'I'he’ories et Applications.

SADoUN, D., DUBOIS, C., GHAMR1-DOUDANE, Y. et GRAU, B. (2011). An ontology for the concep-
tualization of an intelligent environment and its operation. Mexican International Conference on
Artificial Intelligence.

SADOUN, D., DUBoIs, C., GHAMRI-DOUDANE, Y. et GRAU, B. (2012). Formalisation en OWL pour
vériﬁer les spéciﬁcations d’un environnement intelligent. In Actes de la conférence RFIA 2012.

WANG, E et TURNER, K. J. (2009). An ontology-based actuator discovery and invocation
framework in home care systems. In Proceedings of the 7th International Conference on Smart
Homes and Health Telematics :Ambient Assistive Health and Wellness Management in the Heart of
the City.

WITTE, R., KI-IAMIS, N. et RILLING, J. (2010). Flexible ontology population from text : The
owlexporter. In Proceedings of the Seventh International Conference on Language Resources and
Evaluation (LREC’10).

294

