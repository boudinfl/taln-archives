Extraction de PCFG et analyse de phrases pré-typées

Noémie-Fleur Sandillon-Rezer
CNRS, Esplanade des Arts et Métiers, 33402 Talence
LaBRI, 351 Cours de la Libération, 33405 'I‘alence
nf sr@labri . fr

RESUME
Cet article explique la chaine de traitement suivie pour extraire une grammaire PCFG ‘a
partir du corpus de Paris VII. Dans un premier temps cela nécessite de transformer les arbres
syntaxiques du corpus en arbres de dérivation d’une grammaire AB, ce que nous effectuons en
utilisant un transducteur d’arbres généralisé; il faut ensuite extraire de ces arbres une PCFG.
Le transducteur d’arbres généralisé est une variation des transducteurs d’arbres classiques et
c’est l’extraction de la grammaire ‘a partir des arbres de dérivation qui donnera l’aspect proba-
biliste 5 la grammaire. La PCFG extraite est utilisée via l’algorithme CYK pour l’ana1yse de phrases.

ABSTRACT
PCFG Extraction and Pre-typed Sentences Analysis

This article explains the way we extract a PCFG from the Paris VII treebank. Firslty, we need to
transform the syntactic trees of the corpus into derivation trees. The transformation is done with
a generalized tree transducer, a variation of the usual top-down tree transducers, and gives as
result some derivation trees for an AB grammar. Secondely, we have to extract a PCFG from the
derivation trees. For this, we assume that the derivation trees are representative of the grammar.
The extracted grammar is used, via the CYK algorithm, for sentence analysis.

MOTS-CLES : Extraction de grammaire, grammaire de Lambek, PCFG, transducteur d’arbre,
algorithme CYK.

KEYWORDS: Grammar Extraction, Lambek grammar, PCFG, tree transducer, CYK Algorithm.

Actes de la con_fe'rence conjointe JEP-TALN-RECITAL 2012, volume 3: RECITAL, pages 205-218,
Grenoble, 4 au 8 juin 2012. ©2012 ATAI.A 8: AFCP

205

1 Introduction

Cet article décrit les méthodes que nous employons pour transformer les arbres syntaxiques
du corpus de Paris VII en arbres de dérivation d’une grammaire AB (Lambek, 1958), pour
l’extraction de cette grammaire et son utilisation pour l’analyse de phrases. Les grammaires
AB sont utilisées dans des algorithmes d’apprentissage tels que celui de Buskowsky et Penn
(Buszkowski et Penn, 1990), qui permet d’apprendre une grammaire AB rigide 1, ou celui de
Kanazawa (Kanazawa, 1998), permettant d’apprendre une grammaire k-valuée 2; c’est pour cela
que nous avons souhaité, dans un premier temps, utiliser de telles grammaires. Les grammaires
AB représentent un fragment des grammaires de Iambek, comprenant uniquement des regles
de dérivation de type a —> a / b b et a —> b b\a. Le corpus de Paris VII (Abeillé et al., 2003) est
composé de 12855 phrases tirées du journal Le Monde, annotées et analysées par le laboratoire
de Paris VII. Les arbres syntaxiques sont planaires, le nombre de ﬁls par noeud et la profondeur
ne sont pas ﬁxés. Cela rend l’application d’algorithmes d’apprentissage usuels impossible; nous
avons donc pris le parti d’utiliser un transducteur d’arbres.

Nous avons utilisé, pour notre travail, une sous-partie du corpus, présentée sous forme parenthé-
sée de 12351 phrases, alors que le corpus complet est au format X1VJ1.. les 504 phrases laissées
de cété forment un corpus annexe dont nous nous servons pour l’évaluation.

En premier lieu, nous présenterons le transducteur, utilisé pour transformer les arbres syntaxiques
en arbres de dérivation, puis nous nous pencherons sur l’extraction d’une grammaire PCFG.
La troisieme partie détaillera l’analyse du placement des syntagmes prépositionnels dans la
phrase ; tandis que la quatriéme présentera les résultats expérimentaux obtenus en utilisant notre
grammaire PCFG pour trouver la meilleure analyse possible pour une phrase via l’algorithme
CYK (Younger, 1967).

2 Transducteur d’arbres généralisé

Ce n’est pas la premiere fois que les transducteurs sont utilisés dans le cadre de la linguis-
tique computationnelle; on peut citer Knight et Graehl (Knight et Graehl, 2005), qui utilisent
des transducteurs d’arbres ‘a états ﬁnis, dont hélas l’utilisation ne correspondait pas ‘a notre
problématique.

Des travaux de recherche plus appliqués, tels que (Hockenmaier et Steedman, 2007; Moot,
2010a,b; Moortgat et Moot, 2001), utilisent des algorithmes spécialisés qui s’appliquent uni-
quement a un corpus donné, avec un espoir faible de réutilisation. Etant donné les différences
d’annotations d’un corpus ‘a l’autre, et les variations grammaticales que l’on peut trouver entre
deux langues, adapter un outil pour le corpus de Paris VII est toujours particuliérement laborieux.
Etant donné que nous avons totalement séparé, lors de l’implémentation, le fonctionnement du
transducteur de l’ensemble des données qui lui sont passées en entrée (telles que les fichiers
de régles et le corpus sous forme parenthésée), nous pensons qu’un lissage des données sufﬁt a
appliquer notre transducteur a d’autres ensembles d’arbres.

Le transducteur que nous avons créé est le pivot central du processus d’extraction de grammaire.

1. Chaque mot du lexique n’a le droit d’avoir qu’un seul type.
2. Chaque mot du lexique peut avoir jusqu’a k types.

206

En effet, c’est la binarisation des arbres syntaxiques, fondée sur les régles usuelles de dérivation
d’une grammaire AB3 et les annotations morpho-syntaxiques du corpus (Abeillé et Clément,
2003), qui paramétrise la grammaire extraite.

Nous avons d’abord mis au point une version théorique de notre G-transducteur (G pour généra-
lisé) avant de l’implémenter pour le tester sur le corpus de Paris VII.

La créaﬁon du transducteur d’arbres est décrite en détail dans (Sandillon-Rezer et Moot, 2011).

En nous fondant sur les transducteurs d’arbres top-down décrits dans TATA (Comon et al., 2007),
nous avons généralisé les régles de transduction de maniére ‘a créer un outil plus adapté au
corpus de Paris VII. Ainsi, on peut dire que les trois principales différences entre un transducteur
top-down classique et notre G-transducteur sont : sa récursivité, sa paramétrisation et son systéme
de régles de priorité.

La récursivité permet d’appliquer un ensemble de régles a un noeud, jusqu’a ce qu’il soit traité
en entier, sans pour autant changer l’état du transducteur ni utiliser un nouvel ensemble
de régles de transduction (voir ﬁgure 1).

La paramétrisation permet de déﬁnir des régles avec variables. Ainsi, on peut donner une
transduction générale pour les adverbes et les modiﬁcateurs (voir ﬁgure 2).

Les régles de priorité : assurent le déterminisme de notre transducteur Ainsi, lorsque deux
régles peuvent s’appliquer, on leur donne un ordre d’application qui permet d’avoir toujours
les mémes arbres de sonie (voir ﬁgure 3).

P :x P :3:

X1  X,, X,“  X,,+k —> P:y Tzz

X1  X,, X,,+1  X,,+,.
FIGURE 1 — Le nouveau noeud P : y a moins de ﬁls qu’avant la transduction et pour le transducteur,
il restera dans le méme état et avec le méme label que le noeud parent P :x . Généralement, la
régle sera écrite de maniére ‘a ce que le sous arbre T :2 soit binaire et les types y et z doivent
obligatoirement se combiner pour donner le type x.

SENT:s SENT:s
/ \ ./ \
 X —> SENT:s X:s\s

l

FIGURE 2 — La méme régle sera appliquée pourX E {ADV, PP —MOD,AdP —MOD,AP — MOD, ...}

3. les groupes nominaux auront le type np etc.

207

SENT:s SENT:s
/ 1 \A / \
ADV  ADV —> ADV: s/s SENT: s

/\

ADV

FIGURE 3 — Lorsque plus d’une régle peut s’appliquer a un arbre, le fait de suivre un ordre prédéﬁni
permet d’éviter le non-déterminisme du transducteur.

Les régles ont été déduites d’une analyse systématique des formes présentes dans le corpus. Un
exemple de régle est donné dans la ﬁgure 4 et un de résultat dans la ﬁgure 5. Une fois le corpus
transformé en forét d’arbres de dérivations, nous n’utilisons plus le transducteur, que ce soit pour
l’extraction de grammaire ou l’analyse de phrases.

(rule

(SENT:* NP—SUJ (VN tree VPP) $‘P—OBJ)

( "SENT: =o= " "NP-SUJ : np"
(“VN:np\\*“ “VN:(np\\*)/(np\\s_p)"

(“:np\\s_p" “VPP:(np\\s_)/pp"

PP—0BJ:pp))))

FIGURE 4 — Exemple de régle telle que donnée au transducteur. On note deux points importants,
directement dérivés des spéciﬁcations de notre G-transducteur : le mot clef tree, qui permet de
remplacer "un certain nombre de noeuds", qui peut apparaitre plusieurs fois dans le motif de
départ mais pas dans le motif de remplacement; et le type *, qui remplace n’importe quel type
hérité des étapes précédentes.

3 Extraction de grammaire

Méme si le lexique, récupéré a partir des feuilles des arbres de dérivation, sufﬁrait a représenter
la grammaire AB, il nous limite aux mots présents dans le corpus. Or, bien que nous puissions
avoir des probabilités sur les types des mots, nous voulions une grammaire PCFG. Par conséquent,
nous avons pris le par11' d’extraire une grammaire probabiliste a partir des arbres.

Les arbres en sortie du transducteur donnent des informations ‘a la fois syntaxiques, car nous
gardons les labels donnés par le corpus et, bien sur, des informations structurelles. Nous avons
pris le parti de laisser le choix des informations que nous souhaitons garder, en effectuant une
passe de prétraitement, sachant bien sﬁr que les types sont, de toute facon, obligatoirement
conservés. La grammaire extraite sera de toute facon une grammaire hors contexte, avec une
probabilité calculée sur les régles en fonction de leur racine. Pour plus de simplicité, on rappelle
que les grammaires sont de la forme {N , T,S,R} :

N l’ensemble des symboles non terminaux, correspondant aux noeuds internes de l’arbre.

T l’ensemble des symboles terminaux, correspondant a l’ensemble des mots typés.

208

SENT
N * T,
NP-SUJ VN NP-OBJ PP-MOD PONCT
J

J J ‘Z J \ I \
NPP V DET NC PP P+D NP
J J J J / \ J I \
Pohlmann lancera les demandesP NP au NC PP
J J J / \
de NC mois P NP
J J J
perrnis_de_const'ruire de NC
J
janvier
«T TEXT txt
SENT s PONCT s\txt
/ J
SENT s PP-MOD s\s . s\ txt
NP-SUJ N‘ \ P+D ( \ );/ NP
up up 5 s s n n
J ./ \. J / \
NP up VN (np\s)/up NP-OBJ up au (s\s)/n NC n PP n\n
J J 1/ \; J / \
NPP up V (np\s)/up DET up/n NP n mois n P (n\n)/n NP n
J J J X \. J J
Pohlmann up lancera (np\s)/up les up/n NC n PP n\n de (n\n)/n NC 1:
J / \. J
demandes n P (n\n)/n NP n janvier n
J J
de (n\n)/n NC 11
J

pen-n1's_de_construire n

FIGURE 5 — Arbre d’entrée et de sorﬁe du transducteur correspondant ‘a la phrase "Pho1mann
lancera les demandes de permis de construire au mois de janvier.".

S 1e symbole initial. On choisira, en fonction de la passe de pré-traitement, 'IXT :txt ou txt.
R 1’ensemb1e des régles.

L’a1gorithme utilisé pour extraire 1a grammaire consiste a parcourir les arbres donnés en pa-
rametre et stocker les regles de dérivation que l’on rencontre. On considere qu’une regle de
dérivation est constituée d’une racine et d’un ou deux ﬁls :

La racine a deux ﬁls : On est dans le cas de ﬁgure classique d’une regle d’é1imination a droite
on a gauche (a —> a/b b on a —> b a\b).

La racine a un seul ﬁls : I1 y a simplement transmission de type au ﬁls. Ce cas de ﬁgure apparait,
par exemple, 1orsqu’un groupe nominal est composé uniquement d’un nom propre, ou
encore 1orsqu’on est au niveau du noeud pré-terminal, c’est ‘a dire 1’ét1'quette de partie du
discours (POS-tag) de la feuille. Dans ce cas, 1a feuille héritera directement du type du
POS-tag.

Chaque régle est accompagnée d’un compteur et les probabilités sur les régles sont calculées par
groupe ayant la méme racine. On récupere aussi des inforrnations de profondeur minimale et
maximale d’appariu'on de la régle, cependant elles ne sont pas utilisées pour 1’instant.

209

Ainsi, on résume dans le tableau 1 les différentes grammaires que peut générer l’extracteur4
.Chacune des versions montre un intérét : autant la premiere, extraite des arbres juste apres
transduction, garde les informations syntaxiques données par le corpus; autant les suivantes sont
plus utiles pour appliquer un algorithme d’analyse de phrases, tel que CYK (voir section 4), sur
des phrases non typées. Le tableau 2 montre des extraits des différentes grammaires en fonction
des arbres donnés en entrée.

F01-me des arbres Régles extraites Spéciﬁoations Nombre de 1-égles
Arbres de dérivation n1 —> n2 n3 Facilement nonnalisable 63368
bmts n1 —> nz en FNC : 11 sufﬁt.
n1 —> t1 d’enlever les chaines
unaires

Retrait des chaines n1 —> n2 n3 La grammahe est en 59505
unaires et des labels n1 —> t1 FNC

sauf les POS—tag '

Retrait de tous les labels n1 —> n2 n3 Les mots n’apparaissent 3494
et des chaines unaires. 11 plus, ce qui laisse uni-

n’y a plus de difference quement le squelette des

entre N et T. arbres.

TABLE 1 — Grammaires extraites en fonction des arbres de dérivation donnés en entrée. On précise
que n,-EN et ti eT.

Arbres de dérivation bruts
NP :np —> NPP :np 1.01x10’1
Exemple de regles NP :np —> DE1" :np/n NC :n 2.02x10’1
Retrait des chaines unaires et des labels sauf les POS—tag
(np\s,<)/(np\sP) —> VINF :(np\s,<)/(np\sI,) 9.53x10’1
Exemple de regles (np\s)/(np\sI,) —> CLR :cl, cl,\((np\s)/(np\sI,)) 2.88x10”2
Retrait de tous les labels et des chaines unaires
s —> rip np\s 3, 81x10”1
5 —> s s\s 2, 65x10’1
5 —> np\sI, (np\sP)\s 1, 13x10’3
n —> n n\n 7, 97x10”1
Exemple de regles rip —> rip/n n 8, 02x10’1

TABLE 2 — Exemples des différentes régles que l’on peut extraire des arbres.

4 Analyse de phrases

La question de l’analyse de phrases en fonction d’une grammaire PCFG se subdivise en deux
problemes. En effet, il faut d’une part trouver les types des mots et d’autre part que les regles

4. Les POS—tags sont les étiquettes de panies du discours.

210

existent dans la grammaire passée en paramétre 5 l’analyseur.

4.1 Typages des mots

En réunissant les feuilles des arbres de dérivation, nous pouvons collecter un lexique contenant
les mots, leur occurrence, les types de ceux-ci et la probabilité du type (nb_occurrences_du_type/
nb_occurrences_du_mot). Cependant, nous n’utilisons pas encore le lexique pour typer les phrases
que nous analysons. Il faudrait pourtant sélectionner les types apparaissant le plus souvent et
les lier aux mots. Cette technique n’assurerait pas l’analyse systématique de la phrase, car si le
type nécessaire fait partie de ceux écartés, une phrase juste pourrait ne pas avoir d’analyse. Nous
avons pris le parti de typer les mots soit en utilisant le Supertagger ((Moot, 2010a,b)), soit en
utilisant les phrases typées ‘a la sortie du transducteur. La premiere méthode nous permet ‘a la
fois de valider les types donnés aux mots par le Supertagger et d’analyser des phrases dont les
mots n’apparaissent pas dans le corpus de Paris VII, tandis que la seconde méthode nous permet
de tester nos différentes grammaires en fonction des arbres de dérivation. On peut aussi utiliser
un typage plus manuel, qui utilise le Supertagger pour effectuer une premiere passe de typage et
qui permet ensuite 5 l’ut1'lisateur de modiﬁer 21 loisir les types proposés.

4.2 Analyse des phrases typées

Pour l’algorithme de reconstruction des phrases, nous avons décidé d’utiliser l’algorithme CYK
(Younger, 1967; Knuth, 1997; Hopcroft et Ullman, 1979) et d’en implémenter une version
probabiliste : en effet, étant donné que cet algorithme a déja été testé et est une référence, il
nous a permis de tester l’efﬁcacité de notre grammaire sans avoir 21 s’inquiéter de l’efﬁcacité de
l’algorithme. D’autres algorithmes auraient pu étre utilisés, tel que celui d’Earley (Earley, 1973),
cependant CY K demandait en entrée une grammaire trés proche de celle que nous obtenions
aprés ex1Iaction. De plus, l’ajout de l’aspect probabiliste était trivial sur cet algorithme. La seule
modiﬁcation que nous avons effectuée était de retirer la phase de typage des mots, initialement
effectuée par CYK grace aux régles de type n1 —> tr. Nous avons donc pu donc utiliser la
grammaire la plus simple, de 3494 régles, pour analyser les phrases. Le premier test effectué,
pour savoir si l’algorithme fonctionnait correctement, a été d’analyser les phrases extraites des
arbres de dérivation avec les régles provenant de ces mémes arbres. Nous avons ensuite pu tester
l’analyse avec des phrases typées par le Supertagger ou notre transducteur et des grammaires
extraites soit du corpus de 12351 phrases, soit du corpus de phrases laissées de coté (cf section
6).

Les arbres de dérivation correspondants aux phrases "Pourtant tout n’est pas gagné." et "Ce
procés gagné donne au Crédit Lyonnais les coudées franches pour gérer MGM" sont montrés
dans la ﬁgure 6 et 7. A chaque fois, on a pris les deux arbres les plus probables, typés par
le Supertagger et les phrases ont été analysées avec la méme grammaire et l’algorithme CYK.
Deux informations sont intéressantes pour choisir quel est le meilleur arbre de dérivation sur
les phrases : on regarde ‘a la fois la complexité des types et la probabilité. Cependant, nous
sommes conscient qu’il est complexe de comparer deux arbres qui n’ont ni la méme structure,
ni les mémes feuilles. La préférence que l’on porte ‘a un résultat sera fortement dépendante
des critéres de sélection donnés. Ainsi, sur la ﬁgure 6, on remarque que les deux arbres ont la
méme probabilité, cependant nous sélectionnons celui qui a l’indexation la plus faible pendant

211

l’exécution de CYK. Sur la seconde phrase (ﬁgure 7), c’est majoritairement l’attachement du
groupe prépositionnel ﬁnal qui modiﬁe la forme de l’arbre. L’attachement de la préposition a un
groupe nominal est plus représentatif du corpus d’origine (voir section 5) .

Ext
/ \ \
s . s txt
/ \
Tout np np\s
/ \

n’(np\s)/(np\s) np\s

I \
e5t(np\s)/(n\n) n\n
/ \

poummt (n\n)/(n\n) n\n
/ \
pas (n\n)/(n\n)gasne' n\n
Ext
/ \ \
S . S [XE
/ \
(np\s)/(n\n) n\n
(np\s)/(n\K powfant((np\s)/(n\n))\((np\s)/(n\n)) pa-9 (n\n)/(n\n) 3113116’ n\n

H’ ((np\s)/(n\n))/((np\s)/(n\n)) est (np\s)/(n\n)

FIGURE 6 — Le premier arbre est généré avec le typage du transducteur et a une probabilité de
9, 6x10‘°5 et le second est typé avec le Supertagger, avec une probabilité de 1, 9x10‘°5

5 Analyse des prépositions

Nous allons nous focaliser sur l’analyse des syntagmes prépositionnels (PP, PP-MOD, PP-OBJ
etc.) et de l’attachement par rapport ‘a la phrase. Dans un premier temps, nous étudierons
l’attachement des groupes prépositionnels dans le corpus d’origine, puis nous nous focaliserons
sur les types des prépositions, via le transducteur et le Supertagger pour enﬁn nous pencher sur
l’attachement dans les arbres de dérivaﬁon générés via l’algorithme CYK.

5.1 Attachement dans le corpus

Les groupes prépositionnels sont particuliérement nombreux dans le corpus (49039 occurrences).

Comme nous pouvons le voir dans le tableau 3, ils sont majoritairement étiquetés PP. Leur
attachement de départ dans le corpus est aussi particuliérement important, car c’est celui-ci qui
déﬁnira le type de la préposition. Le tableau 4 résume la répartition des syntagmes prépositionnels
dans le corpus, en fonction de leur parent. En effet, la transduction aura tendance a donner un

type aux syntagmes prépositionnels qui correspond ‘a leur place dans la structure de la phrase.

212

txt

/ \
"P 7lP\5
I \4 42 my
C8 npln 11 (rur\:)/up up
.I \ / \ / \.
pracés n gag-ne’ n\n da1me(np\:)/var ((np\s)/np)\{{np\s)/raw) 185 npln 11
7l\
\ /

au (({np\s)/np)\((np\s)/7111))/n Cre’dir_Lyar-nais n n n
/ \
caudées n [ranches n\n pour {n\n)/{n\n) n\n
I

gérer (n\n)/up MGM up

‘  \"/sup‘

3 W \ ‘J npxs ﬁr)/rm) I ‘L as‘
Ce up/n K n‘ K (ms)/up ‘ / up K gerer ms)/up MGM up
Pmcés n game’ n\n damn: (ms)/up (runs)/np)\((np\s)/up) les up/n n
k an I SA
au {{{np\.i)/n.p)\{{np\5)/np))/n Cra'dit_Lyanna1's n caudées n franches n\».

FIGURE 7 — Probabilité du premier arbre : 2, 2x 10‘°9. Probabilité du second arbre : 1, 5x10‘°9.

Ainsi, dans un groupe nominal, le PP aura plus souvent le type n\n, alors qu’au milieu d’une
phrase le typage sera plus complexe. Lors de la transduction, on ne change pas l’ordre des mots,
mais quelques fois leur attachement au sein de la structure. Cependant, on peut dire que les
groupes prépositionnels ne bougent pas, sauf s’ils sont a l’extérieur d’un noyau verbal et que
celui-ci se termine par un VPP, auquel cas on lie plus spéciﬁquement le participe passé au groupe
prépositionnel, comme on peut voir ﬁgure 4.

Label occurrence Label occurrence Label occurrence
PP 32023 PP—M OD 11899 PP—DE_OBJ 1668
PP—A_OBJ 1565 PP—P_OBJ 1389 PP—ATS 323

PP—OBJ 130 PP-ATO 30 PP—SUJ 12

TABLE 3 — Distribution des groupes prépositionnels en fonction de leur label.

5.2 Typage des syntagmes prépositionnels

Pour étudier le typage, nous nous sommes focalisés sur les groupes prépositionnels dont, bien
sur, la transduction avait réussi. Cela fait tomber le nombre de syntagmes prépositionnels ‘a
45351 (92, 5% du total). Les quatre familles de types les plus donnés (au dessus de 2000 fois)
par le transducteur sont résumés dans le tableau 5. H5 couvrent 92, 2% des types que l’on peut
trouver pour des prépositions. Les types restants, marginaux, correspondent, par exemple, a un
syntagme prépositionnel contenant uniquement un pronom relatif, qui prend en argument une

213

Syntagme parent occurrence Label le plus courant pourcentage
Syntagme Nominal 24817 PP 99, 2%
Phrase complete 8478 PP—MOD 72, 2%
Proposition rel. on sub. 3833 PP—MOD 57, 9%
Proposition participiale 3552 PP 80, 1%
Proposition inﬁnitive 3190 PP—MOD 63, 5%
Syntagme prépositionnel 843 PP 89, 2%
Noyau verbal 45 PP 88, 9%

TABLE 4 — Distribution des groupes prépositionnels en fonction de leurs parents. On remarque
que les groupes nominaux sont ceux qui regroupent le plus de PP , c’est a dire presque la moitié.

subordonnée.

Le typage effectué avant l’analyse via CYK, avec le Supertagger, nous permet de régler la précision
que l’on souhaite sur les types : en effet, on peut régler le paramétre /3, qui déterminera le nombre
de types possibles autorisés par mot. On gardera alors les types ayant une probabilité supérieure
ou égale a /3 fois la plus grande probabilité trouvée 5. Le tableau 6 résume la justesse des types
donnés aux prépositions en fonction de )3. On remarque que ce sont des mots difﬁciles a typer,
étant donné que les résultats sont inférieurs aux résultats globaux, bien que les adverbes et les
verbes soient encore plus complexes a typer de maniére exacte.

Il faut cependant noter qu’il n’est pas nécessaire d’avoir une formule correcte pour que l’attache-
ment du syntagme prépositionnel dans la phrase soit correct.

Famﬂle de type occurrence
n\n ou np\np ou n\np 23901

a\a (ex. s\s) 8548

pp ou pp,, ou ppde 6486

a/a (ex. s/s) 2882

TABLE 5 — Les quatre familles de types les plus courants correspondent ‘a un modiﬁcateur de
groupe nominal, un groupe prépositionnel généralement argument d’un groupe verbal et des
modiﬁcateurs de phrase, placés au début ou a la ﬁn de la phrase.

fl pertinence des types pertinence globale
1.0 61, 0% 76, 9%
0.1 83, 1% 87, 0%
0.05 86, 2% 88, 9%
0.01 90, 2% 91, 7%

TABLE 6 — Justesse du typage via le Supertagger.

5. Plus :3 est petit, plus il y a de types proposés et plus on a de chance de trouver le type qui se combinera avec ceux
des autres mots.

214

5.3 Attachement des syntagmes prépositionnels dans les arbres reconsti-
tués

Pour cette partie, nous nous sommes focalisés sur 55 PP, que nous avons sélectionnés dans le
corpus d’origine, de maniére a respecter le ratio présenté dans le tableau 3. Cela correspond a 21
phrases, dont l’analyse a réussi. Nous avons généré les types possibles avec /3 = 0.05. Ensuite,
nous avons étudié la différence de types donnés aux prépositions ainsi que leur attachement.
On remarque, dans le tableau 7, que les syntagmes prépositionnels liés aux groupes nominaux
sont attachés sensiblement au méme endroit. On note une différence faible entre les groupes
prépositionnels qui seront arguments d’un verbe, un peu plus importante entre les modiﬁcateurs
globaux qui agissent sur toute la phrase. Il y a 4 cas, dans les arbres régénérés via CYK, o1‘1
l’algorithme a jugé plus peninent de préférer le type n ou np pour le syntagme prépositionnel
("On ne porte pas impunément atteinte (‘I des tabous."), alors qu’on s’attend plutét a une analyse
qui lierait "atteinte" et "a" et qui prendrait en argument le groupe nominal "des tabous" 5.

On peut dire que le typage et l’attachement des syntagmes prépositionnels semblent cohérents
avec l’attachement présent dans le corpus d’origine, ainsi que le typage effectué par le transduc-
teur. Cependant, pour pouvoir l’afﬁrmer, il faudrait faire des tests plus poussés, qui prendraient
en compte la totalité du corpus.

Type occurrence aprés transduction occurrence aprés CYK
pp, P134. 011 PPa 6 3
Modiﬁcateur de NP 35 37
Modiﬁcateur de SENT 9 4

rip 0 4
Modiﬁcateur autre 5 7

TABLE 7 — Typage des prépositions dans le cadre d’une transduction comparées a celui effectué via
le Supertagger avant reconstitution des arbres de dérivation avec CYK. Les modiﬁcateurs autres
sont des modiﬁcateurs de proposition inﬁnitive ou de syntagme adjectivaux.

Le typage, cependant, n’est pas entierement lié ‘a l’attachement dans la phrase. Nous avons
comparé l’attachement des syntagmes prépositionnels et nous pouvons dire que, sur les 55 cas, il
y en a 37 placés de maniere identique et 18 non, soit 67, 3% de ressemblance. Les différences
majeures sont au niveau des prépositions qui sont plus souvent attachées aux groupes nominaux
et argument des noyaux verbaux (ceux-ci peuvent alors prendre le type np plutét que pp).

6 Evaluation et résultats

L’évaluation des différentes méthodes a été effectuée avec différents ensembles de données. Pour

tester la totalité de nos travaux, nous avons utilisé le corpus de Paris VII dans son intégralité,

c’est a dire :

— Les 12351 phrases parenthésées que nous avons étudiées en profondeur pour fonder l’ensemble
de régles de notre transducteur, que nous appellerons corpus principal.

6. L’ana1yse CYK fait ressortir1’aspect idiomatique de "potter atteinte E1".

215

— Les 504 phrases qui n’existaient pas sous forme parenthésée. Ce corpus annexe a été adapté

pour étre sous forme parenthésée et pour que les étiquettes soient celles utilisées par les régles.
Quel que soit le corpus utilisé, on parlera d’un corpus partiel pour dénoter le fragment dont
la transduction a réussi. Les grammaires extraites des arbres de dérivation, donc des corpus
partiels, auront le méme nom que le corpus dont elles sont extraites, soit grammaire principale
et grammaire annexe. L’évaluation du transducteur et de l’analyseur de phrases se mesure en
pourcentage de phrases sur lesquelles l’opérau'on a réussi. Dans le cadre du transducteur, cette
notion correspond a la transformation des arbres syntaxiques en arbres de dérivation et dans le
cadre de l’analyseur, elle correspond a la réussite de la combinaison des types donnés aux mots
par le Supertagger.

6. 1 Transducteur

Le transducteur transforme pour l’instant, avec 1671 regles, 92, 6% du corpus principal (soit
11447 phrases) et 87, 3% du corpus annexe (404 phrases) en arbres de dérivation d’une gram-
maire AB. On peut résumer l’utilisation des regles, dans le cadre de la transduction du corpus
principal, dans le tableau 8. On remarque que, bien qu’il y ait de nombreuses regles qui sont
utilisées peu de fois, elles ont un poids faible sur la totalité des transductions effectuées. Les régles
les plus importantes sont exprimées dans le tableau 9, sous forme parenthésée telle qu’utilisée
dans la syntaxe de Tregex (Levy et Andrew, 2006). La derniére régle, gérant la ponctuation ﬁnale,
n’est pas utilisée autant de fois qu’il y a d’arbres de dérivation. Cela vient du fait que nous avons
souhaité traiter différemment les phrases comprenant uniquement un groupe nominal et que
certaines phrases, tels les titres d’articles, n’ont pas de ponctuation ﬁnale. De méme, la régle qui
s’occupe du determinant au début d’un nom commun devrait étre employée plus que ca, vu le
nombre de groupes nominaux du corpus. Cependant, une régle prioritaire s’occupe du cas ou le
groupe nominal est composé d’un déterminant et d’un nom commun et est appelée 8892 fois.

Nombre de régles Occurrence minimale et maximale nombre d’applications
1148 entre 1 et 20 005818
303 entre 21 et 100 014174
170 entre 101 et 1000 054266
41 entre 1001 et 10000 125405
4 supérieur 2: 10000 060779

TABLE 8 — Récapitulatif de l’ut1'lisation des régles.

motif de départ motif d’an'ivée nombre d’applications
(NP:*NC PP) (NP:*NC:nPP:n\*) 17767
(NP :* DE1" tree) (NP :* DET:np/n NP :n) 16232
(PP:*P NP) (PP:*P:*/rip NP .-np) 16037
(SENT tree PONC1" ) (TEXT ztxt SENT :s PONC1" :s\ txt ) 10819
(NP:* tree (COORD CCNP)) (NP:*(:*NP:*
(COORD :*\*CC:(*\*)/npNP:np))) 2511
(SENT :* NP—SUJ VN NP—OBJ) (SENT :* NP—SUJ :np
( :np\ * VN :(np\ *)/rip NP—OBJ :np)) 1820

TABLE 9 — Quelques régles du transducteur, dont les quatre régles les plus utilisées.

216

Les arbres de dérivation des deux corpus nous perrnettent d’extraire deux grammaires, sur
lesquelles les tests d’analyse que nous avons effectués seront détaillés dans la partie suivante 6.2.
En addition des grammaires, nous pouvons créer un lexique, contenant les mots et les différents
types qui leur sont associés en fonction des transductions. Le lexique correspondant au corpus
principal contient 26765 mots sur les 27589 présents, il couvre donc 96, 9% du vocabulaire
présent dans le corpus de Paris VII.

6.2 Analyse de phrases

Nous avons effectué de nombreux tests avec notre analyseur de phrases. En effet, nous avons
utilisé les deux grammaires différentes et nous avions ‘a disposition des phrases typées par le
transducteur ou par le Supertagger, avec /3 = 0.01.

Grace au Supertagger, nous avons pu analyser aussi bien les phrases venant du transducteur que
les phrases laissées de c6té. Les résultats sont regroupés dans la table 10. On remarque que les
résultats sont proportionnellement moins bons, mais que certaines phrases venant de la partie
non traitée des différents corpus sont analysées et transformées en arbre de dérivation.

01-igine des phrases Phrases analysées Grammaire uﬁlisée Rsésultat

Transductem Corpus principal partiel Grammaire annexe 54, 4%
Corpus annexe partrel Grammarre principale 85%
Corpus principal grammaire principale 89, 38%

supemgger Corpus annexe grammaire principale 83, 1%

TABLE 10 — Tableau de résultat.

7 Conclusion et perspectives

Dans cet article, nous avons rapidement rappelé le principe du G-transducteur dont nous nous
servons pour transformer les arbres syntaxiques du corpus de Paris VII en arbres de dérivation
d’une grammaire AB, puis expliqué la méthode que nous employons pour extraire une PCFG de
ces arbres. Les résultats expérimentaux d’analyse de phrase via l’algorithme CYK, en utilisant
notre PCFG et des phrases typées au préalable, nous perrnettent de comparer les annotations
produites par le transducteur et la méthode semi-automatique mise en place par Moot.

Cependant, ce travail est loin d’étre terminé et nous avons encore plusieurs perspectives a étudier.
Bien sﬁr, nous souhaitons améliorer la couverture du transducteur par rapport au corpus et
dépasser les 95% de phrases analysées, bien qu’il ne reste plus que des cas complexes ‘a traiter.
Etant donné que les grammaires AB peuvent sembler limitatives lorsque l’on souhaite traiter
d’une langue complexe, nous souhaiterions transformer notre transducteur en un transducteur
d’arbres vers les graphes. Cela nous permettrait d’utiliser l’ensemble des regles de Lambek et
de nous rapprocher de travaux plus modernes sur la question. Par rapport ‘a l’analyseur de
phrase, il manque cruellement d’un typage relatif au lexique que nous extrayons des arbres de
dérivation. Cette méthode de typage devrait étre implémentée rapidement. De méme, il pourrait
étre intéressant d’utiliser d’autres algorithmes que CYK, tel que l’algorithme d’Earley, ou de typer
les phrases en utilisant un systéme tel que SYGFRAN (Chauché, 201 1).

217

Notre travail est disponible a (Sandillon-Rezer, 2012), sous licence GNU General Public Licence.

Références

ABEILLE, A. et CLEMENT, L. (2003). Annotation morpho-syntaxique.

ABEILLE, A., CLEMENT, L. et ToUssENEL, E (2003). Building a treebank for french. Treebanks,
Kluwer, Dordrecht.

BUszKowsKI, W. et PENN, G. (1990). Categorial grammars determined from linguistic data by
uniﬁcation. Studia Logica, 49(4) :431454.

CHAUCHE, J. (2011). Une application de la grammaire structurelle : I.’analyseur syntaxique du
francais sygfran.

CoMoN, H., DAUCHET, M., GILLERON, R., LODING, C., JACQUEMARD, E, LUGIEZ, D., TIsoN, S.
et ToMMAs1, M. (2007). Tree automata techniques and applications. Available on : http:
//www. grappa.univ— 1i11e3 . fr/tata. release October, 12th 2007.

EARLEY, J. (1973). An efﬁcient context-free parsing algorithm.

HOCKENMAIER, J. et STEEDMAN, M. (2007). CCGbank : a corpus of CCG derivations and depen-
dency structures extracted from the penn treebank. Computational Linguistics, page 355-396.

HOPCROFT, J. E. et ULLMAN, J. D. (1979). Introduction to Automata Theory, Languages, and
Computation. Adison-Wesley Publishing Company, Reading, Massachusets, USA.

KANAZAWA, M. (1998). Learnable Classes of Categorial Grammars. Center for the Study of
language and Information, Stanford University.

KNIGHT, K. et GRAEHL, J. (2005). An overview of probabilistic tree transducers for natural
language processing.

KNUTH, D. E. (1997). The Art of Computer Programming Volume 2 : Seminumerical Algorithms
(3rd ed. ). Adison-Wesley Professional.

LAMBEK, J. (1958). The mathematics of sentence structure. The American Mathematical Monthly,
65(3).

LEVY, R. et ANDREW, G. (2006). Tregex and tsurgeon : tools for querying and manipulating tree
data structures.

MOORTGAT, M. et MooT, R. (2001). CGN to Grail : Extracting a type-logical lexicon from the
CGN annotation. In DAELEMANs, W., éditeur : Proceedings of Computational Linguistics in the
Netherlands CLIN 2000.

MooT, R. (2010a). Automated extraction of type-logical supertags from the spoken dutch
corpus. Complexity of Lexical Descriptions and its Relevance to Natural Language Processing : A
Supertagging Approach.

MooT, R. (2010b). Semi-automated extraction of a wide-coverage type-logical grammar for
french. Proceedings TALN 2010, Monreal.

SANDILLON-REZER, N. (2012). Syntab : http ://www.labri.fr/perso/nfsr/.

SANDILLON-REZER, N.-E et MooT, R. (2011). Using tree tranducers for grammatical inference.
Proceedings of Logical Aspects of Computational Linguistics 201 1.

YOUNGER, D. (1967). Context free grammar processing in n3.

218

