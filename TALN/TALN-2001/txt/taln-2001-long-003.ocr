TALN 2001, Tours, 2-5 juillet 2001

Aides Ea Panalyse pour la construction de banque
d’arbres :
étude de l’effort

Nicolas AUCLERC & Yves LEPAGE
{nicolas.auclerc, yves.lepage}@slt.atr.co.jp

ATR E“$§%ni%1§E)f7”1'3FJf

Résumé — Abstract

La construction de banque d’arbres est une entreprise lourde qui prend du temps. Pour
faciliter cette construction, nous Voyons la construction de banques d’arbres comme une
série d’opérations d’édition et de recherche. Le but de cet article est d’estimer l’effort,
en nombre d’opérations d’éditions, nécessaire pour ajouter une nouvelle phrase dans la
banque d’arbres. Nous avons proposé un outil, Boardedit, qui inclut un éditeur d’arbres et
des aides a l’analyse. Comme l’effort nécessaire dépend bien sur de la qualité des réponses
fournies par les aides a l’analyse, il peut etre Vue comme une mesure de la qualité de ces
aides. L’éditeur d’arbres restant indispensable a notre outil pendant l’expérience, les aides
a l’analyse seront donc toujours associées a l’éditeur d’arbres. Dans l’expérience proposée,
nous augmentons une banque d’arbres de 5 000 phrases par 1 553 nouvelles phrases. La
réduction obtenue est supérieure aux 4/5 de l’effort.

The construction of a treebank is a Very cumbersome and time—comsuming process. To
speed up this process, we see the process of building a treebank as a sequence of edition and
search operations. Our purpose is to assess the effort, measured by operations (cliks and
keystrokes), needed to augment a treebank. We have proposed a tool, Boardedit, which
incorporates a tree editor and parsing aids. However, the effort needed will depend on the
quality of the answer of the parsing aids, this can be seen as a measure of the quality of
the parsing aids. Our tree editor is essential for our tools during this experiment, parsing
aids will be always used with the tree editor. In the experiment, we augment a tree—bank
of 5 000 sentences with 1 553 new sentences. We show that the reduction in the number
of operations is more than 4/5 of the effort.

Mot Clés — Keywords

Banque d’arbres, analogie, filtrage tolérant, éditeur d’arbres, mesure de l’effort.

Treebank, analogy, approximate matching, tree editor, tree—banking assessment.

Nicolas Auclerc, Yves Lepage

1 Introduction

Une banque d’arbres est un corpus dans lequel chaque phrase se Voit associer une descrip-
tion linguistique, c’est—a—dire un arbre. L’interet de ces banques est indeniable comme
ressources linguistiques, et les approches d’analyse statistique en ont un besoin cru-
cial. Une celebre banque d’arbres pour l’anglais est celle de l’uniVersite de Pennsyl-
Vanie (http://cis.upenn.edu). Notre laboratoire construit aussi des banques d’arbres pour
l’anglais, en collaboration avec l’uniVersite de Lancaster (Black et al. 96), pour le francais
et pour le Japonais. Nous Voyons la construction de banque d’arbres comme une serie
d’operations d’edition et de recherche. Nous avons propose un outil, Boardedit (Voir fig-
ure l), qui inclut un editeur d’arbres (Lepage & Auclerc 00) et des aides a l’analyse. Cet
article a pour but d’estimer l’e1°fort en nombre d’operations d’edition, et non en temps,
necessaire pour augmenter une banque d’arbres aVec cet outil. Comme cet effort depend
bien sur de la qualite des reponses fournies par les aides a l’analyse, il peut etre Vu comme
une mesure de la qualite de ces aides. Bien que l’editeur d’arbres soit historiquement
present, dans notre outil, avant les aides a l’analyse, il en reste indispensable. Dans un
premier temps, nous allons presenter ces deuX outils, puis nous passerons a l’eXperience.

2 Les aides Ea Panalyse

La construction de banques d’arbres est une entreprise lourde qui prend du temps. Differen-
tes techniques ont deja ete proposees pour la simpliﬁer. (Brants & Crocker 00) proposent
d’utiliser des mecanismes probalilistes dans les modeles de resolution de l’ambigui'te chez
l’homme pour creer des analyseurs stochastiques afin de transporter les performances
d’analyse linguistique, de l’homme, a un analyseur. (Black et al. 96) montrent que pen-
dant la construction de la banque d’arbres ATR—Lancaster, l’utilisation d’analyseurs pour
augmenter cette meme banque d’arbres, provoque un << un effet boule de neige >: plus
la banque d’arbres est importante, plus son extension est rapide et ﬁable. Dans notre
methode, nous utilisons aussi des techniques basees sur l’eXemple. Toutefois, nous uti-
lisons des aides a l’analyse et non des analyseurs. Dans un precedent article presentant
notre outil (Lepage & Ando 96), nous donnions, par ordre de complexite, trois methodes
de recherche associees a un editeur d’arbres. Les etapes suggerees, c’est—a—dire l’utilisation
des ces methodes de recherche pour la construction de banques d’arbres, se retrouvent
enumerees de facon differente ici, plus en adequation avec le souci de minimiser l’e1°fort
pour augmenter la banque d’arbres. Nous proposons donc les etapes suivantes:

1. Rechercher si la nouvelle phrase eXiste deja dans la banque d’arbres. Pour cela,
utiliser la methode de recherche par ﬁltrage eXacte. S’il n’y a pas de resultat, con-
tinuer.

2. Utiliser la completion par analogie (Lepage 99): cette methode est plus qu’une sim-
ple methode de recherche (elle repose sur l’analyse par l’analogie et construit un
candidat pour la nouvelle phrase a partir de la banque d’arbres.) Adapter l’arbre si
necessaire. S’il n’y a pas de resultat, continuer.

3. Rechercher une phrase similaire. Pour cela, utiliser la methode de recherche par
ﬁltrage tolerant. Si des resultats sont obtenus, adapter la structure associee pour
obtenir la nouvelle structure linguistique. S’il n’y a pas de resultat satisfaisant,
continuer.

Aides EL l’analyse pour la construction de banque d’arbres

4. Construire entierernent l’arbre EL la main EL partir de Zero .

 

+ U

 

*‘/L/’}"JL7’.=2>'Dd6EEU Lit,

 

Figure 1: une phrase en japonais et sa structure afﬁchee sous Boardedit

3 L’éditeur d’arbres

Toujours dans le souci de rninirniser l’e1°fort pour augrnenter la banque d’arbres, nous
avons du realiser un outil d’edition d’arbres dont le but est de faciliter la saisie d’arbres
linguistiques. Grace EL un parallele (en terrne d’operations et de fonctions) avec l’edition
de teXte, l’utilisateur n’a pas besoin de se farniliariser avec les fonctions d’editions, ce qui
rend l’utilisation de notre editeur d’arbres intuitive. De plus, cet editeur est econornique
dans le sens ou dessiner un arbre requiert rnoins d’operations que le saisir sous sa forrne pa-
renthesee. Les fonctionalites de base de notre editeur d’arbres ont dejEL ete presentees dans
un precedent article (Lepage & Ando 96). Nous nous lirniterons EL citer les fonctionnalites
dernontrant le parallele entre notre rnodele d’edition d’arbres et la forrne parenthesee.

3.1 Le modéle d’édition d’arbres

Dans notre rnodele d’edition, un noeud ne porte que son etiquette et aucune autre infor-
mation. De ceci decoule un parallele entre d’un cote les noeuds et les sous—arbres et de
l’autre les rnots et les lignes (Voir tableau 1). De cette facon, toutes les fonctions d’edition
(clic de souris, selection, insertion, copier, coller, etc.) pour les arbres auront le meme
cornporternent que sous un editeur de teXtes.

Bien que le parallele rnontre clairernent qu’un noeud est different d’une etiquette, cette
distinction n’est pas intuitive pour un utilisateur novice. Les gens assirnilent generalernent
une etiquette EL un noeud. Pour que notre editeur d’arbres reste intuitif, nous nous efforcons
de contredire le rnoins possible cette facon de penser.

Nicolas Auclerc, Yves Lepage

Tableau 1: parallele entre edition de teXtes et d’arbres

l arbre l texte l
etiquette mot
noeud —
s0us—arbre complet ligne

Nous distinguons trois moyens pour manipuler un arbre:

0 le clavier: le tableau 2 montre que chaque frappe de touche compte pour une

operation;

0 la souris: elle permet a l’utilisateur de créer de n0uVeauX noeuds en cliquant sur les
Zones sensiblesl et de sélectionner des noeuds ou des s0us—arbres complets en Vue

d’0pérati0ns comme le copier/coller ou le glisser/déplacer;

0 le presser—papier: il permet a l’utilisateur de dupliquer ou de transférer des sous-
arbres en deuX frappes de touche seulement (une pour le copier, une pour le coller.)

Tableau 2: equivalence entre fonctions d’éditi0n dans un arbre et dans un teXte

clic effet emplacement coﬁt
texte l arbre
simple (Zone sensible) curseur sur. . . — nouveau noeud 1
simple (une selection) glisser/déplacer teXte arbre 1
simple (un noeud) curseur sur. .. mot noeud 1
double (un noeud) sélectionne. . . le mot le noeud 2
triple (un noeud) sélectionne. . . la ligne le s0us—arbre complet 3
touche effet emplacement coﬁt
texte l arbre
<esp> crée . . . un mot un noeud frere droit 1
<ret> crée . . . une ligne un noeud ﬁls 1
<T> curseur sur. . . ligne au dessus noeud pere 1
<i> curseur sur. . . ligne au dessous premier noeud ﬁls 1

3.2 Le gain en utilisant l’éditeur d’arbres

La partie supérieure du tableau 3 montre les correspondances entre les touches listées dans
le tableau 2 et les séparateurs utilisés dans la forme parenthésée. Ceci montre clairement
que notre modele d’éditi0n suit le modele courant d’éditi0n de teXtes.

1Ces Zones sensibles permettent a l’utilisateur d’insérer un nouveau noeud en cliquant avec la souris.
Elles sont attachées a un noeud et divisées en quatre catégoriesz Zone pere, Zone frere droit, Zone frere

gauche et Zone ﬁls.

Aides a l’analyse pour la construction de banque d’arbres

Tableau 3: les opérations en correspondance avec les séparateurs

l séparateur l touche l
( <ret>
, <esp>
) <T>
l séparateur l clic l
l  l <simp1e clic> 1

ll en résulte qu’un arbre tel que A(B(C,D)),E sera saisi dans notre éditeur par un simple
remplacement des séparateurs par les touches associées comme le montre le tableau 4.
Ainsi, l’e1°fort pour saisir un arbre sous notre éditeur est le meme que pour saisir ce meme
arbre sous forme parenthésée sous un éditeur de teXtes. Toutefois, il ne nous est pas
nécessaire d’entrer au clavier les parentheses fermantes pour terminer l’arbre. En utilisant
un simple clic de souris, nous pouvons réduire le nombre de frappes de touche: n’importe
quelle sequence de parentheses fermantes suivie par une Virgule peut etre remplacée par
un simple clic de souris qui créera ainsi un nouveau noeud au bon endroit (Voir la partie
inférieure du tableau 3). L’arbre précédent pourra donc etre saisi de différentes facons
comme le montre le tableau 4. De cette maniere, le nombre d’opérations, c’est—a—dire
l’e1°fort, est simplement le nombre de noeuds pour créer la structure, plus le nombre total
de caracteres dans les étiquettes de noeuds.

Tableau 4: comparaison entre la forme parenthésée et la saisie sous l’éditeur d’arbres.

1 étape 11} 2 1314 1516 l7l8l9l10l11
forme parenthésée A ( B , C ( D ) ) , E
structure d’arbre A <ret> B <esp> C <ret> D <T> <T> <esp> E
coﬁt unitaire 1 1 1 1 1 1 1 1 1 1 1
coﬁt total 11
structure d’arbre A <ret> B <esp> C <ret> D <simp1e clic> E
coﬁt unitaire 1 1 1 1 1 1 1 1 1
coﬁt total 9

Dans tous les cas, saisir ou bien meme modiﬁer un arbre sous notre éditeur nécessite moins
d’e1°fort, mesuré par le nombre d’opérations (clics et frappes de touche), que de saisir ou
modiﬁer sa forme parenthésée sous un éditeur de teXtes.

Nicolas Auclerc, Yves Lepage

Tableau 5: caracteristiques des données de base et de l’ensemble de test

tailles moyenne j: ecart-type nombre de classes

min l max ou d’etiquettes 7E

phrases de la base 1 33 7.89 j: 3.61 201
arbres de la base 1 50 10.71 j: 5.77 208
phrases test 1 25 8.58 j: 3.85 133
arbres test 1 39 11.81 j: 6.25 141

4 Experiences

4.1 Les données

Dans cette experience, nous augmentons une banque d’arbres de 5 000 phrases (données
de base) par 1 553 nouvelles phrases (ensemble de test). Nos donnees proviennent de la
banque d’arbres ATR—NEC (Lepage & al. 98). Les phrases sont des dialogues en japonais
de reservation de chambres d’hotel. Les structures des arbres utilisent une representation
en dependance. Les caracteristiques de ces deuX ensembles de données ﬁgurent dans le
tableau 5.

Nous utilisons les etapes presentees dans la section 2 pour incorporer les 1 553 phrases a
la banque d’arbres. En realite, pour chacune de ces 1 553 phrases, nous connaissons deja
la stucture linguistique Voulue. En comparant ces structures avec les resultats obtenus
par la recherche par ﬁltrage eXacte, la completion par analogie et la recherche par ﬁl-
trage tolerant, nous pouvons mesurer l’e1°fort necessaire pour obtenir la structure eXacte
quantiﬁee par le nombre d’operations (clics et frappes de touche).

L’editeur d’arbres etant considere comme indispensable a notre outil, la methode proposee
ne sera pas etudiee sans son utilisation. L’eXperience ne comportera donc pas le cas ou
les aides a l’analyse sont associees a un simple editeur de teXtes pour estimer l’e1°fort.

4.2 Lignes de references

La premiere ligne de reference est obtenue en faisant comme si nous devions saisir, sous un
editeur de teXtes, la structure linguistique sous forme parenthesee de chacune des 1 553
phrases. Ceci nous couterait 88 394 frappes de touche (nombre total de caracteres des
etiquettes et des separateurs.) La deuxieme ligne de reference est obtenue en utilisant
notre editeur d’arbres. Si nous devions construire les structures linguistiques des 1 553
phrases a la main, ceci nous couterait 13 006 clics de souris pour dessiner la structure
et 41 789 frappes de touche pour saisir les etiquettes. Au total, cela represente 54 795
operations.

On Voit donc comme nous l’aVons dit ci—dessus, que l’utilisation de notre etiteur d’arbres

facilite la saisie. L’e1°fort est reduit de (88 394 — 54 795)/88 394 = 38%.

Aides EL l’analyse pour la construction de banque d’arbres

4.3 La méthode proposée avec les aides E1 l’analyse
4.3.1 Recherche par ﬁltrage exact

Dans un premier temps, nous utilisons la recherche par ﬁltrage exact. Sur les 1 553 phrases
(suites de classes morpho—syntaXiques), 493 etaient dejEL presentes dans la banque d’arbres.
Dans 465 cas, la methode nous donne une reponse eXacte, ce qui signiﬁe que nous avons,
des la premiere etape, sans la moindre operation EL effectuer, obtenue la structure lin-
guistique (0 operation). Dans les 28 cas restants, une structure differente nous est re-
tournee, due EL des choiX differents pour la representation des structures. Par eXemple, la
representation de << '3" <“VC’C“’3§ ii‘ J10 >> /sugu ni dekimasu yo/ (je peuX le faire tout de
suite) et celle de << 37§$VC% D $31310 > /san go sya ni arimasu yo/ (il se trouve dans
la Voiture 3) ne sont pas les memes, alors que les suites de classes morpho—syntaXiques
sont bien les memes: mais ‘§‘<“VC /sugu ni/ (tout de suite) est en fonction adverbiale
alors que 3%'$VC /san go sya ni/ (dans la Voiture 3) est un complement de lieu. Nous
avons calcule l’e1°fort necessaire si nous avions edite les 28 structures erronees. Cet effort
serait l’e1°fort necessaire pour modiﬁer EL la main ces structures erronees, en Vue de les
rendre identiques aux structures eXactes. Nous avons compte un total de 64 operations en
utilisant notre editeur d’arbres.

4.3.2 Completion par analogie

Dans les cas ou les phrases ne sont pas eXactement analysees par la recherche par ﬁltrage
eXacte (1553 — 465 : 1088 phrases), nous passons EL la technique de completion par
analogie.

Tableau 6: resultats de la completion par analogie

nombre de pourcentage

phrases
total 1 088 100%
analysées 701 100% 64%
exactement analysées 337 48% 30%

Les resultats de la completion par analogie2 sont compares avec les structures liguistiques
eXactes. Dans 64% des cas (701 phrases), nous obtenons au moins un candidat. Dans un
peu moins de la moitie des cas (337 phrases), une des structures linguistiques proposees est
eXacte, et il n’y a donc aucun effort d’edition EL faire. Toutefois, un parcours des resultats
est necessaire: dans le pire des cas, il coute 5 clics de souris. Au total, cela represente
337 X 5 = 1 685 operations.

Si nous desirons editer les structures proposees dans les 701-337 : 364 autres cas, l’e1°fort
necessaire est mesure par les distances d’editions entre arbres. En moyenne, nous obtenons
3,95 arbres proposes, ce qui implique que, dans le pire des cas, nous avons besoin de
3, 95 ><364 : 1438 clics pour parcourir les candidats afin de trouver la structure linguistique
la plus proche de la reponse eXacte. Nous comptons 1891 clics pour transformer le plus

2Nous ne prenons que les dix premiers resultats sortis. Nous aurions pu en prendre plus. Toutefois,
des experiences ont montre que cela n’aurait pas d’e1‘fets signiﬁcatifs (seulement 1% d’augmentation du
nombre de phrases exactement analysées, soit 9 phrases, quand on passe 10 EL 90 resultats sortis).

Nicolas Auclerc, Yves Lepage

proche candidat en la structure linguistique eXacte. Au total, ceci nous arnene a 1891 >< (1—|—

3, 21) : 7 961 opérations (clics et frappes de touche) pour effectuer les transforrnations3.

4.3.3 Recherche par ﬁltrage tolérant

Dans les cas ou les phrases ne sont pas exacternent analysées par la cornplétion par
analogie (1 088 — 337 : 751 phrases), nous utilisons la recherche par filtrage tolérant.
Cette rnéthode consiste a trouver les phrases les plus proches dans la banque d’arbres
(rappelons que nous recherchons des suites de classes rnorpho—syntaXiques, et non pas des
sequences de mots), et ensuite proposer les structures linguistiques des phrases trouvées.
En rnoyenne, les arbres proposés sont a une distance de 5,75 noeuds de l’arbre desiré. Au
total, la transforrnation des ces arbres nous couterait 4 319 opérations (clics et frappes de
touche.)

A cornparer aVec le chiffre précédent de 7 961 operations obtenu dans la section précédente,
ceci rnontre que, lorsque la cornplétion par analogie ne délivre pas d’analyse eXacte, il est
preferable d’utiliser la recherche par filtrage tolerant plutot que d’adapter a la main un
arbre proposé par cornplétion par analogie.

4.3.4 Construction de l’arbre $1 partir de zéro

Dans cette experience d’incorporation de 1 553 phrases nouvelles a une banque de 5000
arbres, nous n’aVons jarnais eu besoin de construire un arbre a partir de Zero car éditer
un arbre obtenu par filtrage tolerant est toujours plus rapide que recontruire tout l’arbre
a la main.

5 Synthese de Pexpérience

Nous avons synthétisé les résultats de cette experience en cornparant le nornbre d’opérations
(clics et frappes de touche) en trois groupes: en utilisant la rnéthode proposée (les aides

a l’analyse plus l’éditeur d’arbres), en utilisant un éditeur de teXtes pour saisir les arbres

sous forrne parenthésée (premiere ligne de référence) et en utilisant l’éditeur d’arbres seul

(deuxierne ligne référence). Ces résultats sont rassernblés dans le tableau 7. Nous avons

ajouté le nornbre de fois ou l’utilisateur doit cliquer sur les rnenus pour activer les aides

a l’analyse.

ll apparait clairernent que la rnéthode proposée dans la section 2 est extrernernent bénéfique.

Elle réduit l’effort, en nornbre d’opérations, par (54 795 — 10 663)/54 795 = 81% par rap-
port a l’utilisation de l’éditeur d’arbres seul. Cornparée aVec l’utilisation d’un éditeur
de teXtes pour saisir les forrnes parenthésées, cette rnéthode réduit l’effort de (88 394 —
10 663)/88 394 = 88%. Rappelons que l’utilisation de notre éditeur d’arbres seul réduit
l’effort de 38% (Voir la section 4.2) par rapport a l’utilisation d’un éditeur de teXtes pour
saisir les forrnes parenthésées.

6 Travaux futurs

Les précédent calculs prennent en cornpte le pire des cas a chaque utilisation des aides a
l’analyse. ll serait plus juste d’affiner les opération en terrne de suppressions, d’insertions et

3Un clic de souris pour positionner le curseur plus la taille nioyenne des noeuds en caracteres (3,21).

Aides a l’analyse pour la construction de banque d’arbres

Tableau 7: synthese des resultats

l méthode l nombre d’opérations l nombre de phrases
boutons du menu 3 X 1 553
ﬁltrage exact 0 465
complétion par analogie 1 685 337
ﬁltrage tolerant 4 319 751
méthode proposée (total) (total)
(aides a l’analyse et editeur d’arbres) 10 663 1 553
2éme ligne de reference
(editeur d’arbres) 54 795 1 553
lére ligne de reference
(editeur de textes) 88 394 1 553

de remplacements pour calculer l’e1°fort plus precisement. L’insertion est un clic de souris,
plus le nombre moyen de caracteres par noeud. Une supresion est un double—clic de souris
pour selectionner un noeud (ou un triple—clic pour selectionner un sous—arbre complet)
et la touche <de1>. Le remplacement compte pour un double—clic pour selectionner un
noeud (ou un triple—clic pour selectionner un sous—arbre complet), suivi par le nombre de
caracteres du noeud. Disons aussi que nous n’aVons pas utilise le presse—papier qui devrait
aussi reduire le nombre d’operations.

Dans cette experience, nous n’aVons pas pris en compte le temps que prend chaque
operation. On ne peut nier que le changement entre le clavier et la souris (et recipro-
quement) prend du temps. Ainsi, bien que nous prevoyions que la mesure du temps serait
en faveur de l’utilisation de la methode proposee, le fosse entre les differentes methodes
pourait etre reduit.

Dans le futur, nous Voulons integrer plus entre elles les aides a l’analyse. Un premier pas,
deja effectue, a consiste a incorporer la recherche par ﬁltrage eXacte dans la completion
par analogie. De cette facon, l’utilisateur n’a plus besoin de separer les deuX premi3<eres
etapes. Le deuxieme pas sera d’integrer la recherche par ﬁltrage tolerant apres l’echec de
la completion par analogie.

7 Conclusion

Pour accelerer la construction de banques d’arbres, nous avons propose un outil, un editeur
d’arbres avec des aides a l’analyse. Le souci de minimiser l’e1°fort pour augmenter la
banque d’arbres, nous a amene a proposer une methode comportant l’utilisation d’aides a
l’analyse et des etapes d’editions. Les aides a l’analyse ont pour but d’obtenir la structure
linguistique eXacte ou celle la plus proche. L’editeur d’arbres a pour but de reduire le
nombre d’operations (clics et frappes de touche) pour transformer le plus proche candidat
en la structure linguistique eXacte. Nous avons montre l’importance des reductions du
nombre d’operations necessaires a l’augmentation d’une banque d’arbres de 5 000 phrases
par 1 553 nouvelles phrases. Cette reduction est superieure aux 4/5 de l’e1°fort total.

Nicolas Auclerc, Yves Lepage

Références

Ezra BLACK, Stephen EUBANK, KASHIOKA Hideki, David MAGERMAN, Roger GARSIDE and
Geoffrey LEECH

Beyond Skeleton Parsing: Producing a Comprehensive Large—Scale General—English Treebank
with Full Grammatical Analysis

Proceedings of COLING—.96, Copenhagen, August 1996, pp. 107-112.

Yves LEPAGE & ANDo Shin-Ichi
Un éditeur pour la construction de banques d’arbres
Actes de TALN—.96, Marseille, mai 1996, pp. 104-111.

GOH Chooi Ling
Penyanting Papan (Board Editor)
Projek tahun akhir, Pusat Pengajian Sains Kornputer, Universiti Sains Malaysia, 1996.

Yves LEPAGE, ANDo Shin-Ichi, AKAMINE Susurnu, IIDA Hitoshi

An annotated corpus in Japanese using Tesniere’s structural syntax

AC'L—C'OLING Workshop on Processing of Dependency—Based Grammars, Montréal, August
1998, pp. 109—115.

Yves LEPAGE
Open Set Experiments with Direct Analysis by Analogy
Proceedings of NLPRS—.9.9, Beijing, November 1999, pp 363-368.

Thorsten BRANTS & Matthew CROCKER
Probabilistic Parsing and Psychological Plausibility
Proceedings of COLING 2000, vol 1, Saarbriicken, July-August 2000, pp. 111—117.

Yves LEPAGE & Nicolas AUCLERC

A tool to build a tree bank for conversational Chinese
Proceedings of ICSLP 2000, vol IV, Beijing, October 2000, pp. 985—988.

Thorsten BRANTS & Oliver PLAEHN

Interactive Corpus Annotation

Second International Conference on Language and Resources (LREC—2000), Athens, pp. 453-
459.

