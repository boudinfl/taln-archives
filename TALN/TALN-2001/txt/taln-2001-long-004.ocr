TALN 2001, Tours, 2-5 juillet 2001

Atelier ATOLL pour les grammaires d’arbres adjoints

Francois Barthelemyl, Pierre Boullierz, Philippe Deschampz,

Linda Kaouanez et Eric Villemonte de la Clergeriez
(1) CEDRIC - CNAM,

92 Rue St Martin - FR-75141 Paris Cedex 03
barthe@cnam.fr
(2) ATOLL - INRIA,

Domaine de Voluceau - BP 105 - 78153 Le Chesnay Cedex
Eric . De_La_Clergerie@ inria . fr

1 Resume — Abstract

Cet article presente 1’ environnement de travail que nous developpons au sein de 1’ equipe ATOLL
pour les grammaires d’arbres adjoints. Cet environnement comprend plusieurs outils et res-
sources fondes sur l’emploi du langage de balisage XML. Ce langage facilite la mise en forme
et l’echange de ressources linguistiques.

This paper presents the ATOLL Workbench for Tree Adjoining Grammars. This Workbench pro-
vides several tools and resources based on the use of the markup language XML which eases
the construction and the exchange of linguistic resources.

Mots-clefs : TAG, XML, Ressources linguistiques

2 Introduction

L’ equipe ATOLL se consacre a l’etude et la realisation d’outils pour le linguiste. Notre acti-
vite principale actuelle porte sur des analyseurs syntaxiques efﬁcaces pour divers formalismes
grammaticaux utilises dans le traitement de la langue naturelle. Les grammaires d’arbres ad-
joints (Tree Adjoining Grammars — TAG) representent un de ces formalismes, important sur
le plan linguistique mais aussi sur le plan informatique, car permettant la realisation d’analy-
seurs tabulaires efﬁcaces s’executant en temps polynomial et necessitant un espace en memoire
egalement polynomial.

Cependant, notre travail sur les TAG nous a fait prendre conscience du manque de standardisa-
tion des grammaires et de la difﬁculte d’utiliser certains des outils existants, en particulier lors
du traitement de grandes grammaires. Le systeme XTAG1 [The XTAG Research Group, 1995]
fournit un standard implicite, qui manque cependant de lisibilite et de speciﬁcations explicites.
Nous avons de plus rencontre differentes variantes de XTAG. Enﬁn, certaines des grammaires
etudiees presentent des problemes de coherence, dﬁs peut-étre a un manque d’outils pour la
gestion et le developpement des TAG.

Nous avons donc ete amenes a examiner le langage de deﬁnition des TAG et a reﬂechir a des
outils permettant d’exploiter une representation standardisee. Suivant d’autres, dont le groupe

lhttpz//www.cis.upenn.edu/~xtag/

F. Barthélemy, P. Boullier, P. Deschamp, L. Kaouane et E. V. de la Clergerie

LT XML2 et plus particulierement [Bonhomme and Lopez, 2000], nous avons conclu que le lan-
gage de balisage XML3 est un choix judicieux pour représenter les TAG. En premier lieu, l’uti-
lisation de DTD permet d’exprimer clairement la structure logique des grammaires. Ensuite,
le format XML est purement textuel, ce qui permet un échange facile de ressources linguis-
tiques entre environnements hétérogenes ainsi qu’une lecture immédiate par un humain. Enﬁn,
l’ensemble des outils pour le traitement de documents XML croit tres rapidement. Partant de
l’emploi de XML pour les grammaires, nous nous sommes aussi rendu compte de son intérét
pour stocker des résultats linguistiques comme, par exemple, les foréts de dérivation produites
par nos analyseurs.

Nous appuyant sur une représentation en XML, nous avons développé ou adapté plusieurs ou-
tils. Notre philosophie dans ce développement est de privilégier une approche modulaire plutot
que monolithique.

Apres un bref rappel sur les TAG (section 3), nous décrivons dans la section 4 les codiﬁcations
en XML des grammaires et des foréts de dérivation. Les outils de gestion et de conversion
s’appuyant sur ces codiﬁcations sont présentés dans la section 5. La section 6 passe en revue
nos analyseurs TAG et introduit un serveur d’analyseurs permettant un acces uniforme aux
analyseurs. Nous montrons dans la section 7 comment ce serveur est utilisé par une interface
permettant de visualiser dérivations et grammaires.

3 Grammaires d’arbres adjoints

Le formalisme des TAG [J oshi, 1987] est particulierement adapté a la description de nombreux
phénomenes linguistiques. Une TAG comprend un ensemble d ’arbres e’le’mentaires partitionné
en arbres initiaux et arbres auxiliaires. Les noeuds internes sont étiquetés par des non-terminaux
et les feuilles par des terminaux ou des non-terminaux. Chaque arbre auxiliaire B comporte une
feuille distinguée, appelée pied, possédant la meme étiquette que sa racine.

A

Racine

Adloncllon
T.

     

Arbre auxlllalre B

 

FIG. 1: Adjonction

Deux opérations servent a construire de nouveaux arbres a partir des arbres élémentaires. L’ ope-
ration de substitution remplace une feuille 1/ par un arbre initial dont la racine possede la meme
étiquette que 1/. L’opération d’adj0ncti0n est illustrée par la ﬁgure 1 : un arbre auxiliaire ﬂ dont
la racine est étiquetée par un non-terminal A peut s’adj oindre sur un noeud 1/ également étiqueté
par A; le sous-arbre de racine 1/ est ensuite greffé au pied de B.

Les TAG avec structures de traits (Feature TAG — F-TAG) étendent les TAG en autorisant l’at-
tachement sur chaque noeud d’une paire d’arguments «haut» et «bas», représentés par des
structures de traits.

Zhttp://www.ltg.ed.ac.uk/
3http://www.w3c.org/XML/

Atelier ATOLL pour les grammaires d’arbres adjoints

Les TAG lexicalisées (avec ou sans traits) imposent que chaque arbre élémentaire possede au
moins une feuille lexicale, c’est-a-dire étiquetée par un terminal. Cependant, une grammaire to-
talement et explicitement lexicalisée serait gigantesque, avec de nombreux arbres pour chaque
mot du langage. Le format XTAG permet de factoriser la description des grammaires et de
donner sufﬁsamment d’information pour lexicaliser a la demande des parties de la grammaire.
Les entrées morphologiques (ou formes ﬂéchies) regroupées dans un lexique morphologique
font reference a des entrées syntaxiques (ou lemmes) regroupées dans un lexique syntaxique.
Les lemmes font eux-meme reference a des familles de schémas d’arbres. Un schéma d’arbres
est simplement un arbre élémentaire avec une feuille distinguée appelée ancre, qui est rem-
placée lors de la lexicalisation par une forme ﬂéchie. Chaque reference (a un lemme ou a des
arbres) est éventuellement complétée par des contraintes additionnelles portant sur les argu-
ments de l’ancre ou des autres noeuds des schémas d’arbres ou portant sur la lexicalisation
d’autres feuilles (co-ancres) 4.

La ﬁgure 2 illustre ces différents composants sur un exemple issu d’une petite grammaire du
francais. Elle montre l’entrée morphologique pour donne, l’entrée syntaxique \DONNER\ et
le schéma d’arbres tnlpn2 utilisé pour construire l’arbre lexicalisé tn1pn2(donne) correspon-
dant au patron syntaxique (1). Le lemme stipule que le sujet NP0 et le complément d’objet in-
direct NP2 doivent étre humains et que NP2 doit étre introduit par la préposition £1 (co-ancrage).
Dans le schéma d’arbres tnlpn2, les noeuds de substitution sont indiqués par l et le noeud
ancre par <>.

(1) quelqu’un donne quelque chose fl quelqu’un

tnlpn2
donne: \DONNER\, V
{mode=ind,num=sing} 3/ \‘
\DONNER\,V: tnlpn2 [p_2=é] NP0 J, VP
{NP_0.t:restr=+hum, \\‘
NP_2 .t : restr=+hum} V NP1 J’ 
l / \
<>V P2 t NP2 t

FIG. 2: Schema d’arbre

4 Codiﬁcation en langage XML

4.1 Représentation des grammaires

Nous avons concu une DTD5 qui spéciﬁe clairement la structure logique des divers composants
d’une TAG. L’eXtrait suivant de la DTD stipule par exemple qu’une entrée morphologique est
introduite par une balise morph, est caractérisée par un champ lex servant de clé, et inclut
une ou plusieurs references a un lemme (lemmare f). On peut également lui adjoindre des
éléments de description (de s c) pour la documentation. De meme, un élément lemmare f est
caractérisé par ses champs name et cat, et peut étre complété par une structure de traits f s.

< I ELEMENT morph (desc*, lernmaref+) >

< I ATTLIST morph lex CDATA #REQUIRED>

< ! ELEMENT lernmaref (fs?) >

<!ATTLIST lernmaref name CDATA #REQUIRED
Cat CDATA #REQUIRED>

4En pratique, la distinction entre ancre et co-ancre n’est pas toujours trés nette.
Shttp://atoll.inria.fr/~clerger/tag.dtd,xml

F. Barthelemy, P. Boullier, P. Deschamp, L. Kaouane et E. V. de la Clergerie

En respectant cette DTD, les composants de la ﬁgure 2 sont decrits par le fragment de XML
suivant, en omettant les structures de traits pour des raisons de place et de simplicite.

<morph 1ex="donne">
<1emmaref cat=”v” name=”*DONNER*">
<fs>
<f name=”mode"><val>ind</val></f>
<f name=”num"><val>sing</val></f>
</fs>
</1emmaref>
</morph>
<1emma cat=”v” name=”*DONNER*">
<anchor tree_id="family[@name=tnlpn2]">
<coanchor node_id=”p_2"> <1ex>é</1ex> </coanchor>
<equation node_id=”np_0” type=”top">
<fs><f name=”restr"><val>p1ushum</va1></f></fs>
</equation>
<equation node_id=”np_2” type=”top">
<fs><f name=”restr"><val>p1ushum</va1></f></fs>
</equation>
</anchor>
</lemma>
<fami1y name=”tnlpn2">
<tree name=”tnlpn2">
<node cat="s” adj=”yes” type=”std">
<node cat=”np” id=”np_0” adj=”no” type=”subst" />
<node cat=”vp” adj=”yes” type=”std">
<node cat=”v” adj=”yes” type=”anchor" />
<node cat=”np” adj=”no” type=”subst" />
<node cat=”pp” adj=”yes” type=”std">
<node cat=”p” id=”p_2” adj=”no” type=”subst" />
<node cat=”np” id=”np_2” adj=”no” type=”subst" />
</node>
</node>
</node>
</tree>
</fami1y>

Pour l’instant, nous disposons sous cette forme XML d’une petite grammaire du francais (50 sche-
mas d’arbres, 117 lemmes et entrees morphologiques) et d’une grammaire de l’anglais (456 sche-
mas d’arbres, 333 lemmes et 507 entrees morphologiques). Nous sommes en train de convertir
d’autres grammaires plus importantes (pour le francais et l’anglais).

4.2 Code pour les dérivations

Pour une phrase non ambigiie, un analyseur syntaxique TAG retourne soit le resultat de l’ana-
lyse sous forme d’un arbre d’analyse, soit les etapes de l’analyse sous forme d’un arbre de
derivation. Ces deux possibilites sont illustrees pour la phrase (2) par les ﬁgures 3(a) et 3(b), la
ﬁgure 3(c) explicitant les arbres elementaires impliques. L’ arbre de derivation indique quelles
operations (substitutions et adj onctions) sont appliquees sur quels noeuds et quels arbres elemen-
taires sont utilises pour ce faire. Ainsi, l’arbre de la ﬁgure 3(b) signale par exemple l’adjonction
de l’arbre a(jo1i) sur le noeud NP1 (de npdn(1ivre)). Noter que les arbres d’analyse peuvent
se construire a partir des arbres de derivation, ce qui motive notre interet pour ces derniers.

(2) Yves donne un joli livre a Sabine

Dans le cas, tres frequent, d’ambigiiite, plusieurs ou meme une inﬁnite d’arbres de derivation
peuvent etre regroupes au sein d’une forét de taille polynomiale partageant les derivations,
equivalente formellement a une grammaire non contextuelle [Lang, 1991].

Atelier ATOLL pour les grammaires d’arbres adjoints

S subst so
/ \A tn1pn2(donne, :11)
NP VP X i \
i / / \ subst NP0 subst NP1 subst NP2
Yves V NP PP np(Yves) npdn(livre) np(Sabine)
J i / \ / \
d NP P NP
Onne / \ t ; subst D0 adj N0
N a Sabine d(un) a(j Oli)
uin A/ \N (b) Arbre de dérivation
i i
joli livre

(a) Arbre d’ana1yse

S tn1pn2(donne, £11)

\vP
/ // \PP

NP

I

f v NIH / \

I

i np(Yves) donne i 1: 

hip NiPnpdn(livre) Q E
Yves 13/ \N i ( )
np Sabine
: I \_ . NP
I 1 livre i,
' a(joli) N Sabine
Ii) d(un)
/ \
1 A N*
un t

(c) Arbres élémentaires

FIG. 3: Arbres d’ana1yse et de dérivation pour « Yves donne un joli livre a Sabine »

0p
i

derivl d€I'iV2 deriv3
nodel nodeg n0de3
i

oprefl 0pref2 0pref3

FIG. 4: Structure d’une forét partagée de dérivation

F. Barthélemy, P. Boullier, P. Deschamp, L. Kaouane et E. V. de la Clergerie

Cette remarque a guide notre conception d’une DTD6 pour représenter les foréts partagées de
dérivation. Cette DTD s’appuie sur les éléments principaux op, deriv et node ainsi que sur
l’élément opref permettant de référencer un élément op. L’ articulation de ces éléments est
donnée par la ﬁgure 4 :

op est identiﬁé par son attribut id et désigne une opération de substitution ou d’adjonction
sur une catégorie syntaxique (attribut cat) et couvrant une certaine portion de la chaine
d’entrée (attribut span). Un élément op indique également les valeurs des arguments
(éléments f s) relatives a l’opération.

deriv indique comment réaliser une opération avec un arbre lexicalisé donné par un schéma
d’arbres (attribut t ree) et une ancre (attribut anchor).

node spéciﬁe quelle opération op est effectuée sur un noeud d’un arbre élémentaire nommé
par l’attribut node_id.

Un arbre de dérivation peut s’exprimer de maniere enchassée en n’utilisant que les éléments
principaux op, deriv et node. Une forét partagée Va nécessiter l’emploi de opref pour
représenter les multiples occurrences d’une meme opération. Plus généralement, l’emploi de
opre f permet une description « plate » des foréts.

Ainsi, l’arbre de dérivation précédent s’exprime sous une forme plate par le fragment de XML
suivant (sans les structures de traits).

<forest parser="Small French TAG — Light DyALog — Hybrid Strategy">
<sentence> Yves donne un joli livre a Sabine </sentence>
<op cat="s” span=”0 7” id=”l” type=”subst">
<deriv tree="tnlpn2" anchor="donne">
<node id="p_2"><opref ref=”5" /></node>
<node id="np_0"><opref ref="2" /></node>
<node id="l"><opref ref="4" /></node>
<node id=”np_2”><opref ref=”6" /></node>
</deriv>
</op>
<op cat=”np” span=”0 1” id=”2” type=”subst">
<deriv tree=”np” anchor=”Yves" />
</op>
<op cat="np" span=”2 5” id=”4" type=”subst">
<deriv tree=”npdn” anchor=”livre">
<node id="n_"><opref ref="l0" /></node>
<node id="0"><opref ref=”8" /></node>
</deriv>
</op>
<op cat=”p” span=”5 6” id=”5” type=”subst”> <deriv tree=”p” anchor=”a” /> </op>
<op cat=”np” span=”6 7” id=”6” type=”subst”> <deriv tree=”np” anchor=”Sabine” /> </op>
<op cat=”d” span="2 3” id=”8” type=”subst”> <deriv tree=”d” anchor=”un” /> </op>
<op cat=”n” span=”3 5 4 5” id=”l0” type=”adj”> <deriv tree=”an” anchor=”joli” /> </op>

</forest>

5 Outils de gestion

5.1 Pour les grammaires

La représentation en XML des grammaires est parfaite pour la gestion et l’échange des sources.
Cependant, elle ne correspond pas aux formats d’entrée attendus pour la construction des ana-
lyseurs (voir section 6). Ainsi, le systeme DyALog exploite une représentation logique a la
PROLOG tandis que le constructeur d’analyseurs RCG nécessite des clauses RCG.

Ghttp://atoll.inria.fr/~clerger/forest.dtd,xml

Atelier ATOLL pour les grammaires d’arbres adjoints

Analyzer

|XML| |HTML| |Tree| Dep

Strip \ / \\ //

~ EAE IFORESTI
RCG  SQL

IE

(a) Grammaires 0)) Foréts

   

FIG. 5: Modules de gestion

Nous avons donc développé en Perl des modules de conversion complétés ensuite par d’autres
modules (ﬁgure 5(a)). Le module pivot TAG implémente une représentation orientée objets de
la structure logique spéciﬁée par la DTD. Les modules périphériques ajoutent des méthodes
supplémentaires pour telle ou telle tache.

Outre les modules de conversion déja cités LP et RCG utilisés pour compiler les grammaires,
nous disposons aussi d’un module XML de lecture et écriture du format XML. Le module Che-
cker vériﬁe la cohérence des grammaires et produit diverses statistiques. Le module Analyzer
extrait des informations utiles pour la compilation d’une grammaire. Le module Strip élimine
les structures de traits d’une grammaire.

Le module SQL permet de charger une grammaire dans une base de données SQL (et de res-
taurer une grammaire a partir de la base). Ce module peut étre utile pour vériﬁer des propriétés
d’une grammaire a l’aide de requétes en SQL7.

L’utilisation de Perl a été motivée par la disponibilité de nombreux modules logiciels libres sur
les sites d’archivage, gérant par exemple l’analyse de XML ou l’acces aux bases de données. Le
développement d’un module en Perl est de plus tres rapide, en general de l’ordre de quelques
heures pour un prototype opérationnel. Nous avons ainsi réalisé un prototype de module LaTeX,
utile pour construire une forme écrite d’une grammaire. Nous envisageons également un module
HTML pour produire une version consultable en ligne.

5.2 Pour les foréts de dérivation

De facon similaire, un jeu de modules en Perl permet de traiter les foréts de dérivation (ﬁ-
gure 5(b)). Autour du module pivot FOREST viennent s’ajouter des modules de conversion.
Les modules LP, RCG et XTAG lisent les formats de sortie des foréts de nos analyseurs et
de l’analyseur XTAG. Les modules XML et HTML émettent les foréts sous forme XML et
HTML. Deux autres modules Tree et Dep construisent des spéciﬁcations de graphes, visuali-
sables grace a l’outil Graphvizs.

D’autres modules sont prévus dans un futur proche, tels un module SQL de lecture et d’écriture
dans une base de données servant de banque d ’arbres, un module Strip d’élimination des traits,

7En fait, un prototype de << serveur de grammaire» au dessus d’une base de données MySQL est en cours de

ﬁnition pour lequel Java a été préfere a Perl. Ce serveur s’appuie néanmoins sur la DTD XML des grammaires.
shttpz//www.research.att.com/sw/tools/graphviz

F. Barthelemy, P. Boullier, P. Deschamp, L. Kaouane et E. V. de la Clergerie

ou des modules pour l’eXtraction d’arbres dans les forets.

6 Analyse Syntaxique

6.1 Les analyseurs

Les analyseurs syntaxiques pour les TAG lexicalisees s’appuient generalement sur une phase
preliminaire de selection et d’instantiation d’un sous-ensemble d’arbres ancrables par les mots
de la phrase d’entree. Nous avons choisi de ne pas suivre cette voie. Notre pari est de construire
des analyseurs efﬁcaces a partir de la compilation de la grammaire complete et de realiser l’an-
crage des schemas d’arbres lors de l’analyse. Cela permet que notre travail s’applique egalement
a des TAG non lexicalisees (et non lexicalisables). Notons en outre que notre approche n’est pas
incompatible a terme avec des techniques de ﬁltrage.

Pour l’instant, nous avons experimente plusieurs analyseurs, correspondant a diverses approches
et strategies d’analyse.

La premiere approche repose sur l’emploi du systeme DyALog pour compiler des analyseurs
tabulaires pour les TAG avec traits. DyALog est un systeme generaliste permettant l’etude de
techniques de tabulation pour des programmes logiques et des formalismes grammaticaux a
base d’uniﬁcation. Nous l’avons etendu pour pouvoir traiter les TAG [Eric Villemonte de la
Clergerie and Alonso Pardo, 1998, Alonso Pardo et al., 2000, Eric Villemonte de la Clergerie,
2001]. En particulier, nous avons teste deux schemas de tabulation, ainsi que deux strategies
d’analyse, a savoir une strategie strictement descendante veriﬁant la propriete de validite des
preﬁxes et une strategie hybride descendante avec veriﬁcation ascendante des traits.

La seconde approche utilise les grammaires a concatenation d’intervalles (Range Concatenation
Grammars — RCG) pour lesquelles nous construisons des analyseurs tres efﬁcaces [Boullier,
2000]. Cela necessite la suppression des informations de traits et de co-ancrage des F-TAG,
puis la conversion des TAG obtenues en RCG [Boullier, 1998, 1999, Barthelemy et al., 2001].
La troisieme approche [Barthelemy et al., 2000] combine les deux premieres. En effet, la foret
partagee de derivation produite par un analyseur RCG (P1) est utilisee pour guider un analyseur
DyALog P2 modiﬁe. L’ analyseur P2 veriﬁe les contraintes de traits et de co-ancrage tandis que
les informations fournies par P1 rendent le traitement extremement efﬁcace.

6.2 Le serveur d’analyseurs

I-/3tant donne le nombre croissant d’analyseurs que nous gerons, nous avons cherche a faciliter
leur utilisation au moyen d’un serveur d’analyseurs, ecrit en Perl. Une fois la connexion etablie
avec ce serveur, l’utilisateur selectionne un analyseur et envoie sa phrase; le serveur retourne
alors la foret de derivation correspondante. Trois formats de sortie pour les forets sont actuelle-
ment disponibles, a savoir « sans formatage » (la foret telle que produite par l’analyseur), format
)ﬂV[L et format HTML. Ce demier est en particulier utilise par une interface WEB accessible
en ligne9.

7 Visualisation des derivations et des grammaires

En relation avec le serveur d’analyseurs et dans l’optique de comparer les resultats produits par
nos analyseurs, nous [Kaouane, 2000] avons modiﬁe et enrichi une interface de visualisation,

9http://medoc.inria.fr/pub—cgi—bin/parser.cgi

Atelier ATOLL pour les grammaires d’arbres adjoints

originellement développée par Patrice Lopez [Lopez, 2000] et réalisée en Java. Notre version lit
les grammaires et les foréts de dérivation données en XML selon nos DTD. Elle est également
capable de se connecter au serveur d’analyseurs, d’envoyer une phrase et de récupérer la forét
de dérivation.

Input: Sentence: Yves donne un joli Iivre 3'1 Sabine |vl

File: Load forest ‘ Load Irees
Saving: 6,) Current Result 0 Generated Forest Save

jﬁesults _
®|jReSu‘t70 | {ﬂrevlous  ‘gurrent  ’ﬂext I

|] step_0 dome

|j Step_1 I , -2:9’  ‘ e W;
D Step_2 E E lvire I
D SteD—3 El: Yvlea Joli iin Sahl1r\e
|] step_4
|j Step_E
|] Step_E

nu, NP UP

[VUES] [DONNE] [UN] UOLI] [LIUREJ [H] [SF\ElNEl

FIG. 6: Capture d’écran de l’outil de visualisation

Les arbres de dérivation sont extraits de la forét partagée de dérivation et afﬁchés, en regard avec
les arbres d’analyse correspondants. De plus, il est également possible d’avancer et de reculer
dans les étapes de dérivation, en observant a chaque pas l’arbre partiel de dérivation et l’arbre
partiel d’analyse (voir la ﬁgure 6).

Outre la visualisation des dérivations, l’interface permet la visualisation des différents compo-
sants d’une grammaire (lexiques et schémas d’arbres). Cet outil nous sert a étudier le compor-
tement des analyseurs en fonction des composants d’une grammaire mais il a également un fort
potentiel pédagogique car il permet de montrer et d’expliquer les étapes d’une analyse TAG.

Conclusion

Les expériences menées confortent notre opinion que XML est un langage adapté pour repre-
senter et échanger des ressources linguistiques. De plus, l’existence d’outils fondés sur l’emploi
de XML a permis le développement rapide de nos outils sur une courte période (autres que les
analyseurs syntaxiques, bien entendu).

Nous continuons a compléter progressivement notre atelier ATOLL pour les TAG par de nou-
veaux modules et outils. En particulier, nous sommes en train de mettre en place un serveur
de grammaire permettant l’extraction de fragments de grammaires. D’autres extensions sont
également envisagées pour la gestion de banques de foréts de dérivation.

Les outils et ressources présentés ici sont librement disponibles. Notre souhait est de voir
d’autres équipes compléter cet atelier pour les TAG par leurs propres outils, tache facilitée
par son architecture modulaire.

F. Barthélemy, P. Boullier, P. Deschamp, L. Kaouane et E. V. de la Clergerie

Références

Miguel Alonso Pardo, Djamé Seddah, and Eric Villemonte de la Clergerie. Practical aspects in
compiling tabular TAG parsers. In Proceedings of the 5”’ International Workshop on Tree
Adjoining Grammars and Related Formalisms (TAG+5), pages 27-32, Université Paris 7,
Jussieu, Paris, France, May 2000.

F. Barthélemy, P. Boullier, Ph. Deschamp, and E. de la Clergerie. Guided parsing of range
concatenation languages. In Proceedings of the 39th Annual Meeting of the Association
for Computational Linguistics (ACL’0I), University of Toulouse, France, July 2001. to be
published.

Francois Barthélemy, Pierre Boullier, Philippe Deschamp, and Eric Villemonte de la Clergerie.
Shared forests can guide parsing. In Proceedings of TAPD’00, September 2000. En ligne en
ftp://ftp.inria.fr/INRIA/Projects/Atoll/Eric.Clergerie/tapdO0.ps.gz.

Patrick Bonhomme and Patrice Lopez. TagML : XML encoding of resources for lexicalized
tree adjoining grammars. In Proceedings of LREC 2000, Athens, 2000.

Pierre Boullier. A generalization of mildly context-sensitive formalisms. In Proceedings of the
4 ‘h International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+4),
pages 17-20, University of Pennsylvania, Philadelphia, PA, USA, August 1998.

Pierre Boullier. On TAG parsing et On multicomponent TAG parsing. In 6”“ conference
annuelle sur le Traitement Automatique des Langues Naturelles (TALN’99), pages 75-84 et
pages 321-326, Cargese, France, July 1999. Voir aussi le Rapport de recherche n° 3668,
en ligne en http://www.inria.fr/RRRT/RR—3668.html, INRIA, France, Avril 1999, 39
pages.

Pierre Boullier. Range concatenation grammars. In Proceedings of the 6 ‘h International Work-
shop on Parsing Technologies (IWPI2000), pages 53-64, Trento, Italy, February 2000. Voir
aussi le Rapport de recherche n° 3342, en ligne en http : / / www . inria . fr / RRRT / RR—3342 .
html, INRIA, France, January 1998, 41 pages.

Aravind K. J oshi. An introduction to tree adjoining grammars. In Alexis Manaster-Ramer,
editor, Mathematics of Language, pages 87-115. John Benjamins Publishing Co., Amster-
dam/Philadelphia, 1987.

Linda Kaouane. Adaptation et utilisation d’un environnement graphique pour les tag au dessus
du systeme dyalog. Mémoire de DEA, Université d’Orléans, 2000.

Bernard Lang. Towards a uniform formal framework for parsing. In Masaru Tomita, editor,
Current issues in Parsing Technology, chapter 11. Kluwer Academic Publishers, 1991. Also
appeared in the Proceedings of International Workshop on Parsing Technologies - IWPT89.

Patrice Lopez. LTAG workbench : A general framework for LTAG. In Proceedings of the
5 ‘h International Workshop on Tree Adjoining Grammars and Related Formalisms (TAG+5),
Paris, May 2000.

Eric Villemonte de la Clergerie. Reﬁning tabular parsers for TAGs. In Proceedings of NAA-
CL’0I, June 2001. A paraitre.

Eric Villemonte de la Clergerie and Miguel Alonso Pardo. A tabular interpretation of a class
of 2-stack automata. In Proceedings of ACI/COLING’98, August 1998. En ligne en ftp:
//ftp.inria.fr/INRIA/Projects/Atoll/Eric.Clergerie/SD2SA.ps.gz.

The XTAG Research Group. A lexicalized tree adjoining grammar for English. Technical

Report IRCS 95-03, Institute for Research in Cognitive Science, University of Pennsylvania,
Philadelphia, PA, USA, March 1995.

