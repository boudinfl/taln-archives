TALN 2001, Tours, 2-5 juillet 2001

L'interrogation de bases de données
comme application des classes d'objets

Béatrice Bouchou, Julien Lerat, Denis Maurel

LI, Université Francois Rabelais
E31, 64 avenue Jean Portalis, 37200 Tours
(bouchou+maurel) @ univ-tours .fr

Résumé — Abstract

En travaillant sur l'interrogation de bases de données en langue naturelle, nous sommes
amenés a exploiter les propositions du Laboratoire de Linguistique Informatique (LLI) en
matiere de representation de la langue : les classes d'objets. Un outil d'interrogation définit
une application du langage vers le modele de l'information stockée. Ici les classes d'objets et
leurs prédicats appropriés modélisent le langage source, tandis que le modele relationnel sert
pour les données interrogées. Nous présentons d'abord ce contexte d'app1ication, puis
comment nous utilisons les classes d'objets et prédicats appropriés dans ce cadre.

We investigate how to use natural language to query a database from both the linguistic and
database points of view (but without AI considerations). In order to achieve this goal, we need
a natural language model which we can map on to a relational database model. We have
chosen to use the word classification called « classes d'objets » as proposed by the
Laboratoire de Linguistique Informatique (LLI). We present here the first results of this work.

M0tS clés - keywords interrogation de BD en langage naturel, modele relationnel,
classes d'objets — natural language database query, relational model, « classes d'objets »

1. Introduction

Notre systeme est destiné an interpreter la langue naturelle dans le cadre précis d'une
interrogation de bases de données. Ses grandes lignes sont présentées entre autres dans
(Bouchou, Maurel, 1999). En phase opérationnelle, l'uti1isateur écrit sa question en langage
naturel, puis le systeme lui fournit une réponse issue de la base de données. Avant d'étre
opérationnel, le systeme est "installé" sur la base de données cible. Le lien entre le sens de la
question et le sens des données stockées est établi au cours de cette installation, sous la forme
d'un dictionnaire électronique de mots clés.

La phase de conﬁguration du systeme d'interrogation pour une base de données precise est
l'une des principales pierres d'achoppement des systemes existants (Kaplan, 1984), (Sabah,
1997) : il faut qu'elle soit rapide, et surtout qu'elle ne nécessite pas l'intervention d'un expert
en linguistique, ni en intelligence artificielle. C'est ici que nous faisons intervenir les classes

Beatrice Bouchou, Julien Lerat, et Denis Maurel

d'objets et prédicats appropriés, concepts mis au point par l'équipe de Gaston Gross au LLI
(Gross, 1994), (Gross, 1998), (Le Pesant, Mathieu-Colas, 1998), (Le Pesant, 2000). Les
classes d'objets découlent de la théorie des opérateurs linguistiques, développée par Z.S.
Harris (Harris, 1976) et décrite, pour le francais, par les nombreux travaux qui ont suivi
(Gross, 1975). Ces classements définis en fonction des opérateurs linguistiques spéciﬁent les
conditions (syntaxiques) que ces mots doivent remplir pour faire sens avec les autres mots de
la question. Notre systeme s'attache a associer ainsi a la question le sens qu'impose la base.

La phase d'installation consiste a construire un dictionnaire de mots clefs :

0 En entrée sont les mots susceptibles d'étre reconnus dans une question sur la base : ces
mots sont rattachés a des classes d'objets et/ou a des prédicats (ou classes de prédicats).

0 En sortie sont des codes qui indiquent :
0 d'une part les éléments de la base auxquels il est fait référence dans la question,
0 et d'autre part les liens entre ces éléments dans la base, établis a partir des liens

reconnus entre les mots dans la question.

Nous disposons alors d'un systeme de mots clés, combine a la connaissance apportée par les
opérateurs linguistiques. Pour ce dictionnaire nous travaillons sur des transducteurs a nombre
fini d'états, minimaux, compactés (Revuz, 1991), (Mihov, 2000). Au contraire d'un systeme
développé avec ILLICO (Pasero, 1999), nous n'utilisons pas de logique : d'une part, la
connaissance de la langue (syntaxe/sémantique) se trouve dans les classes d'objets, et d'autre
part les modeles conceptuel et contextuel sont présents dans la base interrogée.

Dans la section 2 de cette communication nous exposons ce que sont les liens entre données
dans une base de données relationnelle. Cela permet, dans la section 3, de préciser ce qui est
recherché dans la base lors d'une interrogation. Apres cette spéciﬁcation de la cible, la section
4 revient sur la théorie utilisée pour représenter la source (la question en langue naturelle),
puis présente la correspondance établie entre les deux. Enfin, nous rapportons dans la section
5 des exemples de l'uti1isation des classes d'objets lors de la construction du dictionnaire.

2. Le "sens" des données stockées

Une base de données représente un systeme d’information. Le sens des données de la base est
fondamental pour concevoir un systeme d'interrogation : c’est de cela que parlera la question.

2.1 Le modele conceptuel d'une base de données

Rappelons comment est concue une base : la premiere étape consiste a modéliser le systeme
d'information, c'est le modele conceptuel (MCD). La figure 1 donne un exemple de résultat
avec le formalisme E-A (« Entités-Associations ») : on a 3 entités, Station, Skieur et
Competition, avec leurs attributs, ainsi que 2 associations, est classe’ et A lieu 61, la premiere
ayant pour attribut le rang de classement.

Le systeme d'information ne saurait étre réduit aux seules entités et associations. L’ensemble
des contraintes est également une composante essentielle de sa description. Les principaux
types de contraintes conceptuelles sont :

0 Comment un sous-ensemble d'attributs détermine les valeurs d'une occurrence d'entité,
ce qui se traduit par la notion d'identifiant (la "clef" dans les BD relationnelles).

L’interr0gati0n de bases de données comme application des classes d ’0bjets

0 Comment certains attributs d'une entité A sont lies a certains attributs d'une entité B, ce
qui se traduit par la notion de cardinalité des associations.

     

Skieur CO1’l’l]3étltl0Il Station
réfSkieur rang réfComp nomStat
nomSkieur nomComp paysStat
spécialité (0’n) (Ln) dateComp (L1) (0’n) capacité

Figure 1. Un schéma E-A.

La cardinalité consiste en un couple d'informations : le nombre minimum d'occurrences de
l'entité dans l'association (choix restreint a 0 ou 1), et le nombre maximum d'occurrences de
l'entité dans l'association (choix restreint a 1 ou "plusieurs", le second cas étant noté "n").

Revenons a l'exemple de la figure 1 (notez que les identiﬁants des entités ont été soulignés) :
le couple (0,n) du cote Skieur indique qu'un skieur participe a éventuellement 0 et en général
plusieurs competitions, tandis que ( 1,n) cote Compétition dénote qu'une compétition accueille
au moins 1 et en général plusieurs skieurs. La cardinalité (1,1) cote Compétition exprime
qu'une competition a lieu dans au moins une station et au plus une station.

Une fois spécifié le schéma conceptuel du systeme d'information, il faut le traduire dans une
représentation opérationnelle du point de vue informatique : a ce stade on peut utiliser soit un
modele orienté objet, soit un modele hiérarchique, soit encore un modele relationnel. Dans le
cas du modele relationnel, les tables de la figure 2 sont dérivées du schéma de la figure 1. On
voit qu'un certain nombre de regles president a la traduction :

0 Une entité se traduit par une table, chacun de ses attributs devenant une colonne de la
table, et son identiﬁant devenant la clef (primaire) de la table.

0 Une association avec un maximum égal a n des deux cotés se traduit par une table, dont la
clef est formée des clefs de chaque table correspondant aux entités associées. Chacun de
ses attributs devient une colonne de la table, cf. la table Classement.

0 Une association avec maximum égal a I d'un cote se traduit par l'ajout, dans la table
"dépendante", de la clef de 1’autre table, cf. nomStat dans Compétition.

Compétition(réfComp, nomComp, dateComp, n0mStat)
Skieur(réfSkieur, nomSkieur, spécialité)
Station(nomStat, paysStat, capacité)
Classement(réfComg, réfskieur, rang)

Figure 2 : Tables dérivées du schéma E-A.

2.2 Retrouver le sens des données d'une base en exploitation

Le modele relationnel est le modele le plus largement répandu dans les bases de données
actuelles. En relationnel « pur », on ne dispose que des relations (les tables avec leurs
colonnes) : cela seul ne permet pas de retrouver le « sens » des données, c’est-a-dire les liens
qui existent entre elles. Mais il a tres Vite été adjoint a la théorie relationnelle de quoi

Béatrice Bouchou, Julien Lerat, et Denis Maurel

exprimer ce sens : ce sont les contraintes (Abiteboul et al., 1995). Dans notre problematique,
les contraintes exprimant le modele conceptuel a l'origine de la base, nous nous en servons
pour determiner l ’image dans la base de données des liens semantiques trouves entre les mots
de la question (liens exprimes par les predicats).

Il est possible de retrouver automatiquement les contraintes d’une base de donnees en
exploitation : soit dans son catalogue (lequel contient les « meta-donnees ») si le concepteur a
explicitement pose des contraintes sur la base, soit par des calculs sur le contenu des tables
(Novelli et al., 2000). C'est le cas en particulier pour les dependances fonctionnelles.

Dépendance fonctionnelle : 11 y a une dependance fonctionnelle lorsque la valeur d’un
attribut (ou d’un groupe d'attributs) determine de facon unique celle d’autres attributs. Nous
appelons df un tel lien entre un attribut et les autres attributs de la méme table. Dans notre
exemple, la reference de la competition en determine la date et la station. De meme la
reference du skieur en determine le nom et la specialite, etc.

Dépendance d’inclusion : 11 y a une dependance d’inclusion lorsque les valeurs d’un attribut
d'une table doivent appartenir a l'ensemble des valeurs d’un attribut d ’une autre table. Nous
appelons di un lien de dependance d’inclusion. Par exemple, le nom de station de la
competition (dans Compétition) doit apparaitre dans la colonne nomStat de Station. Cette
information permet de deduire que, la reference de la competition determinant la station (dans
Compétition), elle en determine egalement le pays et la capacite d'accueil (dans Station).

Les contraintes n'expriment pas a elles seules tous les liens entre les donnees de la base : un
certain nombre de ces liens ne sont pas stockés (statiques), mais calculés (dynamiques). Ainsi
il existe dans tout SGBD des fonctions predefinies, appelees fonctions d'agregat, pour
calculer une somme, une moyenne, un maximum ou un minimum, ou encore compter un
ensemble de valeurs. Elles vont servir par exemple a trouver la station offrant la plus grande
capacite d’accueil, a determiner la capacite moyenne des stations francaises, etc.

Les fonctions d'agregat correspondent a des predicats generaux de la langue : nous avons
developpe a ce sujet un certain nombre d'eXemples dans (Bouchou et al., 1999). 11 y a
egalement des fonctions programmees par le concepteur de la base : par exemple dans une
base d’inventaire de marchandise, il po11rra y avoir une fonction pour calculer le stock
(produits recus - produits vendus) (Bouchou, Maurel, 1999). Qu’elles soient predefinies ou
programmees, on peut trouver les fonctions d’une base dans de ses « meta-informations ».

En resume, les informations que nous recuperons dans la base sont :

0 les donnees : le contenu des tables,
0 la structure generale : les noms des tables, les noms des colonnes,

0 les liens entre les donnees : les dependances (df et di), ainsi que lesfonctions de calcul.
3. Le "sens" des données pour l'utilisateur qui interroge la base
3.1 Questions sur les « entités »

C’est un fait etabli en IHM que tout utilisateur se forge un modéle mental de l’application
informatique qu’il utilise (cf. par exemple l'ouvrage (Norman, 1986)). Ainsi l’utilisateur de la

L’interrogation de bases de données comme application des classes d ’objets

base a son propre modele du systeme d'information qu'elle représente lorsqu’il l’interroge
(plus ou moins clair, complet, correct Vis-a-Vis de l'implantation effective de la base. . .).

En particulier, il en imagine les « entités » : c’est a leur propos qu’il Va poser ses questions,
lesquelles Vont donc contenir des references a ces entités. Nous devons donc savoir comment
l'utilisateur Va faire reference a l’entité « skieur ». Il Va peut étre utiliser le mot skieur :

Quels skieurs participérent an Championnat d ’Europe 2000 ?

Pour le meme genre de question, il peut aussi utiliser un terme représentant des compétiteurs,
comme concurrent par exemple. Enfin, pour parler d'une occurrence particuliere de skieur, il
utilisera essentiellement les noms et prénoms de la personne :

Quelles compétitions ont été remportées par Franck Picard ?

Nous posons une deﬁnition pour prendre en compte cette derniere possibilité : nous appelons
l'ensemble des Valeurs caractéristiques utilisées dans la question pour parler d'une occurrence
précise d'une entité le « représentant » de l’entité. Cela se traduit dans la base par un attribut,
ou un ensemble d’attributs d’une table. Seules les tables qui correspondent a des entités ont
un représentantl. Dans notre exemple, une station est représentée par son nom, une
compétition par son nom et sa date, un skieur par son nom (qui regroupe nom et prénom).

Cette notion de représentant est nécessaire pour repérer dans la question toute référence a une
table, soit directe, par ce qu'elle représente («la station qui... » fait reference a la table
Station), soit par une Valeur de son représentant (« la capacite’ d ’accueil de St Moritz » fait
également reference a la table Station).

3.2 Questions sur les caractéristiques des entités

L’interrogation porte donc sur les tables qui correspondent aux entités que peut imaginer
l'utilisateur. Plus précisément, elle porte sur l’une ou l’autre des caractéristiques des entités.

0 Dans notre exemple, on interrogera sur le pays d'une station, sa capacité, la spécialité d'un
skieur, la date d'une compétition, etc. On en déduit ainsi que chaque attribut d ’une table T
correspond a une des caractéristiques possibles de l ’entite’ représentée par T.

Formellement, il y a dépendance fonctionnelle (df) entre chaque attribut non-clef et la clef de
la table ; nous identifions la table (et son représentant) a sa clef. Ainsi, connaissant les df,
nous connaissons une premiere partie des caractéristiques de l'entité qui pourront étre
interrogées.

0 Reprenons encore notre exemple : d’autres caractéristiques de l’entité sont stockées en
dehors de la table : le pays qui accueille la compétition, ou la performance (le rang)
d’un skieur dans une compétition.

Ces caractéristiques-la sont "rapportées" par les dépendances d'inclusion (di).

1 Parenthese technique : cet ensemble d’attributs est souvent << clef » pour la table, mais c’est rarement la clef

primaire effective. Pour l'instant, ce représentant doit encore etre identifié par l’insta]lateur.

Beatrice Bouchou, Julien Lerat, et Denis Maurel

0 Enfin, il y a les caractéristiques qui ne sont pas stockées, mais calculées, a savoir les
fonctions : le gagnant d'une compétition, par exemple, s'obtient par un MIN sur le rang.

Ainsi les images dans la base des caractéristiques interrogées s’expriment en termes de df, di
etfonctions, lesquelles mettent en relation tables, attributs, et valeurs.

4. Projection de la question sur la base

4.1 Classes d'objets et prédicats appropriés pour représenter la question

Nous sélectionnons dans la question un certain nombre de mots qui fournissent assez
d’informations pour construire une requéte SQL pertinente vis-a-vis de la base. Pour cela, il
faut non seulement les mots, mais leurs liens, soit encore l'ensemble des conditions qu'ils
doivent remplir pour faire sens les uns avec les autres dans la question, ceci dans le contexte
de la base. Ces liens, les travaux de Zellig Harris, puis de Maurice Gross (LADL) et, enfin, de
Gaston Gross (LLI) montrent qu'ils sont donnés par les prédicats linguistiques : des opérateurs
sur les phrases simples, dotés d'arguments (le sujet, les compléments)...

Les classes d’objets sont présentées par leurs auteurs comme « des classes sémantiques
constr11ites a partir de criteres syntaxiques »2 (Gross, 1998), (Le Pesant, Mathieu-Colas,1998),
(Le Pesant, 2000). I1 n'est pas dans notre propos de détailler leur cadre théorique, élaboré au
LLI depuis une dizaine d'années, aussi nous ne faisons que rappeler leur déﬁnition. Une
classe d’objets est définie comme représentant le «type » d'un argument de prédicat : en
d'autres termes, le prédicat sélectionne son argument dans telle ou telle classe d'objets. Ainsi,
on peut décrire le sens d'un mot prédicatif (verbe, nom, adjectif, ou adverbe) en indiquant les
classes d'objets qu'il sélectionne. Et inversement, une classe d'objets est définie (en partie) par
les prédicats qui lui sont spéciﬁques : ce sont ses prédicats appropriés. Cela permet de décrire
le sens d'un mot non prédicatif par l'énoncé des classes d'objets auxquelles il appartient.

Par exemple, competition appartient a la classe des <e’ve’nements> : ce mot est sélectionné par
« se de’r0uler », « étre organise’ », « avoir lieu », etc.

(i) N0 a eu lieu 61 N1 le N2 ici N1 est de la classe des <toponymes> (auquel
appartiennent les stations de ski, mais également les pays), et N2 de la classe des dates.

(ii) De méme, le mot skieur, de la classe des <humains> (a ce titre il a un nom, donc il
peut étre sélectionné par « étre nomme’ », « avoir pour nom »,...) est aussi de la (sous-)
classe des <sp0rtifs>, ce qui le rend sélectionnable par :

(iii) N0 a pour spécialité N1 ; la spécialité de N0 est N1.

(iv) 11 est également dans la classe des <c0mpe’titeurs>, qualifiée par « étre vainqueur »,
« perdre », « se classer », « avoir pour rang », etc.

(v) Le mot station releve (entre autres) de la classe des <villes>, sélectionnées en
particulier par : N0 est dans <pays>, N0 en <pays>, N0 de <pays>. I1 appartient

2 C'est en ceci nous semble—t—il que la démarche du LLI djffére de celle du DEC de Mel'cuk (Mel'cuk, 1995),
dans lequel la plupart des propriétés lexicographiques d'une lexie découlent des définitions sémantiques.

L’interr0gati0n de bases de données comme application des classes d ’0bjets

également aux lieux géographiques, caractérisés entre autres par leur altitude : N0 se situe
a <altitude>.

Dans les faits, les classes d'objets sont définies en extension, par l'ensemble des mots qui les
composent, et l'ensemble de leurs prédicats appropriés (verbes, adjectifs, noms ou adverbe).
Chaque mot est lui-méme associé a des caractéristiques lexico-sémantiques : genre, trait,
domaine, etc. Les prédicats sont décrits également par leurs caractéristiques : catégorie
grammaticale, classes des arguments , trait, domaine, etc.

4.2 L'image dans la base des classes d'objets et prédicats appropriés

Les classes d'objets nous servent a construire le dictionnaire, en méme temps que les
informations issues de la base de données : ce dictionnaire met en relation des mots avec des
ensembles de codes, comme le schématise la figure 3.

mot l:> DICTIONNAIRE I:> {codes}

Figure 3 : A un mot correspond une liste de codes

Quels sont les mots en entrée du dictionnaire, mots qu'il faudra reconnaitre dans la question ?
C'est la base de données qui détermine ce vocabulaire : on doit pouvoir reconnaitre :

0 Toute référence aux entités (tables).
0 Toute référence aux instances (valeurs stockées).

0 Toute référence aux caractéristiques de telle ou telle entité (relations entre attributs
d'une table —df—, ou relations entre attributs de différentes tables —di—, oufonctions).

Reprenons les exemples (i) a ( v ) précédents :

0 Les mots qui parlent d'une table appartiennent a une (ou plusieurs3) classe(s) d'objets
linguistiques. De méme, les valeurs (textuelles) prises par un attribut appartiennent a
une (ou plusieurs) classe(s) d'objets : St Moritz, Genéve ou Lausanne sont des éléments
de la classe des noms de villes.

0 Considérons maintenant les attributs d'une table T : chacun correspond a une
caractéristique de l'entité représentée (méme partiellement) par T. Chacun représente
donc un mot prédicatif, qui sélectionne au moins deux arguments : le premier dans la
classe d'objets de la table, le deuxieme dans la classe d'objets des valeurs prises par
l'attribut. Voyez par exemple (i) : N0 a lieu a N1, ou encore (iii) et (iv).

0 Lorsqu'une entité est représentée par un ensemble de tables, les attributs d'une table T1
qui dépendent des valeurs d'une table T2 correspondent également a des mots
prédicatifs, lesquels sélectionnent un argument dans la classe d'objets de la table T2, et
les autres dans les classes des valeurs prises par l'attribut de T1. Ainsi la relation entre

3 Du fait de la hiérarchie entre classes d'objets, un mot peut apparaitre dans une classe et une sous—classe.

Beatrice Bouchou, Julien Lerat, et Denis Maurel

l’attribut pays de la table Station avec la table C0mpe’titi0n représente la forme N0 a
lieu en NI : le championnat d’Eur0pe a lieu en Autriche.

0 Par ailleurs les fonctions (nommées selon le « sens » de leur résultat : minimum,
somme, stock, vainqueur. . ., et caractérisées par leurs arguments et leur type) sont, elles
aussi, référencées dans la langue par des mots prédicatifs. Par exemple la fonction qui
calcule un minimum représente la forme superlative le moins, ou le plus petit :
l’altitude la m0ins e’leve’e, la plus petite capacité d’accueil.

Ainsi les informations (valeurs stockées) et les méta-informations (tables, attributs,
contraintes et fonctions) de la base de données conditionnent l'ensemble des mots a
reconnaitre dans la question. A partir de ces conditions posées par la base, notre démarche
consiste ensuite a consulter la langue, structurée en classes d'objets et de prédicats, pour
déterminer les mots qui seront utilisés pour l'interrogation.

Spécifions maintenant les codes a associer aux mots du dictionnaire. Un mot est en entrée du
dictionnaire en tant qu'élément d'une classe d'objet et/ou élément d'une classe de prédicats.

0 Si c'est un élément d'une classe d'objets, alors c'est une référence soit a une table, soit a
une valeur d'un attribut d'une table4. Donc au moment 011 on ajoute le mot au
dictionnaire, on connait la table ou la valeur d'attribut en question : on associe alors a
ce mot une reference a cette table (code T.n0m_inteme_de_la_table), ou a cette valeur
(de cet attribut de cette table : code I.n0m_de_la_table.n0m_ de_l ’attribut.valeur).

0 Si c'est un mot prédicatif, alors il est en entrée du dictionnaire du fait d'une df, d'une di,
ou d'une fonction. De la méme facon on peut lui associer un code qui représente cette
information dans la base. Par exemple, « se de’r0ule » est associé au code
df( T. Competition, A. C0mpe’titi0n.n0mStat) au moment ou cette df est traitée, puis au
code di( T. C0mpe’titi0n, A.Stati0n.paysStat) lorsque cette di est traitée a son tour. Ce
terme, « se de’r0ule », est donc en entrée du dictionnaire du fait des relations df et di,
ET grace aux classes d'objets et de prédicats associés, qui fournissent les mots de la
langue5 qui expriment ces relations.

On voit donc qu'a chaque mot est associée une liste de codes, ne serait-ce que parce qu'il est
rare qu'un mot n'ait qu'un emploi, méme dans un certain domaine. Le traitement d'une
question par le premier transducteur (qui applique le dictionnaire) génere une liste de listes de
codes. L'essentiel du traitement ultérieur consiste a mettre en regard les sous-listes : par
exemple, s'il y a le code df( T. Competition, A. C0mpe’titi0n.n0mStat) dans une sous-liste S1, et
s’il y a le code T.C0mpe’titi0n dans une sous-liste S2 et enfin le code A. C0mpe’titi0n.n0mStat
dans une sous-liste S3, alors df( T. C0mpe’titi0n, A.C0mpe’titi0n.n0mStat) est retenu, et ce code
n'est retenu qu'a cette condition : nous ne retenons que les dépendances et fonctions
« instanciées » par une partie ou une autre de la question.

Bien évidemment, les principes qui viennent d'étre décrits ne sont applicables qu'en cas
d'attributs textuels : les booléens, les nombres et les dates ne sauraient se trouver en entrée du
dictionnaire, et portent peu de sémantique en eux-mémes. Ces types d'attributs font l'objet
d'un traitement distinct que nous n'aborderons pas ici.

4 Table ou valeur qui sont a l'origine de la présence de ce mot en entrée du dictionnaire.

5 Et les régles qui régissent leur emploi, donc leur sens...

L’interr0gati0n de bases de données comme application des classes d ’0bjets

5. Construction du dictionnaire avec les classes d’objets

Dans la phase d’installation, il faut que les choses soient simples. Dans (Bouchou et al.,
1999), il est montré que notre systeme fait grosso-modo ce que le systeme TEAM faisait déja
en 1986 avec une approche de type intelligence artificielle (Grosz, 1986). Mais TEAM
demandait trop d’efforts et de compétences pour son adaptation a chaque nouvelle base. Pour
nous, compte-tenu de ce que nous extraions de la base elle-méme (dont les dépendances et les
fonctions), et de la connaissance de la langue fournie par les classes d’objets, il faut peu
d’efforts et peu de temps a l’installateur. Voici quelques points qui tendent vers cet objectif :

Au départ, l'installateur donne :

0 un mot de la langue courante pour designer chaque table (le nom interne des tables est
rarement parlant),

0 le « représentant » des tables qui correspondent a des entités.

Pour chaque nom de table donné, T, les classes d’objets auxquelles il appartient sont
recherchées, et soumises a l’installateur pour qu’il désigne la plus pertinente, COT6.

Par ailleurs, les classes d’objets auxquelles correspondent les valeurs de chaque attribut —
teXtuel— de chaque table sont également recherchées. Chaque attribut A,- de T correspond a une
colonne de valeurs : on recherche la plus petite classe d’objets qui contienne toutes ces
valeurs. Nous avons ici besoin de la hiérarchie des classes : si au plus petit niveau (le plus
précis) aucune classe ne contient toutes les valeurs de la colonne, alors il faut sélectionner une
classe d'un niveau supérieur. Soit C0T.A,- la classe ainsi déterminée pour l'attribut A,- de T.

Des techniques similaires sont utilisées pour les df, di et les fonctions : ainsi pour les df, on
recherche la classe de prédicats a laquelle correspond un attribut A,- de la table T. 11 s'agit de
l’ensemble des prédicats qui sélectionnent a la fois un élément de la classe C0T et un élément
de la classe C0T.A,-. On note cet ensemble : CpT.A,- = {P/(C0T, C0T.A,- , P)}.

Grace a de tels calculs, opérés automatiquement sur les fichiers qui décrivent les classes
d’objets et les prédicats, l'installateur, apres avoir « amorcé » l'installation avec un nom pour
chaque table, n'a plus qu'un simple r6le de sélection ou de validation.

6. Bilan et perspectives

Nous ne pensons pas avoir épuisé les ressources offertes par les classes d’objets et prédicats
associés. Les techniques qui viennent d'étre présentées sont implantées dans notre prototype,
développé en Java. Celui-ci est testé sur plusieurs bases, de domaines différents (la gestion de
stock, les vins, ...), et l'eXpérience mérite d'étre prolongée pour intégrer des propositions
concernant l'organisation de la classification, comme l'usage des domaines et sous-domaines.

Une perspective importante ouverte par ce travail, pour l'instant focalisé sur les bases de
données relationnelles, consiste a transposer les réﬂexions qui le sous-tendent vers des

6 Les classes sont "soumises" a travers un échantillon de leurs prédicats appropriés.

Be’atrice Bouchou, Julien Lerat, et Denis Maurel

collections de données semi structurées, par exemple en XML, et a ouvrir notre application,
de ce fait, a la recherche d'informations sur le Web.

Remerciements

Les auteurs tiennent a remercier M. Gaston Gross pour leur avoir permis de tester les idées
présentées ici sur des fichiers de classes d'objets et de prédicats développés au LLI.

Références

Abiteboul S., Hull V., Vianu V. (1995), Foundations of Databases, Addison-Wesley.

Bouchou B., Maurel D. (1999), Une bibliotheque d’opérateurs linguistiques pour la
consultation de base de données en langue naturelle, 6”“ Conference sur le Traitement
Automatique des Langues naturelles (TALN I999), Cargese, actes pp 65-74.

Bouchou B., Maurel D., Kaltz B. (1999), Prédicats logiques / prédicats linguistiques pour la
consultation de base de données en langue naturelle, RISSH, U. de Liege, Vol.35, pp 127-149.

Gross G. (1994), Classes d’objets et description des verbes, Langages 115, Larousse.

Gross G. (1998), Pour une véritable fonction synonymie dans un traitement de texte,
Langages 131, Larousse.

Gross M. (1975), Me’thodes en syntaxe, Hermann, Paris.

Grosz B., Appelt D., Martin P., Peirera F.(1987), TEAM : an experiment in the design of
transportable natural language interfaces, Artificial Intelligence 32, pp 173-243.

Harris Z.S. (1976), Notes du cours de syntaxe, Paris, Le Seuil.

Kaplan S. J. (1984), Designing a Portable Natural Language Database Query System, ACM
Transactions on Database Systems, Vol. 9, n°1, march 1984, pp. 1-19.

Le Pesant D., Mathieu-Colas M. (1998), Introduction aux classes d’objets, Langages 131,
Larousse.

Le Pesant D. (2000), Introduction aux classes d’objets, These d’habilitation a diriger des
recherches, Université de Villetaneuse, décembre 2000.

Mel'cuk I. A., Clas A., Polguere A. (1995), Introduction a la lexicologie explicative et
combinatoire, "champs linguistiques", Louvain La Neuve, Duculot.

Mihov S., Maurel D. (2000), Direct Construction of Minimal Acyclic Subsequential
Transducers, First Conference on Implementing and Application of Automata (CIAA’2000).

Norman, D. A., Draper, S. (Eds.), (1986). User Centered System Design.‘ New Perspectives
on Human-Computer Interaction. Hillsdale, NJ: Lawrence Erlbaum Associates.

Novelli‘N., Cicchetti R. (2000), Mining functional and embedded dependencies using free
sets, I 6”“ Conference Bases de Données Avancées (BDA 2000), Blois.

Pasero R., Sabatier P. (1999), ILLICO : un systeme générique pour la compréhension d'un
sous-ensemble du francais, rapport Laboratoire d'Informatique de Marseille, 1999.

Revuz D. (1991), Dictionnaires et lexiques - Me’thodes et algorithmes, These de Doctorat en
Informatique (Université Paris7).

Sabah G. (1997), Le sens dans le traitement automatique des langues, T.A.L. 38-2, pp. 91-133.

