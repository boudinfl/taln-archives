TALN 2001, Tours, 2-5 juillet 2001

Extraction automatique de motifs syntaxiques

J ean—Gabrie1 Ganascia

LIP6 — Universite Pierre et Marie Curie
8, rue du Capitaine Scott, 75015 Paris France
J ean—Gabriel.Ganascia@lip6.fr

Résumé — Abstract

Cet article présente un nouvel algorithme de détection de motifs syntaxiques récurrents dans les
textes écrits en langage naturel. I1 décrit d’abord l’algoritl1me d’extraction fondé sur un modele
d’édition généralisé a des arbres stratiﬁés ordonnés (ASO). I1 décrit ensuite les expérimentations
qui Valident l’approche préconisée sur des textes de la littérature francaise classique des XVIII“
et XIX“ siécle. Une sous-partie est consacrée a l’évaluation empirique de la complexité
algorithmique. La derniere sous-partie donnera quelques exemples de motifs récurrents typiques
d’un auteur du XVIII“ siecle, Madame de Lafayette.

Mots clefs : Extraction de motifs, arbres stratifiés ordonnés, distances d'édition, séquences.

This paper presents a new algorithm designed to detect recurrent syntactical patterns in natural
language texts. It first describes the pattern extraction algorithm which is based on an edit model
generalized to Stratiﬁed Ordered Trees (SOT). Then it focuses on experiments with french
classical literature of the 18”‘ and 19”‘ century. One section is dedicated to the efficiency
evaluation. The last provides some examples of such recurrent patterns that are typical of an 18
century author, Madame de Lafayette.

Keywords : Pattern extraction, stratiﬁed ordered trees, edit distance, sequences.

1 Extraction automatique dc motifs syntaxiques

Nous présentons ici un algorithme d’extraction automatique de motifs textuels répétitifs. Notre
but est de détecter des motifs syntaxiques récurrents. Trois motivations guident cette recherche.

La premiere est de caractériser la personnalité des écrivains, car nous pensons que, ce que l’on
appelle couramment, et un peu pompeusement le style est partiellement déterminé par les
structures syntaxiques employées et partiellement par le lexique. Dans le passé, les approches de
la « stylométrie » se sont essentiellement fondées sur une analyse statistique des occurrences
de mots. Nous souhaiterions développer une approche syntaxique. Dans le futur proche, nous
testerons cette hypothése de travail sur les imitations : il existe toute une littérature de parodie ou
des auteurs caricaturent de grands écrivains en répétant les traits saillants de leurs styles
personnels. Si notre hypothése se vérifie, quelques unes des manieres des écrivains se
retrouveront dans les motifs syntaxiques employés par leurs imitateurs.

La seconde motivation est éducative. Notre but serait d’aider les écoliers, les étudiants ou les
jeunes écrivains a évaluer la richesse et la diversité de leur style propre. I1 serait ainsi possible
d’identiﬁer les fautes classiques et de proposer des corrections. Qui plus est, les personnes

Jean-Gabriel Gcmascia

apprenant des langues étrangeres pourraient proﬁter d’une telle analyse pour détecter leurs
expressions idiomatiques. Plus précisément, il arrive que certaines constructions soient
correctes d’un point de vue grammatical, mais inhabituelles, ce qui rend leur usage fréquent
étrange et génant pour un lecteur dont c’est la langue maternelle.

La troisiéme motivation est universitaire. La linguistique informatique pourrait utiliser un tel
outil pour distinguer différents registres de langue et les caractériser. Les progres dans l’analyse
du langage naturel couples a ceux des techniques d’intelligence artificielle et de fouille des
données, aideront a détecter de tels motifs syntaxiques, fournissant ainsi une nouvelle facon
d’étudier les usages du langage. Ainsi, il serait possible d’engendrer des ﬁgures d’expression et
d’automatiser les procédures de la rhétorique classique.

Dans l’architecture préconisée pour découvrir de tels motifs, un apprentissage non supervisé
regroupe ensemble des motifs similaires. La premiere partie de l’article décrit l’algorithme
d’apprentissage. Apres une présentation de l’ensemble de la chaine de traitement, l’article porte
sur la distance d’édition, puis sur l’algorithme de génération qui construit le graphe de
similarité. Ensuite, l’article introduit l’algorithme << centre étoile >> concu pour extraire des
sous-graphe fortement connectés du graphe de similarité, et qui correspondent a des classes de
motifs similaires. Enfin, la derniére partie de l’article décrit quelques expérimentations. Nous y
évaluerons l’approche proposée a la fois d’un point de vue algorithmique et quantitatif, et d’un
point de vue linguistique et qualitatif.

2 Chaine de traitement

Pour résumer, nous avons dessiné (voir figure 1) l’ensemble de la chaine de traitement qui
prend, en entrée, un texte en langage naturel et qui engendre, en sortie, un ensemble de motifs

 
    
 
 
 

      
   

 
 
   

récurrents. Graphe de

Entrée: Génération imilarité _ _ sortie:
’ du grqphg fie

Tex]/.6 en slmtlarlte Motifs

langage naturel séquence d ‘arbres récurrems

Figure 1 : chaine de traitement

Dans la premiere sous-partie, les entrées du processus ainsi que l’étape d’analyse sont
présentées, tandis que, dans la seconde, ce sont les ASO (Arbres Structurés Ordonnés) qui sont
détaillés, car l’algorithme d'eXtraction repose en grande partie sur l’utilisation de ces structures
de données.

2.1 Phase d’analyse du texte en langage naturel

L’entrée principale du systeme consiste en un texte écrit en langage naturel qui est réductible a
une séquence de phrases chacune étant afﬁrmative, interrogative, exclamative ou négative. Un
traitement automatique de ce texte réalisé par un analyseur syntaxique ou un catégoriseur,
associe des étiquettes a chaque mot (nom, verbe, etc.), ou a chaque groupe de mots (groupe
nominal, syntagme verbal, etc.). Cet article ne portant pas, a proprement parler, sur les
analyseurs ou les catégoriseurs, nous ne détaillerons pas ces processus. Nous insistons
seulement sur la généralité de l’approche qui prend comme entrée un arbre d’analyse engendré
par différentes grammaires avec différents ensembles d’étiquettes. La plupart du temps, les
arbres sont stratifiés, autrement dit, les étiquettes forment une partition dont les classes
dépendent de la profondeur du noeud dans l’arbre d’analyse. Par exemple, un niveau
correspond a des syntagmes non-récursifs, un second a des catégories de mots, un troisiéme a
des attributs comme le genre ou le nombre, un dernier a des lemmes, c’est-a-dire a des formes
canoniques de noms ou de verbes. Soulignons toutefois que notre approche n’est pas restreinte

Extraction automatique de motifs syntaxiques

a une décomposition syntaxique en groupe non récursifs. La seule limitation porte sur le résultat
de la phase initiale d’analyse qui doit s’exprimer sous forme d’un ASO (Arbre Structuré
Ordonné) (voir sous-partie suivante). Les expérimentations conduites avec cette architecture ont
fait appel a deux traitements différents. Le premier utilise le catégoriseur Winbrill-0.3, dont la
base de connaissance a été enrichje par l’INALF-CNRS (Lecomte 1998). Cet outil étiquette
simplement les mots, sans extraire de groupes. Le second fait appel a l’analyseur Vergne-98
écrit par Jacques Vergnes (voir http://www.info.unicaen.fr/~iVergnes et (Vergnes 1999)) au
GREYC (Groupe de Recherche en Informatique, Image, Instrumentation de Caen). Pour des
raisons de place, nous n’évoquerons ici que la seconde experimentation avec l’analyseur de
Jacques Vergnes.

2.2 Arbre Stratifiés Ordonnés (ASO)

Selon une déﬁnition classique, un arbre ordonné est un arbre dans lequel les relations de gauche
a droite, entre fils d’un méme noeud, sont porteuses d’information. En d’autres termes, cela
signifie qu’un arbre ordonné peut étre récursivement défini comme un noeud étiqueté suivi d’une
forét, c’est-a-dire d’une séquence d’arbres.

Toutes les données séquentielles peuvent évidemment se représenter a l’aide d’arbres ordonnés
de profondeur 1. En ajoutant des niveaux aux arbres ordonnés, il est possible d’organiser les
données de fagon a représenter une connaissance implicite. Par exemple, un texte, c’est-a-dire
une séquence de caracteres, est un liste de phrases, chacune d’entre elles étant composée de
mots et de symboles de ponctuation. Ceci peut étre représenté a l’aide d’un arbre de profondeur
3 qui explicite cette structure. Considérons maintenant les arbres résultant de l’analyse
syntaxique, il faut introduire au moins deux niveaux supplémentaires correspondant aux
groupes syntaxiques et aux catégories de mots.

Comme nous l’avons précédemment montré, les arbres ordonnés accroissent la puissance de
représentation en sorte qu’il est possible de détecter des sous-arbres semblables, eu égard a cette
structuration des données. Il est aussi possible d’extraire des motifs généraux qui ont de
multiples occurrences approximatives. Par exemple, n’irnporte quelle séquence de groupes
syntaxiques qui apparait plusieurs fois dans les données peut étre détectée, sans considérer les
mots couverts par ces structures syntaxiques, ni leur catégorie.

Toutefois, en pratique, la détection est rendue impossible du fait du tres grand nombre de paires
potentielles de sous-arbres. Afin de réduire la complexité, les noeuds sont regroupés en classes
de sorte que deux noeuds ne s’apparient avec succes que s’ils relevent de la méme classe. En
d’autres termes, un appariement entre deux arbres est Valide si et seulement si les noeuds
correspondants dans l’appariement relevent tous de la méme classe.

En outre, on suppose qu’il existe un ordre total sur l'ensemble des classes et que, en
considérant cet ordre, la classe des ﬁls d’un noeud est égale ou immédiatement supérieure a la
classe de ce noeud. Cette contrainte définit la notion de stratification et la structure d’ASO (Arbre
Stratifié Ordonné). Plus formellement, en définissant un ensemble ordonné S (ensemble de
"sortes") et une fonction sorte(x) qui associe un élément de S a chaque noeud de l‘arbre, on peut
spécifier un ASO comme étant un arbre ordonné dont la classe de chaque noeud N (sorte(N)) est
le successeur immédiat dans S de la classe de son pere, sauf pour la racine qui n'a pas de pere.
Dans le cas d'arbres syntaxiques résultant de l'analyse d’un texte en langue naturel, ceci signifie
que l'ensemble ordonné S peut contenir cinq classes, {texte, phrase, groupe, catégorie, mot}
avec texte < phrase < groupe < catégorie < mot.

Etant donné la structure d’ASO, nous pouvons facilement déﬁnir une mesure de similarité qui
quantiﬁe l’appa1iementapproximatif entre deux ASO (voir partie 3). Grace 51 cette mesure, il est
possible d’engendrer efﬁcacement un graphe de similarité (voir partie 4) qui stocke les sous-
arbres les plus proches dans le texte analyse. Et, c’est ce graphe de similarité qui sert d’entré au
module de construction des classes de motifs semblables (voir partie 5).

Jean-Gabriel Ganascia

A titre d'illustration, Voici l'ASO construit a partir de l'analyse syntaxique d'une proposition
tirée de "La comtesse de Tende" de Madame de Lafayette: Elle exécuta ce qu’elle avait

projeté :1
I I I I I I I
Groupe Groupe Groupe Groupe Groupe Groupe Groupe
cat: K cat: V cat: N cat: 0 cat: K cat: V cat: G
fs3 fs3 ms3 ms3 fs3 fs3
Centre Centre Centre Centre Centre Centre Périphérique Connecteur
cat: K cat: V cat: N cat: 0 cat: K cat: W cat: 2 cat: E
ms.
mot mot mot mot mot mot mot mot
.. eme .. ..eXéCuta.. "Ce" .. qu. .. .. elle .. ..aVai,[.. ..proJ-e,[é.. .. . ..

Figure 2 : ASO construit a partir de l'analyse syntaxique d'une proposition simple

3 Distance d’édition

Les distances d’édition ont été beaucoup utilisées pour détecter des appariements approximatifs
sur des chaines de caracteres (Sankoff & Kruskal 1983), tout particulierement en biologie
moléculaire (Sagot et al. 1996) et en musique (Rolland et Ganascia 1999). Le lecteur intéressé
trouvera un panorama complet de ces techniques dans (Crochemore & Rytter 1994). Nous
rappellerons simplement quelques principes de base.

Définition : une édition est une transformation élémentaire qui remplace un caractere dans une
chaine ou plus généralement un noeud dans un arbre, par un autre, éventuellement vide. Par
exemple, une substitution est une édition qui transforme un caractere d’une chaine en un autre a
la méme position. Une insertion (respectivement une destruction) qui insére (respectivement
détruit) un caractere dans une chaine est aussi une édition.

Définition : une distance d’édition entre deux chaines ou deux arbres correspond au nombre
minimal d’éditions qui transforme une chaine dans une autre, ou un arbre dans un autre.

3.1 Distance d’édition entre chaines

Considérons maintenant deux chaines X et y données sous forme de deux tableaux de taille
respective n et m, c’est-a-dire comme x[1..n] et y[1..m]. Il est alors possible de construire une

matrice de dimension (n+l)x(m+l) appelée EDIT, ou EDIT (i, j) contient la valeur de

edit(X[1..i], y[1..j]) pour tout couple (i, j) tel que ie [1, n] et j e [1, m], tandis que EDIT (0, j)
correspond a l’insertion de y[j] et EDIT(i, 0), a la destruction de x[i]. Sachant que
destruction(x[i]), insertion(y[j]) et substitution(x[i], y[j]) correspondent respectivement au coﬁt
de la destruction de X[i], de l’insertion de y[j] et de la substitution de x[i] par y[j], une formule
simple résume la fagon dont les éléments de la matrice sont calculés :

1 Voici le résultat donnépar l'analyseur Vergnes—98 : {* 1 1 *}%S K fs3 %C Elle K fs3 {* 2 2 *} %S V fs3
%C exécutaV fs3 {* 3 3 *} %S Nms3 %C ceNms3 {*4 4 *} %S O ms3 %C qu'O ms3 {* 5 5 *} %S K
fs3 %C elle K fs3 {* 6 6 *} %S V fs3 %C avait W fs3 %P projeté z ms. %G %E : . {* KVNOKV *} {*
1234566*}%RD21K<V%RD32V<N%RD460>V%RA43N/O%RD5 3 N< aK%RD6
5 K < V %Fin. On notera que nous ne retenons ici que l'arbre d'analyse sans les relations entre syntagmes.

Extraction automatique de motifs syntaxiques

ieditﬂ (x[l..i — l],y[l..ﬂ) + destruction(x[i])
editw (x[l..i], y[l..]]) = min{ editw (x[l..i — l],y[l..j — 1]) + substitution (x[i], y[j])
ieditM(x[1..i],y[1..j—1])+insertion(y[]])

3.2 Extension du modéle d’édition aux arbres

Le modéle d’édition peut étre aisément étendu aux arbres et aux foréts, mais dans le cas général
la complexité inhérente au calcul, rend impossible son utilisation dans des algorithmes
d’extraction de motifs. II a été démontré (Zhang K 1993) que certaines procédures efﬁcaces
existent, sous des conditions trés strictes, mais les restrictions qu’elles imposent interdisent leur
emploi pour des problemes pratiques. Nous avons montré dans (Ganascia 2001) qu’en lirr1itant
les entrées structurées a des ASO, il est possible de construire un nouvel algorithme efficace
d’extraction de motifs. Cet algorithme prend pour entrée un immense ASO et engendre des
classes de ASO semblables qui ont plusieurs occurrences d’apparitions dans l’ASO d’entrée.

Puisque l’article n’est pas destiné a présenter le détail des algorithmes, nous donnerons juste
une idée intuitive de la fagon dont la distance d’édition est étendue aux ASO. Toutefois, avant
cela, notons que, les arbres étant stratifiés, la classe de chaque noeud se réfere directement au
niveau de ce noeud dans l’arbre. De ce fait, la comparaison de deux séquences de noeuds
provenant de l’exploration a main gauche de deux arbres est équivalente a la comparaison de ces
deux arbres. Tenant compte de cette remarque, la distance d’édition entre deux ASO se réduit a
la distance d’édition entre les deux séquences de noeuds produites par l’exploration a main
gauche de ces deux ASO.

De fagon plus formelle, en dénotant pmg(T) l’exploration a main gauche de l’ASO, c’est-a-dire
la séquence des noeuds visités par une exploration en profondeur d’abord, la distance d’édition
editm (T, T’) entre deux ASO T et T’ peut s’exprimer par edit(pmg(T), pmg(T’)).

4 Construction du graphe de similarité

Utilisant la distance d’édition, un graphe étiqueté appelé le graphe de similarite’ est construit. Ce
graphe enregistre la similarité entre les motifs quand ceux-ci ne sont pas trop éloignés,
autrement dit quand leur distance est inférieure a une certain seuil. Plus exactement, on dérive
une mesure de similarite’ entre motifs a partir de la distance d’édition. Rappelons qu’une mesure
de similarité est une fonction binaire positive et symétrique qui atteint son maximum lorsque ses
deux arguments sont identiques (voir par exemple Saporta 1990). De fagon a ce que les
approximations tolérées soient plus ou moins proportionnelles a la longueur du motif, pour ne
pas avantager trop fortement les petits motifs, cette longueur a été introduite dans le calcul de la
similarité pour pondérer la distance d'édition. Parmi toutes les formules de calcul de sirnilarité
envisageables, la suivante s’est avérée tout a fait satisfaisante 2

1
1+oc x (edit(i, j)/Ir1in(length(i),length(j)))4

Soc(i9j)=

Remarque : cc est un nombre positif qui sert de parametre. La valeur usuelle employée est 0,01.

Le graphe de similarité est d’une importance cruciale ; c’est l’entrée principale du module de
classiﬁcation. De plus, il contient tous les motifs qui généralisent les sous-arbres de l’ASO
donné en entrée. Notons que cette généralisation implicite est un point clef dans l’ensemble de
l’algorithme, car les motifs engendrés incluent les arbres ordonnés non équilibrés. Dans le cas

Jean-Gabriel Ganascia

des arbres d’analyse syntaxique, ceci signifie que les motifs engendres peuvent ressembler au

suivant (voir ﬁgure 3)

Groupe Groupe Groupe Groupe Groupe Groupe Groupe
cat: K cat: V cat: N cat: 0 cat: K cat: V cat: G
Centre Centre Centre Connecteur
cat: K cat: 0 cat: K cat: E

mot mot mot
II I II qui II II  ll

Figure 3 : motif non equilibre

Plus precisement, le graphe de sirnilarite d’un arbre T contient toutes les paires de sous-motifs
de T semblables eu egard a la distance d’edition, ou plus exactement a la mesure de similarite,
de sorte que cette mesure soit superieure a un certain seuil. En d’autres termes, ses noeuds
correspondent aux sous-arbres de T et ses arcs aux paires de sous-arbres etiquetees par la
mesure de sirnilarite. Toutefois, le graphe de sirnilarite ne contient pas toutes les paires de
motifs, mais seulement celles de motifs similaires. En prenant en compte les proprietes
mathématiques de la mesure de sirnilarite (voir Ganascia 2001), il est possible de reduire
considerablement la complexite algorithrnique de la procedure de construction du graphe de
similarite.

5 Algorithme de classiﬁcation

La derniere étape correspond a l’extraction de motifs, operation qui se subdivise en deux etapes
logiques, la catégorisation au cours de laquelle des classes de motifs sirnilaires sont construites,
et la description qui attribut un nom, si possible significatif, a chacune des classes.

5.1 Catégorisation

Au cours de la categorisation, les motifs semblables sont regroupes. Puisque le graphe de
sirnilarite enregistre toutes les similarites entre motifs, il est naturel d’extraire les classes de
motifs semblables a partir de ce graphe. Toutefois il existe beaucoup de methodes differentes
pour construire de telles classes.

Les approches classiques detectent des sous-graphes fortement connectes (voir Karp et al.
1972). Quelques personnes ont propose des algorithmes pour detecter des k-cliques appartenant
au graphe de similarite, c’est-a-dire des sous-graphe totalement interconnectes comprenant k
noeuds. La plupart de ces algorithmes sont employes dans le cas de repetitions exactes entre
objets. Il sont generalisables a n’importe quelle relation d’equivalence. Il est aussi possible de
les generaliser a des relations non transitives (Soldano et al. 1995), mais c’est au prix d’une tres
forte complexite.

Nous avons choisi ici une approche beaucoup plus efﬁcace qui fait appel a l’algorithme dit
« centre étoile >> developpe par Gusﬁeld (Gusfield 1993) pour detecter des homologies dans
des sequences biologiques et reprise par Rolland et Ganascia (Rolland et Ganascia 1999) pour
reperer des motifs musicaux recurrents. Le principe de base est facile a comprendre. Il suffit de
definir la notion d’etoile centree sur un noeud.

Extraction automatique de motifs syntaxiques

Définition : une étoile centrée sur le naeud N est un graphe dont les arretes contiennent le
noeud N. Autrement dit, une étoile centree sur N est composee de tous les noeuds P tels que la
paire {P, N} soit une arréte (voir ﬁgure 4).

Noeud N

 

Figure 4 : graphe et etoile centree sur un noeud N

En faisant appel a une mesure de similarite, l’algo1ithme << centre étoile >> évalue d’abord toutes
les etoiles centrees sur tous les differents noeuds N du graphe de similarite en sommant les
valeurs des similarites des noeuds de chaque étoile au centre N, puis il prend la meilleure, c’est-
a-dire celle dont l’eValuation est la plus elevee. Ensuite les noeuds appartenant a cette étoile sont
marques, et l’algorithme est itéré sur les noeuds non marques du graphe de similarite, jusqu’a
epuisement des noeuds non marques.

5.2 Description

L’etape ﬁnale dans l’algo1ithme de classiﬁcation porte sur la description de chacune des classes
induites. Notre algorithme choisit sirnplement le motif qui maximise la similarite avec les autres
membres de la classe et qui minimise la similarite avec les membres des autres classes. Pour
faciliter l’interpretation il est possible d’adjoindre au resultat le fragment original du texte qui est
couvert par le motif considere. Pour illustrer ce point, considerons a nouveau le motif de la
figure 3 (dans la partie 4) ; il a ete extrait en executant notre programme sur un texte frangais du
XVIII‘ siecle ecrit par Madame de Lafayette et intitulé << La comtesse de Tende >>. Ce motif
generalise l'arbre syntaxique donne dans la ﬁgure 2 (partie 2.2) qui est issu de l'analyse de la
proposition << Elle exécuta ce qu’elle avait projete’ .' >>. Il couvre aussi deux autres propositions
issues du texte de Madame de Lafayette, << Il se joignit un nouveau tourment £1 ceux qu ’elle avait
déjd .' » et << Elle vit toute les raisons qu’il avait de l’aimer ; >>. Ceci signifie que la mesure de
similarite entre ce motif et l’un des arbres derives des arbres syntaxiques de chacune de ces deux
propositions est superieure a un certain seuil. Sous cette condition, ce motif peut etre considere
comme une description de la classe regroupant les trois propositions ci-dessus.

6 Expérimentations

Le systeme a ete teste sur plus de 100 nouvelles et romans tires de la litterature classique du
XVIII‘ ou du XIX“ siecle, et dont les auteurs sont, entre autres, Madame de Lafayette, Guy de
Maupassant, Alphonse Allais, Marcel Schwob, Alphonse Daudet, Eugene Mouton, Hegesippe
Moreau, Georges Sand etc. Les textes obtenus sur le site de la bibliotheque electronique de
Lisieux (http://www.bmlisieux.com) furent d’abord soumis a l’analyseur morpho-syntaxique
de Jacques Vergnes, puis les sequences resultantes d’arbres syntaxiques furent transformees en
un ASO.

6.1 Efficacité

D’un point de vue pratique, nous avons etudie la complexite empirique de notre algorithme en
reliant le temps d’execution, exprime en seconde, a la taille du texte d’entree, exprimee en
milliers de mots. En reportant sur une echelle logarithmique, et en appliquant une regression
lineaire, il apparait clairement (voir ﬁgure 5) que le coefﬁcient de regression, c’est-a-dire la
pente de la droite de regression, est egal a 2. Ceci prouve, empiriquement, que la complexite
temporelle est quadratique.

Jean-Gabriel Ganascia

Ce premier résultat empirique est tres satisfaisant car la complexité théorique de notre algorithme
est au minimum quadratique avec la taille des entrées. En effet, le calcul du graphe de similarité
passe par l’exploration de toutes les paires de motifs. Comme les textes sont représentés par une
structure arborescente, le nombre de sous-arbres et donc le nombre de motifs est linéaire avec le
nombre de phrases. De la sorte, la complexité globale ne peut pas étre inférieure an ce qu’elle est.

Temps d'exécution(diagramme LOG LOG)

Q Total time :Linear(Tota| time) l

      

4 ,
E J1. J C) .

-u g .5 —

E .2"

3 E 2,5 *

Ln :: Q

E E 2 * . Q‘|nterpo|ation linéaire (temps total)
I.-1  *1”?

E“ E 0

a 3', I ’

|- at

—0,2 0 0,2 0,4 0,6 0,8 1 1,2 1,4
Taille des textes en milliers de mots(éch. logarithmique)

Figure 5 : temps d’exécution (en secondes) en fonction de la taille des textes (en 103 mots).

Pour éviter les malentendus, précisons que dans le cas de répétitions exactes (Karp et al. 1972),
la procédure est bien plus efficace, mais que lorsqu'on recherche des répétitions
approximatives, il en Va tout autrement.

Le systeme a été implémenté en C++ et testé sur un ordinateur Macintosh G3 avec un
processeur a 300 MHz. Le temps d’exécution est compris entre quelques secondes pour extraire
des motifs syntaxiques d’une nouvelle tandis que dans le cas d’un roman complet il prend une
heure ou plus. Ceci signifie qu’il est possible d’appliquer notre algorithme sur des livres entiers,
mais pas sur l’oeuvre intégrale d’un auteur. Toutefois, comme nous allons le montrer dans la
prochaine sous-partie, les résultats sont déja suffisamment riches pour étre tres utiles.

6.2 Exemples de motifs extraits

Le programme d’extraction de motifs est complété par une procédure de discrimination. Etant
donné deux textes, cette procédure détecte les motifs récurrents couvrant de multiples
occurrences d’une structure syntaxique dans le premier texte sans détecter aucune occurrence de
cette structure dans le second. Cette procédure a été employée pour détecter des structures
syntaxiques caractéristiques d’un auteur, c’est-a-dire qui le distinguent d’autres. L’auteur choisi
est Madame de Lafayette avec deux textes, une nouvelle intitulée << La comtesse de Tende » et
un roman connu, « La princesse de Cléves >>. T rois auteurs du XIX“ furent utilises dans la
procédure de discrimination: Guy de Maupassant, Georges Sand et Marcel Schwob. Plus
précisément le corpus employé contient les nouvelles suivantes : de Guy de Maupassant, La
peur (1882), La peur (1884), La veillée, La rempailleuse, Pierrot, En mer, Un normand, Ce
cochon de Morin et Les sabots, de Georges Sand, La fée poussiére, Le gnome des huitres, Le
marteau rouge, L’0rgue du titan et La fée aux gros yeux, de Marcel Schwob, Arachné, Béatrice,
Sur les dents, Le Dom, L'h0mme double, Le fort, Gabelous, Parabole, Lilith, Conte des aeufs
et Les portes de l’0pium.

Extraction automatique de motifs syntaxiques

Les trois motifs suivants (voir ﬁgure 6) sont présents dans les textes de Madame de Lafayette,
sans l’étre dans les autres.

GVOUPG Groupe Groupe
Cat 0|‘ eat: ppN cat: 2
ms3 s3 mp
Connect. | Périph. Centre Connect. I Connect. I Centre Périph. Périph. Centre
cat: q cat: M cat: I cat: p cat: p cat: 8 cat] can] cat; 2
s ms3 33 mp
mot mot mot mot mot mot
Hdeﬂ VV|eVV Ildl ll Ilenll Ivbienlv Vlfaitsvl

Figure 6 : trois motifs caractéristiques de Madame de Lafayette

Le premier motif couvre, entre autres, les expressions récurrentes suivantes : "a le servir", "de
le supplier", "de l’éviter", "de l’aimer"... Le second, "sans en avoir", "d’en avoir", "d’en
attendre", "d'en garantir”, "d’en faire"... Quant au troisieme, il couvre trois fragments:
"admirablement bienfaits", "parfaitement bienfaits", "tres bienfait"

11 y a bien d’autres spécificités syntaxiques caractéristiques de l’oeuvre de Madame de Lafayette
qui se dégagent de notre analyse. Parmi celles-ci, Voici une structure tres fréquemment répétée

(voir ﬁgure 7)

Groupe Groupe Groupe Groupe Groupe
cat: N cat: pN cat: V cat: N cat: G

Connecteur
cat: E

Figure 7 : une ﬁgure tres fréquente dans l’0euVre de Madame de Lafayette

Cette ﬁgure couvre tous les fragments suivants de Madame de Lafayette (et bien d’autres du
meme auteur) tandis qu’elle est pratiquement absente des textes des trois autres auteurs

considérés : "Le prince de Navarre prit la parole .' , "La reine de Navarre avait ses favorites",
H ‘ ’ ' ' H H ' ' ' ' H
Madame de Cleves ne repondit rien , Monsieur de Nemours prit la reine dauphine ,...

I1 existe aussi beaucoup de fragments moins proches qui sont couverts par ce motifs. En voila
quelques uns : "Madame de Chartres avait une opinion oppose’e ;", "Le comte de Tende aimait
déja le Chevalier de Navarre ; ", "Le comte de Tende sentit son procéde’ dans toute sa dureté ; ",

"La comtesse regut ce billet avecjoie ", ...

A cet égard, notons que les mots << comte », « prince », « madame », << reine »,
« comtesse », « monsieur » sont bien souvent appariés dans ces motifs. Aucune sémantique
n’ayant été donnée a notre algorithme, cet exemple montre comment la syntaxe Véhicule parfois
la sémantique. Cette étude mérite bien évidemment d’ étre poursuivie plus longuement.

Et, comme le lecteur peut l’imaginer, il y a bien d’autres hypotheses que l’on souhaiterait
explorer a partir des résultats fournis par cet outil.

Jean-Gabriel Ganascia

7 Conclusion

Une nouvelle procedure de fouille de texte a été décrite dans cet article. Nous avons prouvé
qu’elle était efﬁciente et féconde. La critique littéraire pourrait bien évidemment bénéﬁcier d’un
tel outil. Ainsi, il pourrait étre inséré dans un environnement de lecture électronique pour aider
les chercheurs ou les étudiants. De meme, les didacticiens pourraient le mettre a proﬁt dans
l’enseignement des langues. Enfin, les motifs extraits pourraient étre réutilisés dans une
procédure de synthese du langage naturel. Ainsi, le traitement du langage naturel pourrait
bénéﬁcier des résultats de cette recherche.

Références

Crochemore M, RytterW (1994), Text Algorithms, “Approximate pattern matching”, pp. 237-
25 1 .

Ganascia J -G (2001) Extraction of Recurrent Patterns from Stratiﬁed Ordered Trees, LIP6
internal report.

Gusﬁeld D. (1993) Eﬁicient methods for multiple sequence Alignment with Guaranteed Error
Bounds, Bull. Math. Biol., 55:141-154.

Karp R M., Miller R E., Rosenberg A L. (1972), Rapid Identification of Repeated Patterns in
Strings, Trees and Arrays, in Proc. 4”‘ Annu. ACM Symp. Theory of Computing, pp. 125-
136.

LandraudA M., Avril J -F, Chrétienne P (1989) An algorithm for Finding a Common Structure
Shared by a Family of Strings, IEEE transactions on Pattern Analysis and Machine Intelligence,
11 (8), pp. 890-895.

Lecomte J , (1998) BRILL14-J L5 / WINBRILL-0.3, user's manual available at INALF.

Rolland, P-Y, Ganascia J -G, (1999). Musical Pattern Extraction and Similarity Assessment. In
Miranda, E. (ed.). Readings in Music and Artificial Intelligence. Contemporary Music Studies -
V0120. Harwood Academic Publishers.

Sagot, Viari A. (1996) A Double Combinatorial Approach to Discovering Patterns in Biological
Sequences, Combinatorial Pattern Matching, Springer Verlag, LNCS 1075, 168-208

SankoffD., Kruskal J .B. (1983), Time Warps, String Edits and Macromolecules: The Theory
and Practice of Sequence Comparison, Addison-Wesley, Reading, Mass..

Saporta G. (1990), Probabilités, analyse des données et statistique, TECHNIP Publishing
Company, Paris.

Soldano H., Viari A. Champesme M. (1995), Searching for Flexible Repeated Patterns Using a
new Transitive Similarity Relation", Pattern Recognition Letters, 16:233-246.

Vergne J ., (1999) Analyseur linéaire avec dictionnaire partiel, décembre 1999, convention
d’utilisation de l’analyseur de Jacques Vergne.

Zhang K. (1993) Fast algorithms for the constrained editing distance between ordered labeled
trees and related problems, report N°361, Department of computer science, University of
Western Ontario, London, Ontario, Canada.

