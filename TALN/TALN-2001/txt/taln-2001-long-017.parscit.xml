<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>M Crochemore</author>
<author>W Rytter</author>
</authors>
<title>Text Algorithms, “Approximate pattern matching”,</title>
<date>1994</date>
<pages>237--251</pages>
<contexts>
<context position="11909" citStr="Crochemore &amp; Rytter 1994" startWordPosition="1777" endWordPosition="1780">eur cat: K cat: V cat: N cat: O cat: K cat: W cat: z cat: E ms. mot mot mot mot mot mot mot mot &amp;quot; ellle &amp;quot; &amp;quot;exécuta&amp;quot; &amp;quot;ce&amp;quot; &amp;quot; qu&apos; &amp;quot; &amp;quot; elle &amp;quot; &amp;quot;avait&amp;quot; &amp;quot;projeté&amp;quot; &amp;quot; : &amp;quot; Figure 2 : ASO construit à partir de l&apos;analyse syntaxique d&apos;une proposition simple 3 Distance d’édition Les distances d’édition ont été beaucoup utilisées pour détecter des appariements approximatifs sur des chaînes de caractères (Sankoff &amp; Kruskal 1983), tout particulièrement en biologie moléculaire (Sagot et al. 1996) et en musique (Rolland et Ganascia 1999). Le lecteur intéressé trouvera un panorama complet de ces techniques dans (Crochemore &amp; Rytter 1994). Nous rappellerons simplement quelques principes de base. Définition : une édition est une transformation élémentaire qui remplace un caractère dans une chaîne ou plus généralement un nœud dans un arbre, par un autre, éventuellement vide. Par exemple, une substitution est une édition qui transforme un caractère d’une chaîne en un autre à la même position. Une insertion (respectivement une destruction) qui insère (respectivement détruit) un caractère dans une chaîne est aussi une édition. Définition : une distance d’édition entre deux chaînes ou deux arbres correspond au nombre minimal d’éditi</context>
</contexts>
<marker>Crochemore, Rytter, 1994</marker>
<rawString>Crochemore M, Rytter W (1994), Text Algorithms, “Approximate pattern matching”, pp. 237-251.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J-G Ganascia</author>
</authors>
<title>Extraction of Recurrent Patterns from Stratified Ordered Trees, LIP6 internal report.</title>
<date>2001</date>
<contexts>
<context position="14571" citStr="Ganascia 2001" startWordPosition="2253" endWordPosition="2254">]) = min edit (x[1..i −1],y[1..j −1]) + substitution (x[i], y[j])  edit (x[1..i], y[1..j−1]) + insertion(y[ j]) 3.2 Extension du modèle d’édition aux arbres Le modèle d’édition peut être aisément étendu aux arbres et aux forêts, mais dans le cas général la complexité inhérente au calcul, rend impossible son utilisation dans des algorithmes d’extraction de motifs. Il a été démontré (Zhang K 1993) que certaines procédures efficaces existent, sous des conditions très strictes, mais les restrictions qu’elles imposent interdisent leur emploi pour des problèmes pratiques. Nous avons montré dans (Ganascia 2001) qu’en limitant les entrées structurées à des ASO, il est possible de construire un nouvel algorithme efficace d’extraction de motifs. Cet algorithme prend pour entrée un immense ASO et engendre des classes de ASO semblables qui ont plusieurs occurrences d’apparitions dans l’ASO d’entrée. Puisque l’article n’est pas destiné à présenter le détail des algorithmes, nous donnerons juste une idée intuitive de la façon dont la distance d’édition est étendue aux ASO. Toutefois, avant cela, notons que, les arbres étant stratifiés, la classe de chaque nœud se réfère directement au niveau de ce nœud dan</context>
<context position="18312" citStr="Ganascia 2001" startWordPosition="2856" endWordPosition="2857">précisément, le graphe de similarité d’un arbre T contient toutes les paires de sous-motifs de T semblables eu égard à la distance d’édition, ou plus exactement à la mesure de similarité, de sorte que cette mesure soit supérieure à un certain seuil. En d’autres termes, ses nœuds correspondent aux sous-arbres de T et ses arcs aux paires de sous-arbres étiquetées par la mesure de similarité. Toutefois, le graphe de similarité ne contient pas toutes les paires de motifs, mais seulement celles de motifs similaires. En prenant en compte les propriétés mathématiques de la mesure de similarité (voir Ganascia 2001), il est possible de réduire considérablement la complexité algorithmique de la procédure de construction du graphe de similarité. 5 Algorithme de classification La dernière étape correspond à l’extraction de motifs, opération qui se subdivise en deux étapes logiques, la catégorisation au cours de laquelle des classes de motifs similaires sont construites, et la description qui attribut un nom, si possible significatif, à chacune des classes. 5.1 Catégorisation Au cours de la catégorisation, les motifs semblables sont regroupés. Puisque le graphe de similarité enregistre toutes les similarités</context>
</contexts>
<marker>Ganascia, 2001</marker>
<rawString>Ganascia J-G (2001) Extraction of Recurrent Patterns from Stratified Ordered Trees, LIP6 internal report.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Gusfield</author>
</authors>
<title>Efficient methods for multiple sequence Alignment with Guaranteed Error Bounds ,</title>
<date>1993</date>
<journal>Bull. Math. Biol.,</journal>
<pages>55--141</pages>
<contexts>
<context position="19832" citStr="Gusfield 1993" startWordPosition="3077" endWordPosition="3078">roposé des algorithmes pour détecter des k-cliques appartenant au graphe de similarité, c’est-à-dire des sous-graphe totalement interconnectés comprenant k nœuds. La plupart de ces algorithmes sont employés dans le cas de répétitions exactes entre objets. Il sont généralisables à n’importe quelle relation d’équivalence. Il est aussi possible de les généraliser à des relations non transitives (Soldano et al. 1995), mais c’est au prix d’une très forte complexité. Nous avons choisi ici une approche beaucoup plus efficace qui fait appel à l’algorithme dit « centre étoile » développé par Gusfield (Gusfield 1993) pour détecter des homologies dans des séquences biologiques et reprise par Rolland et Ganascia (Rolland et Ganascia 1999) pour repérer des motifs musicaux récurrents. Le principe de base est facile à comprendre. Il suffit de définir la notion d’étoile centrée sur un nœud. Extraction automatique de motifs syntaxiques Définition : une étoile centrée sur le nœud N est un graphe dont les arrêtes contiennent le nœud N. Autrement dit, une étoile centrée sur N est composée de tous les nœuds P tels que la paire {P, N} soit une arrête (voir figure 4). Nœud N Nœud N Figure 4 : graphe et étoile centrée </context>
</contexts>
<marker>Gusfield, 1993</marker>
<rawString>Gusfield D. (1993) Efficient methods for multiple sequence Alignment with Guaranteed Error Bounds , Bull. Math. Biol., 55:141-154.</rawString>
</citation>
<citation valid="true">
<authors>
<author>R M Karp</author>
<author>R E Miller</author>
<author>A L Rosenberg</author>
</authors>
<title>Rapid Identification of Repeated Patterns in Strings, Trees and Arrays,</title>
<date>1972</date>
<booktitle>in Proc. 4th Annu. ACM Symp. Theory of Computing,</booktitle>
<pages>125--136</pages>
<contexts>
<context position="19192" citStr="Karp et al. 1972" startWordPosition="2981" endWordPosition="2984">ques, la catégorisation au cours de laquelle des classes de motifs similaires sont construites, et la description qui attribut un nom, si possible significatif, à chacune des classes. 5.1 Catégorisation Au cours de la catégorisation, les motifs semblables sont regroupés. Puisque le graphe de similarité enregistre toutes les similarités entre motifs, il est naturel d’extraire les classes de motifs semblables à partir de ce graphe. Toutefois il existe beaucoup de méthodes différentes pour construire de telles classes. Les approches classiques détectent des sous-graphes fortement connectés (voir Karp et al. 1972). Quelques personnes ont proposé des algorithmes pour détecter des k-cliques appartenant au graphe de similarité, c’est-à-dire des sous-graphe totalement interconnectés comprenant k nœuds. La plupart de ces algorithmes sont employés dans le cas de répétitions exactes entre objets. Il sont généralisables à n’importe quelle relation d’équivalence. Il est aussi possible de les généraliser à des relations non transitives (Soldano et al. 1995), mais c’est au prix d’une très forte complexité. Nous avons choisi ici une approche beaucoup plus efficace qui fait appel à l’algorithme dit « centre étoile </context>
<context position="24360" citStr="Karp et al. 1972" startWordPosition="3822" endWordPosition="3825"> une structure arborescente, le nombre de sous-arbres et donc le nombre de motifs est linéaire avec le nombre de phrases. De la sorte, la complexité globale ne peut pas être inférieure à ce qu’elle est. Temps d&apos;exécution( diagramme LOG LOG) Total time Linear (Total time) 4 3,5 3 2,5 2 Interpolation linéaire (temps total) 1,5 1 0,5 0 -0,2 0 0,2 0,4 0,6 0,8 1 1,2 1,4 Taille des textes en milliers de mots( éch. logarithmique) Figure 5 : temps d’exécution (en secondes) en fonction de la taille des textes (en 103 mots). Pour éviter les malentendus, précisons que dans le cas de répétitions exactes (Karp et al. 1972), la procédure est bien plus efficace, mais que lorsqu&apos;on recherche des répétitions approximatives, il en va tout autrement. Le système a été implémenté en C++ et testé sur un ordinateur Macintosh G3 avec un processeur à 300 MHz. Le temps d’exécution est compris entre quelques secondes pour extraire des motifs syntaxiques d’une nouvelle tandis que dans le cas d’un roman complet il prend une heure ou plus. Ceci signifie qu’il est possible d’appliquer notre algorithme sur des livres entiers, mais pas sur l’œuvre intégrale d’un auteur. Toutefois, comme nous allons le montrer dans la prochaine sou</context>
</contexts>
<marker>Karp, Miller, Rosenberg, 1972</marker>
<rawString>Karp R M., Miller R E., Rosenberg A L. (1972), Rapid Identification of Repeated Patterns in Strings, Trees and Arrays, in Proc. 4th Annu. ACM Symp. Theory of Computing, pp. 125-136.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A M Landraud</author>
<author>J-F Avril</author>
<author>P Chrétienne</author>
</authors>
<title>An algorithm for Finding a Common Structure Shared by a Family of Strings,</title>
<date>1989</date>
<journal>IEEE transactions on Pattern Analysis and Machine Intelligence,</journal>
<volume>11</volume>
<issue>8</issue>
<pages>890--895</pages>
<marker>Landraud, Avril, Chrétienne, 1989</marker>
<rawString>Landraud A M., Avril J-F, Chrétienne P (1989) An algorithm for Finding a Common Structure Shared by a Family of Strings, IEEE transactions on Pattern Analysis and Machine Intelligence, 11 (8), pp. 890-895.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Lecomte</author>
</authors>
<date>1998</date>
<note>BRILL14-JL5 / WINBRILL-0.3, user&apos;s manual available at INALF.</note>
<contexts>
<context position="7083" citStr="Lecomte 1998" startWordPosition="1020" endWordPosition="1021">’est-à-dire à des formes canoniques de noms ou de verbes. Soulignons toutefois que notre approche n’est pas restreinte Extraction automatique de motifs syntaxiques à une décomposition syntaxique en groupe non récursifs. La seule limitation porte sur le résultat de la phase initiale d’analyse qui doit s’exprimer sous forme d’un ASO (Arbre Structuré Ordonné) (voir sous-partie suivante). Les expérimentations conduites avec cette architecture ont fait appel à deux traitements différents. Le premier utilise le catégoriseur Winbrill-0.3, dont la base de connaissance a été enrichie par l’INALF-CNRS (Lecomte 1998). Cet outil étiquette simplement les mots, sans extraire de groupes. Le second fait appel à l’analyseur Vergne-98 écrit par Jacques Vergnes (voir h ttp://www.info.unicaen.fr/~jvergne s et (Vergnes 1999)) au GREYC (Groupe de Recherche en Informatique, Image, Instrumentation de Caen). Pour des raisons de place, nous n’évoquerons ici que la seconde expérimentation avec l’analyseur de Jacques Vergnes. 2.2 Arbre Stratifiés Ordonnés (ASO) Selon une définition classique, un arbre ordonné est un arbre dans lequel les relations de gauche à droite, entre fils d’un même nœud, sont porteuses d’information</context>
</contexts>
<marker>Lecomte, 1998</marker>
<rawString>Lecomte J, (1998) BRILL14-JL5 / WINBRILL-0.3, user&apos;s manual available at INALF.</rawString>
</citation>
<citation valid="true">
<authors>
<author>P-Y Rolland</author>
<author>J-G Ganascia</author>
</authors>
<title>Musical Pattern Extraction and Similarity Assessment.</title>
<date>1999</date>
<booktitle>Readings in Music and Artificial Intelligence. Contemporary Music Studies -Vol 20.</booktitle>
<editor>In Miranda, E. (ed.).</editor>
<publisher>Harwood Academic Publishers.</publisher>
<marker>Rolland, Ganascia, 1999</marker>
<rawString>Rolland, P-Y, Ganascia J-G, (1999). Musical Pattern Extraction and Similarity Assessment. In Miranda, E. (ed.). Readings in Music and Artificial Intelligence. Contemporary Music Studies -Vol 20. Harwood Academic Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Viari A Sagot</author>
</authors>
<title>A Double Combinatorial Approach to Discovering Patterns in Biological Sequences, Combinatorial Pattern Matching,</title>
<date>1996</date>
<volume>1075</volume>
<pages>168--208</pages>
<publisher>Springer Verlag,</publisher>
<location>Reading, Mass..</location>
<marker>Sagot, 1996</marker>
<rawString>Sagot, Viari A. (1996) A Double Combinatorial Approach to Discovering Patterns in Biological Sequences, Combinatorial Pattern Matching, Springer Verlag, LNCS 1075, 168-208 Sankoff D., Kruskal J.B. (1983), Time Warps, String Edits and Macromolecules: The Theory and Practice of Sequence Comparison, Addison-Wesley, Reading, Mass..</rawString>
</citation>
<citation valid="true">
<authors>
<author>G Saporta</author>
</authors>
<title>Probabilités, analyse des données et statistique,</title>
<date>1990</date>
<publisher>TECHNIP Publishing Company,</publisher>
<location>Paris.</location>
<contexts>
<context position="16396" citStr="Saporta 1990" startWordPosition="2539" endWordPosition="2540">r par edit(pmg(T), pmg(T’)). 4 Construction du graphe de similarité Utilisant la distance d’édition, un graphe étiqueté appelé le graphe de similarité est construit. Ce graphe enregistre la similarité entre les motifs quand ceux-ci ne sont pas trop éloignés, autrement dit quand leur distance est inférieure à une certain seuil. Plus exactement, on dérive une mesure de similarité entre motifs à partir de la distance d’édition. Rappelons qu’une mesure de similarité est une fonction binaire positive et symétrique qui atteint son maximum lorsque ses deux arguments sont identiques (voir par exemple Saporta 1990). De façon à ce que les approximations tolérées soient plus ou moins proportionnelles à la longueur du motif, pour ne pas avantager trop fortement les petits motifs, cette longueur a été introduite dans le calcul de la similarité pour pondérer la distance d&apos;édition. Parmi toutes les formules de calcul de similarité envisageables, la suivante s’est avérée tout à fait satisfaisante : sα (i, j) 1 = 1+α × (edit(i, j)/ min(length(i),length(j)))4 Remarque : α est un nombre positif qui sert de paramètre. La valeur usuelle employée est 0,01. Le graphe de similarité est d’une importance cruciale ; c’es</context>
</contexts>
<marker>Saporta, 1990</marker>
<rawString>Saporta G. (1990), Probabilités, analyse des données et statistique, TECHNIP Publishing Company, Paris.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Soldano</author>
<author>Viari A Champesme M</author>
</authors>
<title>Searching for Flexible Repeated Patterns Using a new Transitive Similarity Relation&amp;quot;,</title>
<date>1995</date>
<journal>Pattern Recognition Letters,</journal>
<pages>16--233</pages>
<marker>Soldano, M, 1995</marker>
<rawString>Soldano H., Viari A. Champesme M. (1995), Searching for Flexible Repeated Patterns Using a new Transitive Similarity Relation&amp;quot;, Pattern Recognition Letters, 16:233-246.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Vergne</author>
</authors>
<title>Analyseur linéaire avec dictionnaire partiel, décembre 1999, convention d’utilisation de l’analyseur de Jacques Vergne.</title>
<date>1999</date>
<marker>Vergne, 1999</marker>
<rawString>Vergne J., (1999) Analyseur linéaire avec dictionnaire partiel, décembre 1999, convention d’utilisation de l’analyseur de Jacques Vergne.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Zhang</author>
</authors>
<title>Fast algorithms for the constrained editing distance between ordered labeled trees and related problems, report N°361, Department of computer science,</title>
<date>1993</date>
<institution>University of Western</institution>
<location>Ontario, London, Ontario, Canada.</location>
<marker>Zhang, 1993</marker>
<rawString>Zhang K. (1993) Fast algorithms for the constrained editing distance between ordered labeled trees and related problems, report N°361, Department of computer science, University of Western Ontario, London, Ontario, Canada.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>