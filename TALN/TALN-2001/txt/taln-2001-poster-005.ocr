TALN 2001, Tours, 2-5 juillet 2001

Un Modéle Cognitif pour la Résolution de la Référence dans le
Dialogue Homme-Machine

Sébastien Gérardl et J ean—Pau1 Sansonneti

LlMSI—CNRS — Université de Paris—Sud
Batiment 508 — 91403 Orsay, France
{ gerardl, jpsi } @1imsi.fr

Résumé — Abstract

Dans cette étude, nous proposons un modele pour la resolution de la référence dans le cadre
du dialogue homme-machine. Partant de considerations psychologiques sur la nécessité d'un
partage du systeme inférenciel pour perrnettre la communication, nous déﬁnissons un
fonnalisme basé sur des regles de production associées a des coﬁts cognitifs. Au travers
d'exemples, nous montrons comment ce forrnalisme peut étre utilisé comme cadre pour
intégrer le traitement de différents phénomenes liés a la référence, et comment cette
intégration peut conduire a des interfaces en langue naturelle plus efﬁcaces.

In this study, we propose a model for reference resolution in the context of human-computer
interaction. Starting from psychological considerations on the necessity of a common system
of inferential strategies in order to allow communication, we deﬁne a formalism based on
production rules associated with cognitive costs. Through examples, we will show how this
formalism can be used as a framework to integrate the processing of various reference
phenomena, and how this integration can lead to more efﬁcient interactive systems.

Mots - Clefs : Dialogue Homme-Machine, traitement de la référence.

1 Introduction

Comme indiqué par (Bach et Harnish 1979), la communication est possible parce que le
locuteur et l’auditeur partagent le meme systeme de strategies inférencielles, ce qui permet a
l’auditeur de déduire les intentions communicatives du locuteur d’apres ses dires. Ce point de
Vue se rapproche de celui de Grice (1957, 1975), qui tente de mettre en évidence les regles
que l’on doit suivre pour que le déroulement de la conversation soit correct. Néanmoins, cette
théorie laisse ouvertes certaines questions particulierement cruciales pour une mise en oeuvre
sur ordinateur - notamment une deﬁnition formelle de la notion de pertinence d'une
proposition, centrale a cette théorie. Sperber et Wilson (1982, 1986) cherchent a remédier a
ces questions en donnant une definition plus précise de la notion de pertinence : une

S. Gérard et J.P. Sansonnet

proposition P sera dite pertinente dans un contexte C si et seulement si P a au moins une
implication contextuelle (i.e. non déductible de la seule proposition P). Un locuteur
respectant le principe de pertinence doit donc choisir, parmi les énoncés possibles, l’un de
ceux qui perrnettent le plus d’implications contextuelles, dans un contexte le plus petit
possible et le plus facilement accessible a l’auditeur. Symétriquement, le destinataire est
potentiellement producteur : pour comprendre il reconstruit le systeme de reférence et ses
intentions, puis integre les contenus a son propre systeme de référence. Culioli (1971, 1985)
parle ainsi de co-enonciation plutot que d’énonciation et de destination.

Dans le cadre de systemes de dialogue homme-machine (DHM), afﬁn de garantir l'ergonomie
des interpretations construites par la machine, c'est a dire leur conforrnite aux attentes de
l'utilisateur, le fonctionnement du systeme n1is en oeuvre peut avantageusement tirer proﬁt
d'une analogie avec la cognition humaine. Le modele presente ici pour le traitement de la
réference est base sur cette hypothese 2 si l'on peut trouver une "bonne" representation du
contexte, et des regles d'inférences "aussi proches que possible" de celle d'un locuteur
humain, alors l'interpretation correcte d'une intervention est celle avec le plus d'implications
contextuelles, et avec le coin‘ cognitif le plus faible. La difﬁculte est alors de déterminer dans
un premier temps quelles sont ces "bonnes" regles d'inférence et representations, puis dans un
deuxieme temps de determiner les coﬁts cognitifs. Nous ne prétendons pas avoir atteint cet
objectif ; nous nous sommes plutot attachés a déﬁnir un cadre permettant d'intégrer differents
aspects du traitement automatique des langues dans un formalisme unique. Pour représenter
les regles d'inférence, nous avons choisi d'utiliser des regles de production (Newell, 1990 ;
Lugger 1994) car ce formalisme a permis de bons resultats tant pour l'implementation
d'algorithmes de recherche que pour modéliser la maniere dont l'homme résout des
problemes. Dans notre modele, une intervention est une expression que le systeme Va réecrire
de toutes les manieres possibles en utilisant ces regles et le contexte.

Notre these est que pour le traitement de la reference, l'intention - i.e. le fait que le locuteur a
choisi une maniere particuliere d'exprimer quelque chose parn1i toutes celles possibles - doit
etre prise en compte dans le modele : nous déﬁnissons la "bonne" interpretation d'une phrase
comme celle dont le coﬁt cognitif est le plus faible. Ceci conduit a notre déﬁnition
calculatoire du coﬁt cognitif : nous voulons que notre modele d'accessibilite’ suive les mémes
principes que pour la cognition humaine. Pour ceci, nous construisons une estimation
numerique de l'accessibilité en associant des poids numériques a chaque étape du processus
de resolution de la référence. Pour déﬁnir le contexte, nous nous appuyons sur la notion de
vue deﬁnie pour le projet InterViews (Sansonnet, 1999). VDL (View Design Language -
Langage de Conception de Vue) est un formalisme en cours de developpement destiné a
faciliter la conception de médiateurs entre un humain et un composant - logiciel ou matériel.

2 Le processus de résolution de la référence

Considérant qu'un contexte décrit en VDL peut etre peut étre representé au moyen de regles
de production, nous appelons contexte d'interprétation un ensemble ﬁni de couples (R, C’) ou
R est une regle de production - que nous appellerons aussi régle de réécriture, ou régle de
transformation - d'une expression en une autre, et C>0 son coﬁt. Une expression est un arbre
ordonné dont les noeuds sont étiquetés par des symboles, et les feuilles par des symboles ou
des mots. Ces symboles peuvent étre soit des identiﬁeurs de concept (i.e. l'attribut KEY d'un

Un Modéle Cognitif pour la Résolution de la Référence dans le Dialogue Homme Machine

concept de la vue), soit des primitives VDL, soit des annotations de référence. Ces
annotations sont des informations sur le type de la reference qui proviennent du module de
pretraitement ou qui sont produites durant le processus d'interpretation. A l'issue du
pretraitement, une intervention de l'utilisateur .5 est une expression dont les symboles ne
peuvent etre ni des identiﬁeurs de concept, ni des primitives VDL, Une interpretation I
d'une expression 8 est deﬁnie comme une suite ﬁnie de regles de transformation de CI.
I nterpretatz’ons(S) est alors l'ensemble de toutes les interpretations possibles de 8, isomorphe
a {0, 1,  p}N. Le coat d'une interpretation I de 8, note CS (1) est deﬁni comme la somme

des coﬁts elementaires des transformations de I. L'expression obtenue par l'application
successive des regles de transformation de I sur l'expression initiale S est appelee résultat de
l'interpretation de I par 8. Une interpretation I de 8 est dite correcte si son resultat ne
contient que des identiﬁeurs de concepts de la vue ou des primitives VQL (ainsi, l'ensemble
du processus d'interpretation peut etre vu comme la transformation d'une expression ne
contenant que des mots ou des annotations de reference en une expression ne contenant que
des identiﬁeurs de concepts ou des primitives VQL). S est dite comprehensible si elle admet
au moins une interpretation correcte.

De maniere generale, le probleme de determiner si une intervention non ambigue de
l'utilisateur est comprehensible n'est pas decidable. Nous ﬁxons donc une lin1ite superieure au
coﬁt d'une interpretation. Si aucune interpretation correcte n'est trouvee - l'exploration de
l'espace des solutions se fait selon la technique du "branch and bound" (Horowitz and Sahni,
1978) - de coﬁt inferieur a cette limite, alors S est consideree comme non comprehensible.
Reciproquement, des qu'une interpretation correcte de 8 est trouvee, de coﬁt c, alors le
systeme calcule toutes les interpretations de coﬁt inferieur ou egal a c. Meilleures(S) est
inclus dans cet ensemble, et le systeme peut donc determiner Comprehension(S).
L'implementation de ce modele a ete faite en utilisant Mathematica. C'est un moteur de
reecriture symbolique, donc particulierement adapte. Il dispose en outre de puissantes
fonctions de "pattem matching" ce qui permet une ecriture concise des regles de
transformation. Dans cette implementation, nous avons utilise la syntaxe de Mathematica
pour deﬁnir les expressions et les regles de transformation. Pour faciliter l'ecriture des regles,
nous supposons que celles-ci sont locales, c'est a dire qu'elles peuvent s'appliquer a n'importe
quel sous-arbre d'une expression.

3 Reference lexicale

Dans le langage VDL, 2 attributs servent a la designation d'un concept 2 KEY et LEX.
L'attribut KEY, qui sert d'identiﬁeur unique inteme, ne peut evidemment pas etre suppose
connu de l'utilisateur, et n'apparaitra donc jamais dans ses interactions avec le systeme.
L'attribut LEX sert a faire la liaison entre la langue naturelle et cet identiﬁeur inteme. Le
concepteur de la vue peut associer un (ou plusieurs) synset(s) de WordNet (Fellbaum, 1998) a
chaque concept, deﬁnissant ainsi son "sens". Ce que nous appelons reference lexicale est
alors le processus permettant de determiner a quel concept - i.e. a quel identiﬁeur de concept
- correspond un lemme present dans une intervention de l'utilisateur. Fondamentalement, un
mot - une forme ﬂechie - peut etre reecrit en une forme de base s'il existe une regle de
detachement valide permettant cette transformation. Une forme de base peut alors étre
reecrite comme chacun des synset l'incluant. Ceci donne le premier ensemble de synset
associe a un mot cu :

S. Gérard et J.P. Sansonnet

(1) Z‘.0(a))={a0,a1...ap}p20

Un synset peut se réécrire en un identiﬁeur de concept si ce synset est inclu dans l'attribut
LEX de ce concept - il est possible que plusieurs concepts "partagent" un méme synset ; dans
ce cas, le synset pourra etre réécrit en chacun des identiﬁeurs des concepts concemés. Ceci
perrnet a des synonymes stricts (au sens de WordNet) d'étre interprete comme des references
au méme concept. Pour augmenter la ﬂexibilité de la désignation des concepts, nous utilisons
aussi certaines des relations sémantiques déﬁnies dans WordNet (hypéronymie/hyponymie
pour les noms et les Verbes, similarite’ pour les Verbes, adjectifs et adverbes, et
méronymie/holonymie pour les noms.). Un synset peut alors aussi se réécrire en un autre
synset si ces deux synsets sont lies par une de ces relations. Ceci amene a notre déﬁnition
récursive de l'enveloppe sémantique 2(a)) d'un mot :

(2) E,.+1(w)= U(2§(a), 2(w)=U>3,.(w)

7120
oil 7r(a) est l'ensemble des synsets en relation - i.e. l'une des relations sémantiques
precédemment décrites - avec a. L'ensemble EK(w) des concepts qui peuvent étre reférés par

un mot cu est déﬁni comme l'ensemble de tous les concepts de la Vue dont l'attribut LEX
contient au moins un des synset de l'enveloppe de 60 :

(3)  = {c E Vue| Lex(c) m 2(a)) at Q}

4 Référence aux objets

Pour illustrer comment notre modele traite la reference aux objets, nous allons prendre
l'exemple de la reférence a un concept existant de la Vue au moyen d'autres concepts. Nous
notons REF_CONCEPT[c1, c2, c3...] une telle reférence. Nous avons mentionné
precédemment que les concepts VDL sont deﬁnis par des attributs. Ces attributs sont eux-
memes deﬁnis comme des expressions référant a d'autres concepts. Ainsi, nous construisons
a partir du contexte VDL un graphe, le graphe referentiel note GR, ou les noeuds sont
etiquetés par les identiﬁeurs des concepts de la Vue. Deux concepts cl et c2 sont alors relies
par un are (non orienté) si l'un des attributs TYPE, ISA, POF, ACT, INI'T, VAL ou SHOW de
c1 référe c2, ou si l'un des memes attributs de c2 référe a cl.

Nous déﬁnissons alors la regle de transformation (R1), qui Va réécrire tout concept présent
dans une annotation de référence REF_CONCEPT en l'ensemble des noeuds Voisins. Ce
mécanisme s'applique récursivement aux ensembles generés. Symetriquement, la regle (R2)
réécrit deux ensembles de concepts en leur intersection si celle-ci est non vide. Finalement, la
regle de "terminaison" (R3) réécrit REF_CONCEPT [ {c }] en c - dans le cas ou l'interpretation
a permis de discriminer un concept unique - et la regle (R4) réécrit REF_CONCEP'I‘ [ {cl , c2 ,
c3...}] en {c1, c2 , c3...} dans le cas ou l'ambiguité n'a pas pu etre levée de maniere inteme
(elle a un coﬁt superieur a (R3)). Ces regles generent un nombre relativement important
d'interpretations d'une réference REF_CONCEPT . Deux considerations atténuent néanmoins la
portee de cette remarque 2 le contexte exteme a REF_CONCEP'I dans une expression en
invalidera certaines ; le forrnalisme VDL utilisé pour décrire un composant crée un cadre
réferentiel sufﬁsamment contraint pour que les interpretations les plus "naturelles" soient
effectivement celles dont le coﬁt est le plus faible.

Un Modéle Cognitif pour la Résolution de la Référence dans le Dialogue Homme Machine

(R1)_ Vce Vue,REF_coNcEPT[__,c,_]—> REF_CONCEPTl ,{cJ. e Vue| (c, cJ.)e GR __]

‘v’E1,E2 e P(Vue)tq E1 0 E2 at E,

(R2)' REF_CONCEPT[__,E1, _,E2,_]—> REF_CONCEPT[__,E1 n E2,__]

(R3)_ Vc e Vue,REF_CoNCEPT[{c}] —> c
(R4)_ ‘v’Ee P(Vue),REF_CONCEPT[E]—> E

5 Reference aux actions

Pour traiter le probleme de la reference aux actions, nous utilisons le champ TYPE de chaque
concept. Nous deﬁnissons la regle de transformation (R5) qui reecrit un concept d'action
suivi de concepts dont les types sont compatibles avec ceux des parametres de l'action (ou
toute permutation) en une primitive VQL APPLY, qui represente l'application d'un concept
d'action sur des parametres. Ainsi, l'annotation de reference a une action etant REF_ACTION,
REF_AC'I'ION [act ion, paramét rel , paramétre2] sera transforme en
résultat[APPLY[action, paramétrel, paramétre2]] si les types de paramétrel et
paramét re2 sont corrects. Ici, resultat est un concept qui indique soit le concept resultat de
l'action lorsqu'il s'agit d'une action simulable par le mediateur, soit une indication sur son
type dans les autres cas.

Vi 2 1,‘v’c1,c2,..., cl. 6 Vue tels que TYPE[c1]=FUNC[c2,..., ci],

(R5). V V V V V V
‘v’(c1,c2,...,c,.)e Perm(c1,c2,...,ci),REF_ACTIO c1,c2,...,c,.]—>APPLY[c1,c2,...,ci]

(R6)_ Vc e Vue, RE F_ACT I oN[__,c, __] —> RE F_ACT IoN[ ,ISA[c][c], _]

‘v’i21,Vc1, c2 ,..., cl. 6 Vue tels que Elc e Vue et TYPE[c]= FUNC[c1, c2..., ci],

(R7). V V V V V V
‘v’(c1,c2,...,c,.)e Perm(c1,c2,...,ci),REF_ACTIO c1,c2,...,c,.]—>APPLY[c,c1,c2,...,ci]

La regle d'heritage Error! Reference source not found. utilise l'attribut ISA de chaque
concept pour eviter de sur-contraindre les parametres, reecrivant un concept en lui ajoutant
son "pere" comme tete. Ainsi, REF_ACTION[action, paramétrel, paramétre2] pourra
etre reecrit en REF_AC'IION[action, typel [paramétrel] , paramétre2] si
ISA [paramét rel] =typel, aboutissant ensuite a l'application eventuelle de la regle associee
:31 action. Pour une plus grande robustesse du traitement de la reference aux actions, nous
avons souhaite ajouter la regle Error! Reference source not found. traitant les cas ou
l'action est omise. Cette regle peut reecrire une sequence de parametres en l'application d'une
action de signature compatible sur ces parametres, sans que le concept associe a l'action ne
soit present. Cette regle a un coﬁt superieur aux autres, et ne sera donc utilisee que "quand
cela est necessaire".

6 Evaluation et Perspectives

Cette etude montre qu'il est possible d'integrer differents aspects du traitement de la reference
en utilisant un meme formalisme base sur des regles de production sans presupposer de
hierarchie entre les regles. L'introduction de coﬁts cognitifs associes a des regles generiques
et peu contraintes pour le traitement de la reference rend cette integration possible et efficace,

S. Gérard et J.P. Sansonnet

tout en perrnettant de prendre en compte l'intention du locuteur. Notre these est que ceci est
necessaire pour arriver au but d'un systeme robuste de DHl\/I. Le principal point faible de
cette approche est evidemment que le systeme doit prendre en compte un nombre important
d'interpretations possibles. Le coﬁt cognitif associe a chaque regle doit neanmoins apporter
une heuristique lors de l'exploration de ces possibilites. Pourtant, tout au long de cette etude,
nous n'avons donne que tres peu d'indications sur les coﬁts associes a chaque regle. Dans
l'implementation actuelle, la majorite des coﬁts sont ﬁxes a 1, sauf dans le cas de regles
ecrites pour simuler l'application repetee d'une regle elementaire, ou dans le cas des regles qui
nous semblaient ne devoir etre utilisees "en demier ressort". ll aurait ete illusoire de vouloir
ﬁxer ces regles de maniere ad hoc.

Malgre ces limites, les tests effectues sur de petites applications ont montre que
l'interpretation des references etait correcte dans la plupart des cas. Les interventions
analysees etaient limitees a ce qu'il est possible de representer en utilisant le langage VDL,
mais incluaient neanmoins des references complexes, ce qui nous encourage a developper
notre modele. Pour ceci, nous voyons deux axes de travail prioritaires : Le premier est
d'ameliorer la diversite des interventions que le systeme peut traiter. ll s'agit d'une part de
developper le langage VQL, et d'autre part d'integrer de nouvelles regles. Le deuxieme est
evidemment de determiner les valeurs pertinentes (si ce n'est cognitivement, du moins
operationnellement) des coﬁts associes a chaque regle.

References

Bach K. et Hamish R. (1979), Linguistic Communication and Speech Acts. MIT Press,
Cambridge.

Culioli A. (1985), Pour une linguistique de l’énonciation, Ophrys, Paris.

Fellbaum C. (1998), WordNet : An Electronic Lexical Database. MIT Press, Cambridge.
Grice P. (1957), Meaning. Psychological Review, 66, pp 377-388.

Grice P. (1975), Logic and conversation. Syntax and Semantics (3) speech acts, pp 41-58,
Academic Press, New York.

Horowitz E. et Sahni S. (1978), Fundamentals of Computer Algorithms. Computer Science
Press, Rockville.

Luger G.F. (1994), Cognitive Science : The Science of Intelligent Systems. Academic Press,
San Diego et New York.

Newell A. (1990), Uniﬁed Theories of Cognition. Harvard University Press, Cambridge.
Norman D. A. (1998), The invisible computer. MIT Press, Cambridge.

Sansonnet J .P. (1999), Description technique du projet InterViews. Rapport technique n° 99-
01, Limsi, Orsay.

Sperber D. et Wilson D. (1982),Mutual Knowledge and relevance in theories of
comprehension. Mutual knowledge, pp 61-131, Academic press, London.

Sperber D. et Wilson D. (1986), Relevance, communication and cognition, Basil Blackwell,
Oxford.

