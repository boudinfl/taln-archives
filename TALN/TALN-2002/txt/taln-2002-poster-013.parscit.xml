<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Brown James Dean</author>
</authors>
<title>Computers in language testing: present research and some future directions”.</title>
<date>1997</date>
<journal>Language Learning &amp; Technology.</journal>
<volume>1</volume>
<pages>44--59</pages>
<marker>Dean, 1997</marker>
<rawString>Brown James Dean (1997), “Computers in language testing: present research and some future directions”. Language Learning &amp; Technology. Vol.1. N°1: 44-59.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Dalianis</author>
</authors>
<title>Aggregation in Natural Language Generation”.</title>
<date>1999</date>
<journal>Journal of Computational Intelligence,</journal>
<volume>15</volume>
<pages>384--414</pages>
<marker>Dalianis, 1999</marker>
<rawString>Dalianis, H. (1999), “Aggregation in Natural Language Generation”. Journal of Computational Intelligence, Vol. 15, N°4: 384-414.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Dennis</author>
<author>S Handley</author>
<author>P Bradon</author>
<author>J Evans</author>
<author>S E Newstead</author>
</authors>
<title>Approaches to modeling item generative tests”. In</title>
<date>2002</date>
<contexts>
<context position="8776" citStr="Dennis, Handley, Bradon, Evans, &amp; Newstead, 2002" startWordPosition="1368" endWordPosition="1374">statistical properties. From the NLG point of view, our system is a hybrid system including Templates (Reiter, 1995) and aspects of NLG systems. 4 “Item banking covers any procedures that are used to create pilot, analyze, store, manage and select test items so that multiple test forms can be created from subsets of the total “bank” of items.” (Brown, 1997 p. 44). 397 Cédrick Fairon, David Williamson 3.1 Abstract representation of the item A collaboration between Plymouth University and ETS has produced a system that automatically generates the fundamental abstract representation of AR items (Dennis, Handley, Bradon, Evans, &amp; Newstead, 2002). Specifically, by &lt;ITEM OBJ=6 SLOTS=6&gt; &lt;STIMULUS&gt; establishing abstract representations of the number of objects &lt;RULE&gt;aboBE&lt;/RULE&gt; &lt;RULE&gt;adjCE&lt;/RULE&gt; and slots, the initialization rules, the stem rule, and the options. &lt;RULE&gt;adjFA&lt;/RULE&gt; An example of this representation of an item, transformed into &lt;RULE&gt;NadjBF&lt;/RULE&gt; &lt;RULE&gt;NimaBE&lt;/RULE&gt; XML encoding for communication with the ATG, can be found &lt;/STIMULUS&gt; &lt;ITEM type=&amp;quot;possibility&amp;quot;&gt; as Figure 2 corresponding to the same item presented in Figure &lt;RULE&gt;imaDE&lt;/RULE&gt; 1. This system was completed prior to the work on the ATG for &lt;OPTIONS&gt; &lt;RULE&gt;</context>
</contexts>
<marker>Dennis, Handley, Bradon, Evans, Newstead, 2002</marker>
<rawString>Dennis, I., Handley, S., Bradon, P., Evans, J., and Newstead, S.E. (2002), “Approaches to modeling item generative tests”. In Kyllonen, P. and Irvine, S.H. (Eds.) Item Generative Testing.</rawString>
</citation>
<citation valid="true">
<title>Analyse lexicale et syntaxique:</title>
<date>1998</date>
<booktitle>Le système INTEX, Lingvisticae Investigationes Tome XXII (Volume spécial),</booktitle>
<editor>Fairon, Cédrick, ed.</editor>
<location>Amsterdam/Philadelphia: John Benjamins.</location>
<contexts>
<context position="13622" citStr="(1998; 1999)" startWordPosition="2103" endWordPosition="2104">of variousprocess is performed with a generic INTEX program that applies the transducer on the text; am (‘Fix It’ object in Fig. 4) fixes minor linguistic problems (case, s, etc.) by applying local rules. Figure 5. Intermediary representation of the sentences templates” en created under the form of Finite State Graphs with the INTEX graph 93). Figure 6 shows a simplified view of one “template-graph”. er based that has been developed by Max Silberztein. It uses Finite State Automata to rage linguistic resources (http://www.nyu.edu/pages/linguistics/intex/). For a INTEX applications, see Fairon (1998; 1999) and Silberztein (2000). 399 Cédrick Fairon, David Williamson [REP $6 is $2 $5 an earlier $8 than the $8 $5 which $7 is $2 [SN= ( MOT ) ] [RR 3 3 $6 must be $2 $5 an earlier $8 than the $8 $5 which $7 is $2 [STEM= If $6 is $2 $5 a $4 $8 than the $8 $5 which $7 is $2 [STEM= TypeOfStem If $6 is $2 $4 $7 [REL=abo] [X1= ( MOT ) ] [X2= ( MOT ) ] [RR 1 1 2 2 $6 must be $2 $4 $7 [REP [OP=A gram2 $6 is $2 $4 $7 ]and [OP=I] If $6 is $2 $4 $7, Figure 6. Simplified view of one ‘finite state template’ The role of the transducers is to a) identify patterns in the intermediary text representation (displayed</context>
<context position="14886" citStr="(1998)" startWordPosition="2356" endWordPosition="2356">e matched text (delimited by the large parenthesis in the graph) and c) to produce an output. The output of the graph is the text written below the boxes (see Fig. 6). For example, the Fig. 6 graph applied on the Fig. 5 intermediary text will match the first line of the text (which is an ABO rule) and produce the output “$6 must be $2 $4 $7” where $x variables are replaced by their content (the corresponding “words” identified in the intermediary text representation). 5 Conclusion Template-based methods are often perceived as a poor procedure for full-scale NLG systems. For example, Langklide (1998) says that “templates only work in very controlled or limited situations” and that they cannot provide “the expressiveness, flexibility or scalability that many real domains need”. Despite this perception our investigations demonstrated that they offer accurate control on the generated text (a crucial element in the context of test development), they are easy to build and to adapt to different languages. So, as Reiter (1995) has previously concluded, we decided that “NLG shouldn’t get in the way” and we have opted for a goal-oriented approach. This approach decidedly fulfills the “real domain </context>
</contexts>
<marker>1998</marker>
<rawString>Fairon, Cédrick, ed. (1998-1999), Analyse lexicale et syntaxique: Le système INTEX, Lingvisticae Investigationes Tome XXII (Volume spécial), Amsterdam/Philadelphia: John Benjamins.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Maurice Gross</author>
</authors>
<title>The Construction of Local Grammars”,</title>
<date>1997</date>
<booktitle>in E.Roche et Y.Schabes (eds.), Finite State Language Processing,</booktitle>
<pages>329--352</pages>
<publisher>MIT Press:</publisher>
<location>Cambridge, Mass., The</location>
<marker>Gross, 1997</marker>
<rawString>Gross, Maurice (1997), “The Construction of Local Grammars”, in E.Roche et Y.Schabes (eds.), Finite State Language Processing, Cambridge, Mass., The MIT Press: 329-352.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Langklide Irene</author>
<author>Knight Kevin</author>
</authors>
<title>Generation that Exploits Corpus-Based Statistical Knowledge”. In</title>
<date>1998</date>
<booktitle>Proc. COLING-ACL.</booktitle>
<marker>Irene, Kevin, 1998</marker>
<rawString>Langklide Irene and Knight Kevin (1998), “Generation that Exploits Corpus-Based Statistical Knowledge”. In Proc. COLING-ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ehud Reiter</author>
<author>Robert Dale</author>
</authors>
<date>1997</date>
<journal>Building Applied Natural Language Generation Systems”. Natural Language Engineering,</journal>
<volume>3</volume>
<pages>57--87</pages>
<marker>Reiter, Dale, 1997</marker>
<rawString>Reiter, Ehud and Robert Dale (1997), “Building Applied Natural Language Generation Systems”. Natural Language Engineering, 3: 57-87.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ehud Reiter</author>
</authors>
<title>NLG vs.</title>
<date>1995</date>
<booktitle>Templates“. In EWNLG,</booktitle>
<location>Leiden.</location>
<contexts>
<context position="8244" citStr="Reiter, 1995" startWordPosition="1290" endWordPosition="1291"> (CBT) automated item generation offers a new approach to item banking4. Using automated item generation the creation of test forms is not restricted to selection of items from a pre-existing item database but instead, for any scenario contained in the item bank, the system is able to generate hundreds of items, each with known statistical characteristics based on generation principles. In fact, this approach is equivalent to having an item bank containing all possible items, each with known statistical properties. From the NLG point of view, our system is a hybrid system including Templates (Reiter, 1995) and aspects of NLG systems. 4 “Item banking covers any procedures that are used to create pilot, analyze, store, manage and select test items so that multiple test forms can be created from subsets of the total “bank” of items.” (Brown, 1997 p. 44). 397 Cédrick Fairon, David Williamson 3.1 Abstract representation of the item A collaboration between Plymouth University and ETS has produced a system that automatically generates the fundamental abstract representation of AR items (Dennis, Handley, Bradon, Evans, &amp; Newstead, 2002). Specifically, by &lt;ITEM OBJ=6 SLOTS=6&gt; &lt;STIMULUS&gt; establishing abs</context>
<context position="15314" citStr="Reiter (1995)" startWordPosition="2420" endWordPosition="2421">dentified in the intermediary text representation). 5 Conclusion Template-based methods are often perceived as a poor procedure for full-scale NLG systems. For example, Langklide (1998) says that “templates only work in very controlled or limited situations” and that they cannot provide “the expressiveness, flexibility or scalability that many real domains need”. Despite this perception our investigations demonstrated that they offer accurate control on the generated text (a crucial element in the context of test development), they are easy to build and to adapt to different languages. So, as Reiter (1995) has previously concluded, we decided that “NLG shouldn’t get in the way” and we have opted for a goal-oriented approach. This approach decidedly fulfills the “real domain needs” we have defined and does so in a less costly manner that is easier to monitor at every step of the processing. In summary, the ATG system is proving to be quite adequate for the purpose of generating text for AR items and is a vital component of a fully functioning automatic item generation system. Such a system would be of significant utility to large scale testing programs by: • Dramatically increasing item producti</context>
</contexts>
<marker>Reiter, 1995</marker>
<rawString>Reiter, Ehud (1995), “NLG vs. Templates“. In EWNLG, Leiden.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Max Silberztein</author>
</authors>
<title>Dictionnaires électroniques et analyse automatique de textes. Le système INTEX,</title>
<date>1993</date>
<location>Paris, Masson.</location>
<marker>Silberztein, 1993</marker>
<rawString>Silberztein, Max (1993), Dictionnaires électroniques et analyse automatique de textes. Le système INTEX, Paris, Masson.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Max Silberztein</author>
</authors>
<title>INTEX at IBM”.</title>
<date>2000</date>
<booktitle>In Anne Dister (ed). Proceedings of the Third INTEX workshop, RISSH. Université de Liège.</booktitle>
<contexts>
<context position="13645" citStr="Silberztein (2000)" startWordPosition="2106" endWordPosition="2107"> is performed with a generic INTEX program that applies the transducer on the text; am (‘Fix It’ object in Fig. 4) fixes minor linguistic problems (case, s, etc.) by applying local rules. Figure 5. Intermediary representation of the sentences templates” en created under the form of Finite State Graphs with the INTEX graph 93). Figure 6 shows a simplified view of one “template-graph”. er based that has been developed by Max Silberztein. It uses Finite State Automata to rage linguistic resources (http://www.nyu.edu/pages/linguistics/intex/). For a INTEX applications, see Fairon (1998; 1999) and Silberztein (2000). 399 Cédrick Fairon, David Williamson [REP $6 is $2 $5 an earlier $8 than the $8 $5 which $7 is $2 [SN= ( MOT ) ] [RR 3 3 $6 must be $2 $5 an earlier $8 than the $8 $5 which $7 is $2 [STEM= If $6 is $2 $5 a $4 $8 than the $8 $5 which $7 is $2 [STEM= TypeOfStem If $6 is $2 $4 $7 [REL=abo] [X1= ( MOT ) ] [X2= ( MOT ) ] [RR 1 1 2 2 $6 must be $2 $4 $7 [REP [OP=A gram2 $6 is $2 $4 $7 ]and [OP=I] If $6 is $2 $4 $7, Figure 6. Simplified view of one ‘finite state template’ The role of the transducers is to a) identify patterns in the intermediary text representation (displayed in Figure 5) ; b) to f</context>
</contexts>
<marker>Silberztein, 2000</marker>
<rawString>Silberztein, Max (2000), “INTEX at IBM”. In Anne Dister (ed). Proceedings of the Third INTEX workshop, RISSH. Université de Liège.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Wainier</author>
</authors>
<title>Computerized Adaptive Testing: A Primer. Lawrence Erlbaum Associates:</title>
<date>1990</date>
<location>Hillsdale, New Jersey.</location>
<marker>Wainier, 1990</marker>
<rawString>Wainier, H. (1990), Computerized Adaptive Testing: A Primer. Lawrence Erlbaum Associates: Hillsdale, New Jersey.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dunkel Patricia</author>
</authors>
<title>Computer-Adaptive Testing of Listening Comprehension: A Blueprint for CAT Development”.</title>
<date>1997</date>
<booktitle>In The Language Teacher Online. JALT. 7 The ATG</booktitle>
<marker>Patricia, 1997</marker>
<rawString>Dunkel Patricia. (1997), “Computer-Adaptive Testing of Listening Comprehension: A Blueprint for CAT Development”. In The Language Teacher Online. JALT. 7 The ATG system is currently being integrated into a “Test Creation Assistant” (TCA) to be used by test developers at ETS. Examples of automatically generated items are published on-line at: http://www.fltr.ucl.ac.be/FLTR/TEDM/ets.html</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>