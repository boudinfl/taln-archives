TALN 2003, Batz—sur—Mer, I I -1 4 juin 2003

Une plate-forme dc conception et d’exploitation
d’une grammaire d’arbres adjoints lexicalises

Benoit Crabbe’, Bertrand Gaiffe et Azim Roussanaly

LORIA
BP 239 — 54506 Vandoeuvre-les-Nancy Cedex
{crabbe,gaiffe,azim} @loria.fr

Resume — Abstract

Dans cet article, nous presentons un ensemble d’outils de conception et d’exploitation pour
des grammaires d’arbres adjoints lexicalises. Ces outils s’appuient sur une representation
XML des ressources (lexique et grammaire). Dans notre representation, a chaque arbre de la
grammaire est associe un hypertag decrivant les phenomenes linguistiques qu’il recouvre. De
ce fait, la liaison avec le lexique se trouve plus compactee et devient plus aisee a maintenir.

Enfm, un analyseur permet de Valider les grammaires et les lexiques ainsi concus aussi bien
de facon interactive que differee sur des corpus.

Keywords — Mots Clés

Grammaire, analyse syntaxique, ressources lexicales, LTAG, representation compacte du
lexique
Grammar, parser, lexical resources, LTAG, compact lexical representation

1 Introduction

La grammaire d'arbres adjoints lexicalisee est une grammaire fortement lexicalisee. La
gestion du lexique de ce type de grammaire est a priori difﬁcile. Les unites grammaticales
elementaires sont en effet tres nombreuses. Les developpements recents en matiere de
representation compacte du lexique permettent desormais d'en faciliter la gestion, et en
particulier la maintenance.

Dans cet article, nous presentons un ensemble d'outils effectivement implementes qui
permettent la gestion et l'utilisation d'une grammaire d'arbres adjoints lexicalisee. Nous
centrons notre attention sur les aspects technique lies a la representation du lexique.
L'implementation que nous proposons facilite, de notre point de Vue, la maintenance de la
grammaire. Nous commencons par rappeler brievement l'architecture donnee au lexique dans
les implementations du formalisme (architecture XTAG). Nous montrons en quoi ce type

B. Crabbe, B. Gazﬂe, A. Roussanabz

d'architecture pose des problemes de maintenance et de réutilisation (lies a la notion
d'ancrage). Enfin, nous discutons les choix retenus dans l'implémentation

2 Grammaire d’arbres adj oints (TAG)

La grammaire d'arbres adjoints (Joshi 1975, Joshi et Schabes 1997) est un systeme de
composition d'arbres dont les unités sont des arbres élémentaires. Deux opérations de
composition sont déﬁnies sur les arbres : l'adjonction et la substitution.

TAG est essentiellement utilisé dans sa Version lexicalisée (LTAG). La condition de
lexicalisation impose que tout arbre élémentaire soit ancré par une unité lexicale. En suivant
cette approche, le lexique d'une grammaire TAG lexicalisée est un ensemble d'arbres
élémentaires, comme illustré a la Figure 11.

 .1. '5. N; as in v um»-
I 'I l
I

MANGE MANGENT SEMBLE

Figure 1 : Exemples d’arbres élémentaires

Si théoriquement un lexique TAG se compose d'un ensemble tres important d'arbres
élémentaires, en pratique les implémentations (Xtag 2001, Abeillé 2002) introduisent une
factorisation : les unités lexicales sont stockées sur trois niveaux :

0 Une base de schemes (ou templates) ou arbres élémentaires non instanciés. Un scheme
contient un noeud particulier, marque par le symbole 0 appelé nceud ancre, noeud sur
lequel l'unité lexicale se place lors du processus d'ancrage. De plus, les schemes sont
classés en familles. Une famille est un ensemble d'arbres dont chaque élément
représente la méme structure prédicat-argument.

0 Une base de lemmes, chaque lemme est associé a une ou plusieurs familles.
0 Une base morphologique dans laquelle chaque forme ﬂéchie est associée a un lemme.

Les arbres élémentaires sont construits dynamiquement lors du processus d'analyse
syntaxique. Le processus de construction dynamique est appelé ancrage. Le principe est le
suivant : la forme ﬂéchie détermine le lemme correspondant. Ce lemme permet de
sélectionner la famille. La forme ﬂéchie est ensuite greﬂée aux noeuds ancres de chacun des
schemes composant la famille sélectionnée. Les traits associés a la forme ﬂéchie, au lemme et

1 Les arbres utilises dans cet article sont inspire's de la grammaire propose'e par (Abeille' 2002). De plus, nous
utilisons une variante usuelle de TAG : Feature-Based TAG (Vijay-Shanker 1987), version dans laquelle
chaque noeud d'un arbre est associé a une structure de trait top et une structure de traits bottom.

Une plate-forme de conception et a’ ’expl0itati0n d ’une grammaire d ’arbres adjoints...

au noeud ancre sont alors unifies. Il est donc possible que l'ancrage échoue suite a un échec
d'unification.
2.1 Problématique de l’opération d’ancrage

Cette problématique est liée a la construction des structures de traits dans les arbre
élémentaires. Elle est illustrée a la Figure 2.

FLEXION (1) + LEMME (2) + SCHEME (3)
mange manger s
morpho numisg] fami||e—>n0Vn1 /,\
perS_ 3 top(a rg0)—>[hum=+] NJ, V0 NJ’

t: |num=@1| b: |num=@1|

= ARBRE ELEMENTAIRE (2)

S
/\,i\
NJ’ b num=sg Nlr
t: num=sg perS=3
hum=+
mange

Figure 2 : Exemple d’ancrage

L'ancrage effectif d'une forme ﬂéchie dans un scheme fait intervenir des structures de traits
issues de trois composants :

1. la structure de traits morphologiques associée a la forme ﬂéchie,

2. éventuellement, la structure de traits associée au lemme (dans notre exemple, il n’y en
a pas).

3. un ensemble d'équations associées au lemme (equations d'ancrage) qui représentent
des restrictions de sélections a projeter dans l'arbre.

Les structures de traits associées a la ﬂexion et au lemme sont unifiées avec la structure de
traits associée au noeud ancre. Leurs roles respectifs sont prototypiquement le traitement de
phénomenes d'accord et la mise en échec du processus d'ancrage avec certains schemes (par
échec d'unification). Ainsi, le lemme d'un verbe transitif de famille n0Vn1 non passivable
comme comporter est associé a la structure de trait [passif = —] . Les schemes
correspondant aux formes passives contiennent quant a eux le trait [passif = +] sur le
noeud ancre. On Voit donc qu'un arbre associé a une forme ﬂéchie n'est pas sélectionné
uniquement sur la base de la famille, mais également par l'intermédiaire de traits lies a
l'ancrage, places a la fois dans la base de lemmes et dans les schemes.

D'autre part, la Valeur de certains traits est ambigue. Ainsi un trait utilisé dans la grammaire
pour traiter la concordance des temps tel [mode = indicati f] a également pour role de
bloquer l'ancrage d'un scheme représentant une forme impérative.

Les équations d'ancrage sont quant a elles associées aux lemmes. Leur particularité est de
projeter des traits sur des noeuds de schemes différents de l'ancre. Vu qu'un lemme est associé

B. Crabbé, B. Gazﬂe, A. Roussanabz

a une famille, c'est-a-dire un ensemble de structures arborescentes topologiquement
hétérogenes, il faut étre capable de désigner des noeuds de facon symbolique pour l'ensemble
des schemes appartenant a cette famille. Les familles XTAG (FTAG) regroupent des arbres
qui représentent les différentes réalisations d'une méme structure prédicative ; dans ce cadre,
les noeuds ciblés par les équations d'ancrage sont les noeuds représentant la position des
arguments dans la structure arborescente. Ceux-ci sont repérés a l'aide d'indices représentant
la position de l'argument dans la structure argumentale. Ainsi, la représentation XTAG
(F TAG) des arguments du prédicat dans la famille {a,B}, illustré par la Figure 3, se fait par
l’association au lemme manger de l'équation d'ancrage suivante : top (argO) —> [hum=+] .

s

N 11 V SP
..«-'‘’T‘‘'~- /, .
__x |  /2 \\ I . 
Nﬂl V0 N1 1 V we Pre p No 1
I I
I I
EST PAR
0 5

Figure 3 : Exemple de famille d’arbres

Ce qui signiﬁe qu'une famille se déﬁnit non seulement par un ensemble d’arbres {a,B} mais
également par un ensemble de correspondances :

arg0—>oc.1, 13.3.2
arg1—>oc.3, 13.1

qui associe aux arguments 0 et 1 les adresses de Gorn sur lesquelles ils se projettent pour
chacun des schemes appartenant a la famille.

Une famille est donc plus qu'un ensemble d'arbres, elle définit également un ensemble de
correspondances entre des désignations symboliques de noeuds et des adresses de Gorn
reﬂétant la position de ces noms symboliques dans chaque arbre de la famille.

3 Vision alternative du processus d’ancrage

Une architecture de type XTAG suggere un découpage de la grammaire en termes de familles
organisées autour de l'idée prédicat-argument. Bien que cette approche reﬂete une idée
communément admise en syntaxe, nous voudrions montrer comment une organisation
alternative du lexique fondée sur la notion d'alternances lexicales (Levin 1993) change la
donne.

Le travail de (Levin 1993) suggere une organisation du lexique articulée autour de l'hypothese
du déterminisme sémantique : en syntaxe, cela signiﬁe que les contextes syntaxiques
(alternances) dans lesquels apparait un mot sont déterminés par ses propriétés sémantiques.
L'hypothese stipule, par exemple, que tous les verbes de mouvement (classe d’alternance)
partagent les mémes propriétés syntaxiques. Dans ce cadre (Levin 1993) répertorie pour un

Une plate-forme de conception et a’ ’expl0itati0n d ’une grammaire d ’arbres adjoints...

tres grand nombre de Verbes anglais les Variations de diathese effectivement attestées dans la
langue (alternances) : ex. passif-long, actif et sujet nominal. . .).

Une adaptation au francais du travail de Levin faite par (St Dizier 1996, St Dizier 1999)
suggere d'associer un lexeme a un ensemble d'altemances. En suivant cette approche, on
associera au Verbe comporter une altemance telle que : actif et sujet nominal et objet nominal
mais on se garde de lui associer une alternance telle que passzf-long comme l'illustrent les
phrases : (Le livre comporte deux chapitres l * Deux chapitres sont comportés par le livre)

On remarque immédiatement que l'utilisation d'une paire de traits telle que [passi f = i]
pour opérer un ﬁltrage lors de l'ancrage des arbres n'a aucun intérét dans ce cadre.

4 Représentation de la grammaire

4.1 Caractéristiques
Trois opérations apparaissent clairement pour déﬁnir les liens entre lemmes et schemes :

0 découpage de la grammaire en sous-ensembles caractérisés par des propriétés
linguistiques communes,

0 ancrage des lemmes sur les noeuds ancres des schemes,

0 projection de contraintes sémantiques associées aux lemmes dans les schemes
sélectionnés a l'aide des équations d'ancrage.

En Vue de réaliser ces opérations de maniere satisfaisante, nous proposons une représentation
de la grammaire qui présente les avantages suivants :

0 conciliation des différentes approches liées a la question de l'ancrage,

0 gain d'efﬁcacité de l'analyseur grace a l'intégration d'un mécanisme permettant de
filtrer l'ensemble des schemes candidats a un ancrage pour éviter un échec
d'unification plus tardif,

0 amélioration de l'indépendance entre la base de lemmes et la base de schemes ; cette
propriété permet de dissocier la construction de la base de schemes (en ayant recours
par exemple a un compilateur de métagrammaire) de celle de la base de lemmes (en
s'appuyant par exemple sur une extraction a partir d'un dictionnaire),

0 utilisation de la technologie a base de XML facilitant ainsi le partage des ressources et
le développement des outils.

4.2 Représentation axée sur les hypertags

Notre approche dans ce domaine rejoint celle de (Kinyon 2000). Il s'agit d'associer a chaque
scheme une structure de traits, appelée hypertag. Les hypertags ont pour but la description des
phénomenes linguistiques encodés dans le scheme. L’exemple de la Figure 4 montre, pour
chaque scheme, les structures de traits décrivant la voix de la phrase ainsi que les fonctions
initiales, les fonctions finales des arguments.

B. Crabbé, B. Gaiﬂe, A. Roussanabz

Une telle structure sert de base au ﬁltrage lors du processus d'ancrage dans la mesure ou elle
perrnet d'atteindre des ensembles d'arbres plus ﬁns que les familles XTAG.

 
 

 
 

F-‘ih1'1. suj
 also F-'l:ll1 nil
 ""'/. N" .- F-1'n1'1 at;
N01 W N11 ‘M51 1=—1=n. obj]
'5'-:-1'; A-.-.'l1't'
S
 (J  Al-so 1h11. :uJ I
N11 V SP F-En p.-.:L--:-I:-J
/' ..  _ F-1'n1'1 I:-'
,» x ..  my FE U 1']
V W Prep N01 ' '1 ="J
. , 11:-1';. P.-.:n-if
I I
EST PAR

Figure 4 : Exemple d’hypertags

En suivant cette approche, si on associe au lemme comporter la structure de traits de la Figure
5 correspondant a la famille noVn1 , on sélectionne par succes d'uniﬁcation les deux arbres de
la Figure 4.

Aigﬂ [F-1'n1'1 :uj:|
M51 [F-1'n1'1 at;

Figure 5 : Structure de traits noVn1

Si on associe au lemme un hypertag correspondant a l'altemance actifet sujet nominal et objet
nominal (Figure 6), on ne lui associe plus que l'arbre de l'actif (Figure 4) :

l
l

Figure 6 : Structure de traits alternance actifet sujet nominal et objet nominal

F-1' l1‘i1.
F-Fin

we [ ::jI
F-1'n1'1
F-Fin
J‘-su.-.11't'

I:I|:Ij

A
I:I|:Ij

Lgl

 

I‘:-'i:ri.:

Notons que les hypertags présentent d'autres intéréts dans le cadre de la description des
schemes, notamment dans le domaine de la gestion d'une grammaire : extraction de sous-
grammaires, interfaces de description du lexique,... (Kinyon 2000).

Une plate-forme de conception et a’ ’expl0itati0n d ’une grammaire d ’arbres adjoints...

4.3 Mécanisme de correspondance

Nous avons besoin d’établir des correspondances entre noeuds dans des ensembles d’arbres
filtrés par des hypertags. Le mécanisme de nommage de noeuds de XTAG doit donc étre
généralisé. La solution retenue est de prendre acte de la nécessité explicite d’un nommage des
noeudsz. A titre d’illustration, le nommage présenté dans la Figure 7 permet de résoudre
l’équation d’ancrage top (#dest) —> location=+ .

S

_I_.-._ _ _ __ _

S

-r-—\___ __z''

N(#ag-ia-i'i-t-)1, v(1:ani:har)<:- H»-ép N (#=9|!|'|tll V

"M ”(*‘l'**5*1l cI(#d;-Qt) v(#a;}:hor)o
I l

V

Figure 7 : Exemple de nommage de noeuds

Il est a noter que ce mécanisme est suffisamment général pour traiter les cas d'ancrages
multiples dans un méme scheme. Les noms symboliques des noeuds Vont servir a effectuer les
correspondances relativement aux arbres d’une famille dans les éléments de représentation.

4.4 Structure de la représentation

La conséquence des principes de representation a base d’hypertags et de nommage des
correspondances que nous avons adoptés, est que le lexique est décrit par les éléments et les
liens suivants:

0 forme ﬂéchie : cet élément permet de déﬁnir des liens entre une entrée de la base
morphologique et, d'une part, le lemme auquel elle fait référence et, d'autre part, une
structure de traits destinée a encoder les traits morphologiques,

0 lexicalisation : cet élément permet essentiellement (1) de déﬁnir le lien entre un
lemme et une structure de traits destinée a filtrer l'ensemble de schemes dans lequel le
lemme est ancré. Il contient également (2) une association avec le nom du noeud
ancre. Il contient enfin (3) une association avec un doublet constitué d'un nom de
noeud et d'une structure de traits destinée a effectuer l'opération de projection de la
structure de traits dans les schemes.

Exemple : (verbe, comporter) —» (1) [ArgO [F—i1'1it=suj]
Argl [F—i1'1it=obj]]
_. (2) #a1'1chor
_. (3) (#110, [top [hum=+]])

2 Ce nommage est re’alise’ via le compilateur de métagrammaire (inﬁa)

B. Crabbé, B. Gazﬂe, A. Roussanabz

5 Logiciels

La plate-forrne que nous proposons, comporte deux applications centrales : le compilateur de
métagrammaire et l'analyseur syntaxique. Autour de ces deux applications, nous foumissons
un ensemble d'outils permettant d'éditer, de Visualiser graphiquement et de tracer les
différentes ressources utilisées dans ces applications.

Tous ces logiciels partagent des structures de données encodées en XML. Le format que nous
avons retenu est TAGML2 (déﬁnie par une DTD) car il offre un cadre normalisé a la
représentation des lexiques et des grammaires TAG. Tous ces logiciels sont disponibles sur le
site de l'équipe L&D du LORIA (www . loria . fr/equipes/led/outils . html)

5.1 Compilateur de métagrammaire

Pour obtenir les associations <sche‘me, structure de trait, c0rresp0ndance> nécessaires a
notre proposition, nous avons développé un compilateur de métagrammaires (Gaiffe et al.
2002), fortement inspiré du travail de (Candito 1999). Dans une approche de ce type, le
linguiste décrit sa grammaire Via des ensemble de hiérarchies de classes. Chaque classe
comprend des contraintes topologiques devant étre Vériﬁées par les arbres relevant de la
classe et une description de la classe par une structure de traits. Les hiérarchies de classes
sont combinées entre elles pour enrichir le graphe d'héritage3. Enﬁn, les contraintes
accumulées aux feuilles de ce graphe d'héritage sont résolues en l'ensemble des arbres qui les
Valident.

On obtient en résultat les associations Visées ; en effet :

0 les structures de traits décorant les classes sont uniﬁées le long du graphe d'héritage
jusqu'aux classes feuilles ou elles sont associées aux arbres résultats (ce sont nos

hypertags);

0 les contraintes topologiques contenues dans les classes sont exprimées sur des noms
symboliques des noeuds4, (exemple #agent, #dest, #anch0r). et le compilateur fournit
pour chaque arbre solution les adresses ou chaque nom se projette dans l'arbre. On
obtient ainsi les correspondance mentionnées au paragraphe 4.3.

Bien entendu, les résultats sont fournis par ce compilateur de métagrammaires au format
TAGML2. Enﬁn, un outil annexe permet de décrire les associations lemmes, structures de
traits de filtrage, equations symboliques et de les traduire en TAGML2.

5.2 Analyseur syntaxique

L'analyseur LTAG du Loria (LLP2) est développée a partir de la Version précédente écrite par
Lopez (Lopez 1999). Les caractéristiques de cette nouvelle Version sont les suivantes :

3 Moyennant des contraintes de compatibilite'

4 Ce sont des constantes

Une plate-forme de conception et a’ ’expl0itati0n d ’une grammaire d ’arbres adjoints...

0 elle permet le traitement des structures de traits (FB-LTAG) (Vijay-Shanker 1987),

0 elle est limitée aux grammaires d’arbres insérés (TIG) (Schabes et Waters 1995), une
version restrictive des TAG,

0 elle prend en charge des ressources décrite au format TAGML2 ; les schemes créés par le
compilateur de métagrammaires sont, de ce fait, directement exploitables par l'analyseur,

0 elle dispose d'une interface graphique interactive permettant de tester une grammaire, et
offre également la possibilité d'un fonctionnement en mode lignes de commandes; ceci
permet de lancer globalement l'analyse d'un lot de phrases (par exemple, un corpus),

0 elle integre une représentation XML des lots de phrases a analyser en vue :

o de traiter un corpus annoté par des informations morpho-syntaxiques : l'idée ici est de
faciliter l'interfacage entre l'analyseur et un annotateur morpho-syntaxique de sorte a
réduire considérablement la taille des ressources lexicales, notamment celle de la base
morphologique,

o de traiter un corpus incluant des syntagmes partiellement analysés : l'objectif visé est de
prétraiter les phrases a analyser en s'appuyant sur les résultats d'un analyseur de surface.
Cette opération vise a améliorer les performances de l'analyseur, mais elle permet
également d'utiliser l'analyseur pour valider des hypotheses lexicales sur les mots
inconnus dans le cadre d'un apprentissage,

o de traiter certaines ambigu'1'tés lexicales, il s'agit plus précisément ici du cas particulier de
l'occurrence de plusieurs candidats pour un mot ou groupe de mots; cette aptitude de
l'analyseur peut étre mise a profit dans deux cas: (1) Le premier cas provient d'un
probleme de segmentation (tokenisation) des mots composés ; par exemple, dans le cas
de l'expression pomme de terre, l'analyse peut se dérouler parallelement sur les
hypotheses de 3 mots distincts ou d'un seul mot composé. (2) Le deuxieme cas
correspond a l’entrée bruitée d’un systeme de reconnaissance de la parole ou l'ambigu'1'té
est inhérente au dispositif d'acquisition.

Conclusion

L'encodage des ressources lexicales en TAGML2, constitue un socle commun a l’ensemble
d'outils présentés dans cet article. Par ailleurs, TAGML2 foumit une représentation
norrnalisée des ressources. La DTD originale a été concue dans le cadre de l'Action de
recherche concertée : Ressources lexicales pour LTAG (RLT :
http : //atoll . inria . fr/RLT/arc . html). TAGML2 a été concue spécifiquement a
partir de TAGMLI (Bonhomme et Lopez 2000) dans le but de permettre une représentation
plus compacte du lexique LTAG. La mise a disposition de bibliotheques logicielles vise a
faciliter, dans le futur, l’intégration des ressources LTAG existants dans divers formats.

Par ailleurs, a court terme, nous projetons d'utiliser cette plate-forme pour constituer des
lexiques destinés a étre utilisés dans des applications restreintes. Notre but, a plus long terme,
est de concevoir une grammaire a plus large couverture. Grammaires que les hypertags

B. Crabbé, B. Gaiﬂe, A. Roussanabz

perrnettront de filtrer pour obtenir des sous-grammaires d’applications spéciﬁques. Le
traitement des équations d’ancrage proposé devrait alors permettre de projeter les restrictions
de sélection liées a l’application sur cette grammaire.

Références

Abeillé Anne, (2002), Une grammaire d’arbres adjoints pour le francais, Editions du CNRS,
Paris

Bonhomme P. et Lopez P (2000), TagML : codage XML et ressources pour les grammaires
d’arbres adjoints lexicalisés, LREC 2000 Athenes

Candito Marie-Helene, (1999), Organisation Modulaire et Paramétrable de Grammaires
Electroniques Lexicalisées, These de l’Université de Paris 7

Gaiffe B., Crabbe B. et Roussanaly A. (2002), A new metagrammar compiler, in proc TAG+6
Venise

Joshi Aravind K. and Schabes Yves, (1997), Tree Adjoining Grammars, Handbook of Formal
Languages, eds G. Rozenberg and A. Salomaa, Berlin, Springer Verlag

Joshi Aravind K., Levy Leon S. and Takahashi M., (1975), Tree Adjunct Grammars, Journal
of the Computer and System Sciences, vol. 10, pp. 136-163

Kinyon Alexandra, (2000), Hypertags, COLING-00 Sarrebriick
Levin Beth, (1993) English Verb Classes and Alternations, The University of Chicago Press

Saint-Dizier Patrick, (1999) Predicative Forms in Natural Language and Lexical Knowledge
Bases in Alternations and Verb Semantic Classes for French .' Analysis and Class Formation,
ed. Patrick Saint-Dizier, Kluwer, Dordrecht

Saint-Dizier Patrick, (1996), Verb Semantic Classes in French Version 2, Tech. Report., IRIT
- CNRS",

Schabes Y. et Waters R (1995), Tree Inserted Grammar : a Cubic-time Parsable Forrnalism
that lexicalizes Context Free Grammar without Changing the Trees Produced, Computational
Linguistics MIT Press 1995.

Vijay-Shanker K, (1987) A study of Tree Adjoining Grammar, PhD. Th. University of
Pennsylvania, Department of computer and information science

XTAG Research Group (2001) A Lexicalized Tree Adjoining Grammar for English, IRCS,
University of Pennsylvania, num. IRCS-01-03

