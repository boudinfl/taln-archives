TALN 2003, Batz-sur-Mer, 11—14juin 2003

Structuration automatique de preuves mathématiques : de la
logique 51 la rhétorique

Adil El Ghali Laurent Roussarie

LATTICE — PPS LATTICE — CNRS
Université Paris 7 — Case 7003

2, place jussieu
75251 Paris Cedex 05
{adil,laurent}@linguist.jussieu.fr

Mots-clefs — Keywords

Génération automatique de textes, détermination de contenu, logiques de description, struc-
turation de document, SDRT

NLG, content determination, description logics, document structuring, SDRT

Résumé

Nous présentons dans ses grandes lignes un modele de structuration de documents pour la
génération automatique de preuves mathématiques. Le modele prend en entrée des sorties d’un
prouveur automatique et vise a produire des textes dont le style s’approche le plus possible des
démonstrations rédigées par des humains. Cela implique la Inise au point d’une stratégie de
planiﬁcation de document capable de s’écarter de la structure purement logique de la preuve.
La solution que nous proposons consiste a intégrer de maniere simple des informations de type
intentionnel aﬁn d’enrichir la structure rhétorique ﬁnale du texte.

1 Introduction

En génération automatique, les stratégies de structuration de documentl ont non seulement un
impact durable sur l’ensemble du processus de production, mais aussi une efﬁcacité double :
elles constituent une premiere étape de mise en forme (les choix des structures de discours se
répercutent sur l’agencement ﬁnal du texte), et elles incluent une phase de raisonnement qui
n’est pas completement indépendante de la détermination de contenu : il s’agit, par exemple,

1Pour des details sur l’architecture et les composants des systemes de génération, Voir (Reiter & Dale, 2000).

Adil El Ghali, Laurent Roussarie

de construire une argumentation, ce qui implique de choisir, en sus de certaines connexions
rhétoriques, des arguments — i.e. du contenu — convaincants. L’ objectif principal de cette com-
munication est d’aborder ce probleme de la double efﬁcacité de la structuration de document
a la lumiere d’une application particuliere : la ge’ne’rati0n automatique de textes de preuves
mathématiques. La génération de preuves en langue naturelle fournit une illustration claire de
l’acuité du probleme en question. En effet, un objet preuve possede une structure formelle assez
stable et bien déﬁnie, que l’on appelle l’arbre de preuve. D’un point de vue sémantique, une
telle structure peut souvent se ramener a une série d’inférences (éventuellement imbriquées).
On peut alors s’accorder l’intuition que l’information foumie par un arbre de preuve non seule-
ment reﬂete le contenu sémantique du texte-preuve, mais donne aussi certaines indications sur
sa structure rhétorique. C’est d’ailleurs ce sur quoi s’appuient un certain nombre de travaux
en génération automatique de preuves (e.g. (Huang & Fiedler, 1997; Fiedler, 2001)) qui ela-
borent des stratégies plus ou moins sophistiquées d’exploitation ou de parcours de l’arbre pour
produire, par appariements et regroupements, un plan de texte. De telles stratégies permet-
tent de générer des textes corrects et conformes a la preuve formelle; cependant beaucoup sont
stéréotypés, peu naturels, répétitifs, fastidieux, et parfois meme abscons. Nous pensons que
ces imperfections peuvent s’expliquer par le fait qu’a partir d’une preuve formelle, il n’est pas
forcément trivial de distinguer ce qui devrait relever de la détermination de contenu vs. de la
structuration de document. De plus meme si la structure de l’arbre de preuve contraint forte-
ment la structure rhétorique du texte, elle ne la détermine pas completement. Empiriquement
on constate que, souvent, l’organisation apparente d’un texte-preuve réel rend compte de la
structure de l’arbre mais aussi des mécanismes de raisonnement utilisés dans la démonstration.

Dans cette communication nous allons proposer une stratégie originale de planiﬁcation de textes
de preuve, visant a obtenir des discours plus naturels et plus proches des preuves rédigées en
langue naturelle. Les grandes lignes de cette stratégie seront exposées a travers la présentation
du systeme GEPHOX qui est un générateur de textes de preuves mathématiques obtenues avec
le systeme d’aide a la preuve PHOX (Raffalli & Roziere, 2002). Nous nous interessons ici au
module Quoi-dire? du générateur dont l’organisation respecte une architecture standard en deux
sous-modules : ContDet qui calcule le contenu a exprimer a partir de sorties de PHOX et en
fonction de connaissances de l’utilisateur, et Docstruct qui calcule les plans du discours. Les
plans de discours produits sont représentés dans le formalisme de la SDRT (Asher & Lascarides,
2003). Ce choix est motivé par deux raisons : d’abord nous nous fondons en grande partie
sur le modele de structuration de document de (Danlos et al. , 2001) qui montre l’efﬁcacité de la
SDRT pour la génération profonde ; ensuite nous adoptons les conclusions de (Zinn, 1999) selon
lesquelles la DRT (et implicitement la SDRT) propose un formalisme particulierement approprié
pour l’analyse et la représentation des textes mathématiques.

2 Détermination du contenu : le module ContDet

Le systeme d’aide a la preuve PHOX permet de réaliser sur ordinateur des preuves mathéma-
tiques, en en garantissant la validité. Meme si le logiciel dispose d’un algorithme de preuve au-
tomatique, son utilisation principale — e. g. pour l’enseignement des mathématiques — est la veri-
ﬁcation des étapes de raisonnement. L’utilisateur guide PHOX pour démontrer des théoremes
mathématiques, en laissant le soin au logiciel de réaliser les vériﬁcations et les opérations fasti-
dieuses de la preuve.

GEPHOX prend en entrée des informations de deux types: le script de preuve qui représente
la trace de la démonstration (i.e. les commandes entrées par l’utilisateur) et la sortie de Ph0X

Structuration automatique de preuves mathématiques

proprement dite, qui est constituée de fragments de l’arbre de preuve et que l’on peut donc voir
comme le contenu de la preuve. Le module Cont Det doit calculer a partir de cette entrée, et en
tenant compte des connaissances de l’utilisateur, le message qui sera exprimé par le générateur.
Dans GEPHOX les informations sont décrites dans les concepts et les roles d’une logique de
description (DL, cf. (Baader et al., 2003)). Les connaissances sur le domaine et les connais-
sances propres de l’utilisateur sont respectivement représentées dans deux bases : DKB et UKB
(UKB est en fait un sous-ensemble de DKB). Les bases de connaissances sont structurées en
deux parties. D’une part, la T-Box (pour connaissances terminologiques) encode les connais-
sances intensionnelles, i.e. les concepts et les relations du domaine. Par exemple, le concept
Entier désigne l’ensemble des entiers naturels. D’autre part, la A-Box (pour connaissances
assertionnelles) encode les connaissances extensionnelles, i. e. les individus de notre univers.
Par exemple n E Ent ier introduit un individu appartenant au concept Ent ier.

Le principe général du calcul de contenu est le suivant. I1 s’agit, dans un premier temps, de
construire les expressions conceptuelles (T-Box) correspondant a l’entrée, en se rappelant des
individusI qui leurs correspondent. C’est sur cette T-Box qu’opere la détermination de contenu
proprement dite. Enﬁn, les expressions conceptuelles sont instanciées en utilisant les individus
I pour produire la A-Box qui représente, sous formes de faits, le message a générer. Le module
ContDet commence donc par traduire l’entrée du générateur en DL, en utilisant les concepts et
roles de la DKB. Si des deﬁnitions et des théoremes issus de PHOX n’existent pas dans la base
de connaissance, la procédure de traduction crée de nouveaux concepts en fonction de ceux
déja présents. Une fois construit l’ensemble des expressions conceptuelles (SCD) représentant
l’entrée, ContDet doit se’lectionner dans cet ensemble ce qui doit étre dit. Sont alors mis en jeu
des opérations de ﬁltrage et de regroupement. Une premiere consiste a détecter des stratégies
de raisonnement et leurs parametres: par exemple, reconnaitre l’annonce d’un raisonnement par
cas; et ensuite calculer les différents cas et les associer a cette annonce. La deuxieme opera-
tion est la mise en évidence des similitudes entre portions de preuve. On utilise a cet effet
l’uniﬁcation de concepts (Baader & Kiisters, 2001). Enﬁn, ContDet cherche a apparier des
deﬁnitions de concepts complexes de la DKB avec des expressions de 8 C D. Cela permet de syn-
thétiser des groupes d’informations plus ou moins simples sous le chef d’un concept prédéﬁni
(une telle opération est généralement dénommée agrégation en génération automatique). Les
axiomes (i.e. les deﬁnitions de DKB) utilisés a cet effet sont gardés en mémoire pour établir
ensuite des relations de second ordre sur les éléments de SCD. La T-Box ainsi obtenue donne
une representation de la preuve qui fait usage de tous les concepts du domainez. La derniere
étape de la détermination du contenu est l’instanciation de ECU par les individus de I et la
veriﬁcation de consistance du fragment de A-Box obtenu.

3 Structuration de document

La ﬁgure 1 donne un exemple de sortie de ContDet. Ce type de structure peut étre vu comme
un ensemble ordonne’3 de formes logiques qui marquent les pas signiﬁcatifs de la démonstration.
En regard de certaines formules ﬁgurent les axiomes qui ont permis de construire la formule.

2Pour produire un message coopératif et personnalisé, il est nécessaire de confronter cette representation avec
les connaissances de l’utilisateur (UKB), aﬁn de Vériﬁer s’il comprend tout ce que comporte EC D. Cela revient en
fait a expliquer (i.e. décomposer) les concepts de EC D qui ne ﬁgurent pas dans UKB. On obtient ainsi un nouvel
ensemble d’expressions conceptuelles EC U, qui est calculé par projectionde EC D dans UKB.

3L’ordre provient de la sémantique du conjoncteur dynamique /\ qui n’est pas symétrique. Dans la ﬁgure 1,
Pénumération des formules n’est donnée (pour l’instant) que pour la lisibilité du tableau.

Adil El Ghali, Laurent Roussarie

De plus, la structure est plus riche qu’un simple arbre de preuve, puisque ContDet fait en sorte
qu’elle contienne egalement des elements d’information provenant du script de preuve. Un des
points centraux de notre strategie de generation profonde Va consister a exploiter cette richesse,
notamment en postulant que les etapes du script traduites en formes logiques s’assimilent a des
intentions communicatives. Ces intentions vont permettre en particulier de generer des actes de
langage qui « humanisent » le texte de preuve en aj outant des elements de rhetorique autres que
les habituelles relations logiques.

| | Formes logiques | Axiomes |

A sous—ensemble(Q,N*) /\ define(Q,“E|n E N (m1 = 2 * 71.1)”) Q i Ensemble /\ E|sous—ensemble.{N*}
/\ E|eq—def.{E|n E N (m2 = 2 * 71.2)

B Entier(m) /\ neg—Q(m) neg—Q i —u Q

C t1 = not—in(sq1't — 2,Q) /\ Theoreme(t1) /\ annonce(t1)
1. Entier(m) /\ Entier(n) /\ choose(m) /\ choose(n)

. p1 = Prop(“m2 = 2 * 71.2”) /\ suppose(p1)

l1 = lernme(“lemme1”)

neg—Q(m) /\ imp1ies(e3,e4)

CaseReason(cu1'7'ent)

. is—case(cu1'1'ent,e6) /\ Nul(m)

. Nul(n) /\ imp1ies(ee,e7)

. is—case(cu1'7'ent,e3) /\ Entier—non—nul(m)

U
oo\lO\5JI:l>_L»)N

Figure 1: Fragment du message pour «\/2 n’est pas rationnel » (sortie de Cont Det)

Le calcul du plan du texte est pris en charge par le module Docst ruct, qui s’inspire de (Danlos
et al. , 2001). Partant, Do cs t ruct a deux taches principales a mener pour produire une structure
de document : 1) choisir les unites Ininimales de la structure, 2) choisir les relations rhetoriques
qui lient les unites entre elles pour garantir la cohesion et la coherence du discours.

La structure de la A-Box calculee par Cont Det est celle d’un graphe connexe4 (les sommets
correspondant aux individus et les arcs a des roles ou relations conceptuels). Dans ce graphe,
certains sous-graphes sont fortement connexes (pseudo-cliques). Notre strategie est de consid-
erer que ce sont ces sous-graphes qui donneront lieu a des unites de discours, i.e. des segments
minimaux de contenu. Par ailleurs, nos sous-graphes sont relies entre eux par des dependances
que nous assimilerons a des relations d’ordre superieur portant sur les unites de discours. Une
telle relation correspond en fait soit a une commande du script, soit au resultat d’un axiome
(e.g. déduction, c0nclusi0n...). Un resultat de segmentation apparait dans la disposition de la
ﬁgure 1 (colonne de gauche), o1‘1 chaque ligne correspond a un segment de discours. Comme
annonce supra, notre futur plan de discours sera formalise dans le cadre de la SDRT, i.e. sous
forme d’une SDRS (Asher & Lascarides, 2003). Une SDRS est une structure dans laquelle des
constituants de discours sont connectes par des relations rhetoriques. Les constituants sont des
representations semantiques dynamiques heritees de la DRT, a savoir des DRS. Les segments
de la ﬁgure 1 sont donc destines a etre traduits en DRS, et en accord avec (Danlos et al., 2001),
cette operation se fait conjointement a la selection des relations rhetoriques.

Le modele propose par (Danlos et al., 2001) est déclaratif. L’idee est que les relations rhe-
toriques sont associees a des postulats de sens et que ceux-ci sont consideres comme des con-
ditions (des declencheurs) de selection d’une relation valide. Les conditions sont formulees
dans le meme langage que celui des formes logiques d’entree pour permettre des appariements

4Nous n’a1lons nous interesser ici qu’au cas d’un seul graphe connexe; si nous avons un graphe compose de
plusieurs parties non connexes, le module Docstruct les traitera separement. Dans notre message (Fig. 1) les
parties A, B, C et D sont les representants de sous graphes non connexes de notre entree.

Structuration automatique de preuves mathématiques

directs. La ﬁgure 2(a) illustre un tel appariement avec une regle pour la relation Resultat,
qui en SDRT permet d’exprimer la causalité entre deux phrases. La regle a la forme suivante:
conditions —> SDRS. La SDRS de la partie droite est une portion de discours dans laquelle est
instanciée la relation rhétorique déclenchée5. La SDRS obtenue en Fig. 2(a) po11rra étre générée

en « Phrasel. Donc Phraseg. »6.

Régles pour les relations de discours Schéma du raisonnement par cas
Resultat:
impli€S(C1, C2) 1) ‘IT1 ‘IT2 IE

7r1 : Calculer_sDRs(e1) . .

7r : Calculer sDRs(e ) ' Consequencd’ ' C0”Cl“de

2 — 2 Consequence(,|ED
Resultat(7r1 , 7r2)
C0nsequence(

(8) (b)

Figure 2: Regles et Schémas de Structuration Rhétorique

Cependant notre stratégie se distingue de (Danlos et al., 2001) sur plusieurs points. D’abord
les formes logiques de notre entrée comportent des informations qui peuvent reﬂéter des in-
tentions communicatives. Cela permet de sélectionner dans un plus large éventail de rela-
tions rhétoriques, notamment en faisant varier les forces illocutoires. Nous reprenons en ef-
fet l’hypothese de (Asher & Lascarides, 2003) selon laquelle les arguments des relations rhé-
toriques sont des actes de langage et que les relations induisent des typages illocutoires. I1
s’agit ici pour nous de traduire des « actes de demonstration » (les commandes saisies dans
PHOX) en actes de langage. Les regles sont sirnilaires a celles de Fig. 2(a) mais les relations
déclenchées pourront spéciﬁer une force illocutoire particuliere. Par exemple, une condition
comme ch00se(n) po11rra ainsi donner lieu a une assertion (« on choisit  ») ou un impératif
(« soit  »). Nous postulons aussi qu’un impératif déclenche une relation qui a portée sur
tout le reste du discours7; en l’occurence, pour les textes de preuve, nous posons la relation
Backgroundi pour « impératif d’arriere-plan ».

Une seconde particularité de notre approche tient au traitement des annonces de stratégies de
raisonnement mentionnées dans la forme logique et issues du script de preuve. Une telle an-
nonce ne déclenche pas directement une relation rhétorique, mais un schéma rhétorique propre
au raisonnement en question. Un schema est en fait une structure contenant plusieurs relations.
Par exemple, le schema du raisonnement par cas est illustré en Fig. 2(b). Ce type de traitement
s’explique par le fait que ces stratégies de raisonnement s’appuient sur des théoremes fonda-
mentaux (e. g. le tiers exclu pour le raisonnement par cas) qui en soi ne sont jamais explicités
dans la demonstration, mais qui en revanche impliquent des agencements discursifs bien précis
(e. g. une suite de « si..., alors... » dans le raisonnement par cas). Un schema ainsi enclenché
ne contient qu’un squelette rhétorique, qui sera paramétré ensuite en fonction du contenu de la
forme logique.

5La fonction Calculer_SDRS fait partie de la procedure de structuration et permet de construire le discours
récursivement.

5Notons que comme dans (Danlos et al., 2001), une condition comme implies(e 1, 62) peut donner lieu a autre
chose qu’une relation rhétorique, par exemple un prédicat (<< Verbal ») qui fonde une DRS (<< X 1 implique X2. »,
<< de X1 on obtient X2. » ou << X2 se déduit de X1 »).

7Ce que nous ne démontrerons pas ici pour des raisons de place.

Adil El Ghali, Laurent Roussarie

4 Conclusion

Le modele de génération profonde en cours d’implémentation de GEPHOX8 propose une
stratégie de planiﬁcation originale sur au moins deux aspects. D’abord, par rapport aux genera-
teurs automatiques de textes de preuves déja existants, les (plans de) discours ici produits
s’annoncent plus naturels et plus proches des preuves rédigées manuellement. Cela est dﬁ a
la spéciﬁcité du module Cont Det qui exploite avantageusement les sorties du prouveur pour
engendrer dynamiquement9 une structure linguistique spéciﬁque et distincte, notamment en de-
gageant des informations de nature intentionnelle (e. g. les commandes du script). Par ailleurs, si
l’utilisation d’intentions n’est pas neuve en génération (e.g. cf. (Moore & Paris, 1993)), la Inise
en oeuvre que nous présentons se distingue par la simplicité du traitement. En effet l’approche
est hybride en ce sens que les conditions intentionnelles et les conditions informationnelles (sé-
mantiques) de l’entrée donnent toutes des structures de discours de meme type: des (portions
de) SDRS. Celles-ci peuvent ensuite s’assembler selon un procédé unique (qui dépend seule-
ment des contraintes de bonne formation stipulées en SDRT). Cela permet, entre autres, de
s’affranchir de la complexité, souvent mentionnée, d’une gestion séparée des buts communicat-
ifs et de leurs interactions parfois discordantes avec les structures rhétoriques.

Références

ASHER N. & LASCARIDES A. (2003). Logics of Conversation. Cambridge: CUP. (a paraitre).

BAADER F. & KUSTERS R. (2001). Uniﬁcation in a Description Logic with Transitive Closure of
Roles. In R. NIEUWENHUIS & A. VORONKOV, Eds., Proceedings of LPAR 2001, volume 2250 of
Lecture Notes in Artificial Intelligence, Vienna: Springer-Verlag.

F. BAADER, D. L. MCGUINNESS, D. NARDI & P. F. PATEL-SCHNEIDER, Eds. (2003). Description
Logics Handbook: Theory, Implementation and Applications. Cambridge University Press.

DANLOS L., GAIFFE B. & ROUSSARIE L. (2001). Document structuring a la SDRT. In Proceedings of
the 8th European Workshop on Natural Language Generation (EWNLG’200I), p. 11-20, Toulouse.

FIEDLER A. (2001). User-adaptive proof explanation. PhD thesis, Naturwissenschaftlich-Technische
Fakultat I, Universitat des Saarlandes, Saarbriicken, Germany.

HALLGREN T. & RANTA A. (2000). An extensible proof text editor. In M. PARIGOT & A. VORONKOV,
Eds., Proceedings of LPAR ’2000, LN CS/LNAI 1955, p. 70-84, Heidelberg: Springer Verlag.

HUANG X. & FIEDLER A. (1997). Proof verbalization as an application of NLG. In IJCAI’97 Proceed-
ing (2), p. 965-972.

MOORE J. D. & PARIS C. L. (1993). Planning text for advisory dialogues: Capturing intentional and
rhetorical information. Computational Linguistics, 19(4), 651-694.

RAFFALLI C. & ROZIERE P. (2002). The PhoX Proof checker documentation. LAMA, Université de
Savoie / Université Paris 7.

REITER E. & DALE R. (2000). Building Natural Language Generation Systems. Studies in Natural
Language Processing. CUP.

ZINN C. (1999). Understanding mathematical discourse. In Proceedings of Amstelogue ’99, 3rd Work-
shop on the Semantics and Pragmatics of Dialogue, Amsterdam.

8Pour des raisons de place, nous n’avons pas détaillé ici l’algorithme complet de planiﬁcation de GEPHOX,
préférant concentrer notre propos sur les principes qui sous—tendent la structuration de document.
9Et en cela, nous nous distinguons de1’approche par traduction (mapping) de (Hallgren & Ranta, 2000).

