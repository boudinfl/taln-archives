<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>E Agirre</author>
<author>K Gojenola</author>
<author>K Sarasola</author>
<author>A Voutilainen</author>
</authors>
<title>Towards a single proposal in spelling correction&amp;quot;,</title>
<date>1998</date>
<booktitle>COLING-98,</booktitle>
<pages>22--28</pages>
<contexts>
<context position="6491" citStr="Agirre et al., 1998" startWordPosition="968" endWordPosition="971">le correcteur nous donne toujours la bonne correction parmi ses propositions, ces comptages nous apprennent que le taux d&apos;ambiguïté est très élevé. Plus de 78% des erreurs présentent en effet plus d&apos;une proposition à Le contexte au service de la correction des graphies fautives arabes leur correction. Par ailleurs, bien que le nombre moyen des propositions soit inférieur à la moyenne théorique prévue précédemment (27 formes candidates), il reste toujours trop élevé si on le compare à d&apos;autres langues. Pour l&apos;anglais par exemple le nombre moyen de candidats est de 3,4 pour des erreurs réelles [Agirre et al., 1998]. 4. Proposition Notons: Me : un mot erroné ; Mc : la correction de Me ; C = {c1, .., cn} : l&apos;ensemble des candidats à la correction de Me ; Mctxt = {m -k, ..., m-1, m+1, ..., m+k} : l’ensemble des mots entourant (avant et après) le mot erroné Me dans le texte (en considérant une fenêtre de taille k). Viser une correction complètement automatique revient à chercher à réduire l&apos;ensemble C à un singleton qui correspond au mot correct Mc. On aurait alors : Card (C) = 1 avec Mc ∈ C . Pour notre part, nous visons simplement à ce que Card (C) soit le plus petit possible. Pour cela, nous allons cher</context>
</contexts>
<marker>Agirre, Gojenola, Sarasola, Voutilainen, 1998</marker>
<rawString>Agirre E., Gojenola K., Sarasola K., Voutilainen A. (1998), &amp;quot;Towards a single proposal in spelling correction&amp;quot;, COLING-98, pp. 22-28.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ben Othmane Zribi C et Zribi A</author>
</authors>
<title>Algorithmes pour la correction orthographique en arabe &amp;quot;, TALN&apos; 9,9</title>
<date>1999</date>
<location>Corse,</location>
<marker>A, 1999</marker>
<rawString>Ben Othmane Zribi C. et Zribi A. (1999), &amp;quot;Algorithmes pour la correction orthographique en arabe &amp;quot;, TALN&apos; 9,9 Corse, 12-17 juillet 1999.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ben Othmane Zribi C et Zribi A</author>
</authors>
<title>Algorithmes pour la correction orthographique en arabe &amp;quot;, TALN&apos; 9,9</title>
<date>1999</date>
<location>Corse,</location>
<marker>A, 1999</marker>
<rawString>Ben Othmane Zribi C. et Zribi A. (1999), &amp;quot;Algorithmes pour la correction orthographique en arabe &amp;quot;, TALN&apos; 9,9 Corse, 12-17 juillet 1999.</rawString>
</citation>
<citation valid="true">
<authors>
<author>W Gale</author>
<author>K W Church</author>
<author>D Yarowsky</author>
</authors>
<title>Discrimination decisions for 100,000 dimensional spaces&amp;quot;,</title>
<date>1994</date>
<booktitle>In Current Issues in Computational Linguistics: In Honour of Don Walker,</booktitle>
<pages>429--450</pages>
<publisher>Kluwer Academic Publishers.</publisher>
<contexts>
<context position="8982" citStr="Gale et al., 1994" startWordPosition="1387" endWordPosition="1390">ci en appliquant la règle d&apos;inversion de Bayes : p Mc p(Mctxt\c ) × p(c ) (ci \ txt) i i= p(Mc txt) Puisque nous cherchons les candidats ayant la plus grande valeur p(ci\Mctxt), nous pouvons calculer uniquement la valeur p(Mctxt\ci) × p(ci). La probabilité p(Mctxt) étant la même pour tous les candidats (le contexte est le même), elle n&apos;a donc pas d&apos;effet sur le résultat. En supposant que la présence d’un mot dans un contexte ne dépend pas de la présence des autres mots dans ce même contexte, nous pouvons effectuer l&apos;approximation suivante comme l&apos;ont déjà démontré d&apos;une manière plus générale [Gale et al., 1994]: (Mctxt -k,...,kp \ci) = ∏ p(mj\ci) j Chiraz Ben Othmane Zribi, Mohamed Ben Ahmed Somme toute, nous calculons pour chaque candidat : -k,...,k ∏ p (mj\ci) × p (ci) avec : j p(m j\ ) Nombre de fois où m j et ci co-occurrentci = Nombre d&apos;occurrences de ci p(ci) Nombre d&apos;occurrences de ci = Nombre total de mots 4.1.1 Expérience : Notre expérience se réalise en deux étapes : une étape d&apos;apprentissage pendant laquelle on collecte les probabilités pour les candidats et une étape de test qui consiste à utiliser ces probabilités pour choisir entre les candidats. – Étape d’apprentissage Cette étape co</context>
</contexts>
<marker>Gale, Church, Yarowsky, 1994</marker>
<rawString>Gale W., Church K. W., Yarowsky D. (1994), &amp;quot;Discrimination decisions for 100,000 dimensional spaces&amp;quot;, In Current Issues in Computational Linguistics: In Honour of Don Walker, pages 429-450. Kluwer Academic Publishers.</rawString>
</citation>
<citation valid="true">
<authors>
<author>K Kukich</author>
</authors>
<title>Techniques for automatically correcting words in text&amp;quot;.</title>
<date>1992</date>
<journal>In ACM Computing Surveys,</journal>
<booktitle>in Proceedings of the 4th ACL Conference on Applied Natural Language Processing,</booktitle>
<volume>24</volume>
<pages>377--439</pages>
<location>Stuttgart, Germany.</location>
<contexts>
<context position="2456" citStr="Kukich, 1992" startWordPosition="366" endWordPosition="367">word, Automatic correction, Context 1. Introduction La majorité des correcteurs orthographiques existants sont semi-automatiques, ils assistent l&apos;utilisateur en lui proposant un ensemble de candidats proches du mot erroné. Disposant d&apos;un tel correcteur orthographique pour l&apos;arabe [Ben Othmane Zribi et Zribi, 1999], nous nous sommes proposés de l&apos;améliorer en diminuant le nombre de ses propositions. Deux motivations principales nous ont incité à s&apos;intéresser à ce problème : D&apos;abord la nécessité qu&apos;ont certaines applications d&apos;une correction des erreurs orthographiques complètement automatique [Kukich, 1992]. Ensuite, l&apos;importance du nombre de candidats pour une forme erronée arabe comparé à d&apos;autres langues comme le français et l&apos;anglais due à la proximité lexicale des mots. Le nombre moyen de formes lexicalement voisines (mots qui diffèrent d&apos;une seule erreur d&apos;édition: ajout, Chiraz Ben Othmane Zribi, Mohamed Ben Ahmed suppression, substitution et interversion) qui est de 3 pour l&apos;anglais et de 3,5 pour le français est de 26,5 pour l&apos;arabe non voyellé [Ben Othmane Zribi et Zribi, 1999]. Notre but étant une correction complètement automatique, nous avons tenté de l&apos;approcher en minimisant auta</context>
</contexts>
<marker>Kukich, 1992</marker>
<rawString>Kukich K. (1992), &amp;quot;Techniques for automatically correcting words in text&amp;quot;. In ACM Computing Surveys, Vol.24, N.4, pp.377-439 Oflazer K. (1994), &amp;quot;Spelling correction in agglutinative languages&amp;quot;, in Proceedings of the 4th ACL Conference on Applied Natural Language Processing, Stuttgart, Germany.</rawString>
</citation>
<citation valid="true">
<authors>
<author>D Yarowsky</author>
</authors>
<title>Decision lists for lexical ambiguity resolution: Application to Accent Restoration in Spanich and French&amp;quot;,</title>
<date>1994</date>
<journal>ACL&apos;</journal>
<volume>9</volume>
<pages>88--95</pages>
<marker>Yarowsky, 1994</marker>
<rawString>Yarowsky D. (1994), &amp;quot;Decision lists for lexical ambiguity resolution: Application to Accent Restoration in Spanich and French&amp;quot;, ACL&apos; 9,4 pp. 88-95.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>