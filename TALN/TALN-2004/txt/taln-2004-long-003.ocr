TALN 2004, Fés, 19-21 aVn'12004

Vers un statut de l’arbre de dérivation : exemples de
construction de representations sémantiques pour les
Grammaires d’Arbres Adjoints

Sylvain Pogodalla
LORIA — Campus Scientiﬁque
BP239

F-54602 VandoeuVre—lés—Nancy
sylVain.pogodalla@loria.fr

Résumé — Abstract

Cet article propose une déﬁnition des arbres de dérivation pour les Grammaires d’Arbres Ad-
joints, étendant la notion habituelle. Elle est construite sur l’utilisation des Grammaires Cate’-
gorielles Abstraites et permet de maniere symétrique le calcul de la représentation syntaxique
(arbre dérive’) et le calcul de la représentation sémantique.

This paper suggests a deﬁnition for Tree Adjoining Grammar derivation trees, extending the
usual notion. It results from using Abstract Categorial Grammars and enables, in a symmet-
ric way, the computation of both the syntactic representation (derived tree) and the semantic
representation.

Mots-clefs — Keywords

Sémantique, grammaires d’arbre adjoints, grammaires catégorielles, )\—calcul
Semantics, tree adjoining grammars, Categorial grammars, )\—calculus

1 Introduction

Dans le processus de construction de la représentation sémantique d’une expression de la langue
naturelle, une approche importante consiste a associer les regles de combinaison syntaxique
et celles de combinaison sémantique. Si dans (Montague, 1974) la déﬁnition du calcul syn-
taxique se préte mal a l’implantation, les principes sous—jacents sont a la base de nombreux
autres travaux menés sur des formalismes syntaxiques plus élaborés. Nous mentionnerons en
premier lieu les grammaires catégorielles (Lambek, 1958; Moortgat, 1996), par le lien base’
sur l’homomorphisme de Curry—Howard qu’elles établissent entre un calcul syntaxique logique
et un calcul sémantique base’ sur le )\—calcul. Puis, les grammaires HPSG, avec les travaux
de (Copestake et al., 1999), ou LFG (Dalrymple, 1999).

Sylvain Pogodalla

Nous nous inte’ressons ici plus particulierement aux travaux re’alise’s dans ce cadre pour les
grammaires d’arbres adjoint (TAG) (Joshi et al., 1975; Abeillé, 1993). Le principe de ces
grammaires est de proposer un calcul d’arbres présentant deux operations : l’adjonction et
la substitution. Ainsi, lors de l’analyse syntaxique d’une phrase, se construit l’arbre dérive’,
résultat du calcul de toutes ces opérations sur des arbres issus du lexique, les arbres initiaux
et les arbres auxiliaires. Cet arbre s’accompagne d’un autre arbre, l’arbre de dérivation qui
indique les operations entre les arbres du lexiques par des ﬂeches oriente’es vers le bas s’il s’agit
de substitution et vers le haut s’il s’agit d’adjonction (exemple de la ﬁgure 1).

Ce dernier arbre, en ce qu’il décrit les operations de com-
binaison entre les arbres, a géne’ralement e’té pris comme
base dans les propositions de calcul de représentation se-
mantique pour les TAG (Schabes & Shieber, 1994; Can-
dito & Kahane, 1998; Kallmeyer, 2002; Joshi et al., 2003). CW"
Néanmoins, pour répondre a diverses contraintes, telle
celle de la représentation en Frangais des quantiﬁcateurs
par des arbres auxiliaires, ces structures nécessitent d’étre
enrichie, sans que cela ne regle tous les problemes.

Cabaiz

Cum:

Figure 1: Arbre de de’rivation

(Gardent & Kallmeyer, 2003) propose de re’soudre ces problemes en construisant directement
sur l’arbre derive’ les représentations sémantiques, sans plus tenir compte de l’arbre de deriva-
tion. Néanmoins se pose alors le probleme de l’attachement et de la réutilisation des repre’sen—
tations ainsi construites.

Dans cet article nous nous proposons de revenir sur la notion d’arbre de dérivation. S’inspirant
d’autres formalismes grammaticaux qui n’ont pas non plus de regles syntagmatiques, la notion
que nous déﬁnissons permet de conside’rer de maniere équivalente la représentation syntaxique
et la représentation sémantique en tant que re’sultat d’un processus spéciﬁe’ par l’arbre de deri-
vation. La difference reﬂete alors simplement le choix de langages formels différents pour la
partie syntaxique (arbres) et la partie sémantique (langage de représentation sous—spe’ciﬁé), ainsi
que les deﬁnitions lexicales.

Pour ce faire, nous faisons appel au formalisme, introduit par (de Groote, 2001), des gram-
maires catégorielles abstraites (ACG). Puis nous montrons comment y mode’liser les TAG, puis
la sémantique LU (Bos, 1995). Enﬁn nous explorons sur quelques exemples les résultats de cette
approche.

2 Grammaires catégorielles abstraites

Les ACG, formalisme grammatical base’ sur la logique linéaire (Girard, 1987), correspondent
plus a un cadre grammatical dans lequel modéliser d’autres formalismes grammaticaux et leur
apporter ses outils que comme un nouveau formalisme grammatical. Ceci en raison des carac—
téristiques suivantes :

o chaque ACG engendre deux langages : un langage abstrait, qui peut étre vu comme
un ensemble abstrait de structures grammaticales, et un langage objet représentant les
formes re’alise’es des structures abstraites. Ici, le langage abstrait correspond a la structure
grammaticale que l’on veut manipuler : l’arbre de dérivation. ll sera associe’, par deux

Vers un statutde1’arbre de derivation : eXemp1es de construction de
representations sémantiques pour les Grammaires d’Arbres Adjoints

ACG différentes, d’une part a la réalisation syntaxique sous forme d’arbres de TAG et
d’autre part a la réalisation se’mantique sous forme de formules de LU ;

o les ACG reposent sur un ensemble réduit de primitives mathématiques, en particulier le
connecteur implicatif de la logique linéaire —o. Ce connecteur permet de représenter
l’implication comme consommateur de ressources : lorsqu’une formule A est utilisée
avec une formule A —o B pour produire une formule B, les deux premieres formules
ne sont plus utilisables par la suite dans la preuve, contrairement a la logique classique.
La conséquence de ce comportement est que les )\—termes associés Via l’isomorphisme de
Curry—Howard (Howard, 1980) sont dits line’aires, c’est—a—dire que toute )\—abstraction lie
une et une seule Variable.

Dans (de Groote, 2001), les langages engendrés par les ACG sont des ensembles de )\—termes
line’aires. Ces derniers généralisent aussi bien les langages de chaines de caractéres que ceux
d’arbres. Cela sufﬁt pour modéliser les TAG, c’est en revanche insufﬁsant pour la partie se’man—
tique (par exemple la variable as est utilisée deux fois pour dire que l’indiVidu qu’elle dénote
est un chien chien(ac) et qu’il est noir noir(ac) dans l’eXpression chien noir). La motivation
principale pour se limiter au )\—calcul linéaire tient dans le principe sous—jacent d’analyse dans
ce cadre : il consiste en la résolution de problémes de ﬁltrage de )\—termes d’ordre supérieur. Or
ce probléme pris dans toute sa généralité est difﬁcile. Suivant les cas, il est indécidable (Loader,
2003), de complexite’ encore inconnue (Dowek, 2001), ou décidable. Pour le ﬁltrage de A-
termes linéaires, le probléme est NP—complet (de Groote, 2000), ce qui en fait un bon candidat
pour les langages des ACG.

Toutefois, si l’on considére pour le langage objet des termes du )\—calcul simplement type’, avec
certaines conditions sur le lexique, la propriété de décidabilite’ est conservée (le probléme est
ramene’ a un probléme de recherche de preuve dans le fragment multiplicatif de la logique
linéaire, qui est décidable). Nous n’approfondirons pas ce point, mais c’est le cas pour les
ACG que nous considérons ici. Par ailleurs, le probléme ne se poserait que pour passer de la
représentation sémantique a la représentation syntaxique (génération), l’analyse sémantique ne
posant pas ces problames de décidabilite’.

Pour les déﬁnitions précises des ACG, nous renvoyons le lecteur a (de Groote, 2001). Toutefois,
certaines notions sont un peu différentes et nous les redéﬁnissons ici.

Deﬁnition 1 (Types). Soit A un ensemble de types atomiques. L’ensemble T (A) des types
construits sur A est deﬁni par .' T (A) ::= A|A —> T (A)|T (A) —o T (A)

L’ensemble des types 15 E T(A) tels que le symbole —> n’apparait pas dans 15 est l’ensemble
des types linéaires implicatifs, note’  Les autres renvoie an )\—calcul simplement type’
habituel.

Deﬁnition 2 (Signature d’ordre supérieur). Une signature d’ordre supérieure est un triplet
Z = (A, C, 7') on .'

o A est un ensemble de types atomiques ,'
o C’ est un ensemble ﬁni de constantes ,'
0 7' : C —> T(A) qui assigne it chaque constante de C’ un type.

Si 7' : C —> '1]-J(A), la signature est dite linéaire.

Sylvain Pogodalla

L’ensemble des termes typés A(Z) est déﬁni de maniere habituelle, avec l’aide de la logique
linéaire pour manipuler aussi bien des termes linéaires que non linéaires. Nous utilisons ici les
deux implications linéaire —o et intuitionniste —>. Ceci est permis par le codage de la logique
intuitionniste en logique linéaire par la traduction A —> B E (!A) —o B (Girard, 1987; Danos
& Cosmo, 1992). Cela signiﬁe qu’une Variable de type 06 dans un terrne de type 06 —> B pourra
étre abstraite plusieurs fois (mais, ici, au moins une), alors qu’elles ne 1’est qu’une et une seule
fois dans un terme de type 06 —o B.

Deﬁnition 3 (Lexique). Etant d0nne’s une signature linéaire d ’0rdre supe’rieur E1 = (A1, C1, 7'1)

et une signature d ’0rdre supe’rieur E2 = (A2, C2, 7'2), un lexique L’, de 21 Vers 22 est une paire
L’, = (F, G) telle que .'

o F : A1 —> T(A2) est une fonction d ’interpre’tati0n des types atomiques de 21 comme
des types implicatifs construits it partir de A2. On appellera F e’galement l’extensi0n
homomorphique de F 61 tous les types de T(A1) ,'

o G : G1 —> A(E2) est une fonction d ’interpre’tati0n des constantes de 21 comme des
)\—termes construits it partir de 22. On appellera G son extension homomorphique ,'

o les fonctions d ’interpre’tati0n sont compatibles avec la relation de typage, c’est—c‘z—dire
que pour tout c E G1,G(c) : F (7'1(c)) (le type de l’image de c est l’image du type de c).

Dans la suite, on utilisera L',(a) pour F (a) ou G(a) suivant le contexte.

Deﬁnition 4 (Grammaire eatégorielle abstraite). Une grammaire cate’gorielle abstraite est un
quadruplet Q = (E1, 22, L3, 3) ou .'

o 21 est une signature linéaire d ’0rdre supe’rieure, et 22 une signature d ’0rdre supe’rieure.
Ils sont appele’s Vocabulaire abstrait et Vocabulaire obj et ,'

0 £ : 21 —> 22 est un lexique ,'

o 3 est un type atomique du vocabulaire abstrait, appele’ le type distingué de la grammaire.

Deﬁnition 5 (Langages abstrait et objet). Soit Q = (E1, 22, L3, 3) une grammaire cate’g0rielle
abstraite.

1. Le langage abstrait .A(Q) engendre’par Q est de’ﬁnipar .A(Q) = {t E A(E1)|t : 3}
2. Le langage objet 0(9) engendre’ par Q est de’ﬁni par
0(9) = {t E A(E2)|E|u E .A(Q) avec t = 

3 Les grammaires d’arbres adjoints comme une ACG

Dans cette section, nous allons montrer comment une grammaire TAG peut étre modélise’e avec
une ACG. Nous reprenons cette mode’lisation de (de Groote, 2002).

Soit G = (E, N, I, A, S’) une TAG. Z, N, I, A et 5' sont respectivement l’ensemble des sym-
boles terminaux, des symboles non terminaux, l’ensemble des arbres initiaux et auxiliaires et
le symbole non terminal distingué de la grammaire. QC = (EST, E€AG, LIG, 3G) la grammaire
catégorielle abstraite associe’e est construite de la maniere suivante :

EST : 51 paitir de G, on déﬁnit :

Vers un statutde1’arbre de derivation : exemples de construction de
representations sémantiques pour les Grammaires d’Arbres Adjoints

° Agr = {0¢s;04A|0¢ E N}
0 C5 = {cT|T E I} U {cT|T E A} U {Ia|ac E N} avec
— siT E IalorscT : 71A —o---*ymA -0315 -0 ---ﬂnS —oago1‘1aestlaracine
de T, les 31,- ses nceuds intérieurs et les ﬂi ses nceuds ou les substitutions ont lieu
— siT E AalorscT:*y1A—o---*ymA—oﬂ1S—o---ﬂnS—oacA —oacAo1‘1a¢est
la racine de T, les *y,- ses nceuds intérieurs et les ﬂi ses nceuds ou les substitutions
ont lieu
— Ia est de type 04,4

Z.lC5AG : a partir de G, on déﬁnit :

0 A¥AG = {7} ou 7' représentera le type arbre
o C'TCj;G est constitue’ de
— pour chaque terminal u de 2, une constante u de type 7'
— pour chaque non terminal Clt, des constantes 04,- : 7' —o  —o 7; —o 7' pour
E’. f .
Z 01S
1 3 2' 3 ka, avec kc, le nombre maximum de ﬁls que peut avoir un nmud
étiquete’ Gt dans G

11 reste maintenant a déﬁnir le lexique. Plutot que de le de’ﬁnir dans sa généralité, nous don-
nerons les principes de construction a partir des arbres du tableau 1. On a alors :

o aux types as sont associés le type 7', c’est—a—dire qu’ils correspondent a des arbres ;
o aux types 04,4 sont associés le type 7' —o 7', c’est—a—dire qu’ils correspondent a des fonc—
tions transformant un arbre en arbre ;
0 aux constantes Ia correspondent a l’identite’ )\w.ac.

/\ A
N‘ /N\ N vp N /N\ N VP /VP\
chat tout N* Chasse N chien un N* aboie VP* habituellement

Table 1: Exemple de lexique TAG
Un arbre tel que celui de aboie est appele’ a étre déﬁni de la maniere suivante : S2N (VP1 aboie)
c’est—a—dire que S2 a deux ﬁls : N et un deuxieme qui est lui—méme un arbre de racine VP1 qui
a un seul ﬁls aboie. Compte tenu de la substitution possible en N, mais aussi des adjonctions,
en particulier en VP, le lexique lui associe la forme )\V)\N.S2N(V(VP1 ab0ie)). En effet, si
un arbre T, de habituellement, est adjoint en VP1, T prend l’arbre de racine VP1 et l’ajoute a
lui—méme, au niveau de son ﬁls gauche, pour former un nouvel arbre. Autrement dit, T est de
la forme )\ac.VP2ac habituellement , un terme d’ordre supérieur qui transforme un arbre en un

autre arbre.

Cela nous conduit par exemple au lexique d’ACG du tableau 21. On laissera le lecteur Veriﬁer
que le typage des termes est correct.

1Pour des raisons de concision, on omet les noeuds habituels Det, V, etc. Pour les mémes raisons, on supprime
comme paramétres les noeuds sur lesquels il n’y aura pas d’adjoncl:ion dans les exemple (on pourrait sinon les
neutraliser en leur appliquant I Q)-

Sylvain Pogodalla

Constante 0 son type

Cchien 2 NA _° NS

Cchat 2 NA -0 Ns

Ctout 1 NA

Gun 2 NA

Caboie I VPA -0 Ns -0 SS

Cchasse ZVPA -0 NS -0 NS _° SS
Chabituellement I VPA -0 VPA

C’ = [(0) E A(ETAG)

céhien = )\N.N(N1 chien) : (7' —o 7') —o 7'

C2,”, = )\N.N(N1 chat) : (7' —o 7') —o 7'

0:0“, = )\ac.N2 tout ac : 7' —o 7'

c;,,=)\ac.N2unac :7'—o7'

cflbm-e = )\V.)\ac.S2ac(V(VP1ab0ie)) : (7' —o 7') —o 7' —o 7'
céham = )\V.)\ac.)\y.S2ac(V(VP2chasse y)) : (7' —o 7') —o 7' —o 7' —o 7'

c;,a,,,.,ue,,e,,,e,,, = )\V.)\ac.V(VP2ac habituellement) : (7' —o 7') —o (7' —o 7')

Table 2: Lexique de QC

En neutralisant les nceuds sur lesquels aucune adjonction n’est faite par la constante Ia corre-
spondante, on a alors par exemple la correspondance entre les termes du langage abstrait de
A(Z}DT) et les termes du langage objet de A(ETAG) du tableau 3.

A(2DT) : CaboieIVP(CchienCtout) CchasseIVPS(CchienCtout) (cchatcun)

N VP tout T Chasse
K\ | chien /\
tout N| abate un T
A ( ETAG) 3 chien chat

Table 3: Exemple de termes abstraits et des arbres derives correspondants dans G

Remarquons que le terme ca;,,,ieIVp(cC,,,-e,,c,,,,,,) peut s’ecrire sous forme d’arbre foncteurs—arguments.

Sur cet arbre, si l’on supprime les liens vers les arguments Ia qui indiquent simplement que cer-
tains nceuds n’ont fait l’objet d’aucune adjonction, et si l’0n indique le typage de l’argument
par l ’0rientati0n de lafléche, avec une ﬂeche orientee vers le bas si l’argument est de type as
et vers le haut si l’argument est de type 04,4, on obtient bien 1’arbre de derivation traditionnel de
la ﬁgure 1.

Avec une telle traduction, on a le theoreme suivant (de Groote, 2002) : soit G une TAG. Le
langage d’arbre engendre par G est isomorphe aux langages objet de l’ACG QC.

Alors que 1’arbre de derivation n’est generalement utilise que dans le cadre semantique, nous
voyons ici que l’on peut lui donner un statut utile au calcul de 1’arbre derive, c’est—a—dire
au cadre syntaxique. Dans la section suivante, nous allons montrer comment, en utilisant

Vers un statutde1’arbre de derivation : exemples de construction de
representations sémantiques pour les Grammaires d’Arbres Adjoints

comme notion d’arbre de dérivation les termes du langage abstrait A(ZDT), peut se constru-
ire la représentation sémantique associée aux arbres dérivés. En particulier, nous reprenons
le principe d’éléVation de type utilise’ pour les arbres adjoints, qui leur donne un type d’ordre
supérieur.

4 La sémantique Lu comme une ACG

Le choix de la représentation sémantique pour notre experimentation se rapproche de celui fait
dans différents articles sur la représentation sémantique en TAG, en particulier (Kallmeyer,
2002; Gardent & Kallmeyer, 2003). Il s’agit de la sémantique sous—spe’ciﬁe’e LU dite « a
trou » (Bos, 1995; Blackburn & Bos, 2003). Nous renvoyons le lecteur a ces deux références
pour les détails.

Le principe de LU est de spéciﬁer entre différentes formules les relations de sous—formule. Ainsi,
la formule de LU associée a l’eXpression tout chien chasse un chat :

)\hl.Elh1l1l2l3’U1(h 2 l2 /\ l2 2 A"(’U1,l3) /\ l3 2 |mp(l1,h1) /\ hl Z l/\ h 2 l1 /\ l1 2 Chien(’U1)
Aahgzgzgzgmh 2 1; A1; ; Ex(v;, lg) A lg :And(l’1, '1) A h; 2 1 A h 2 1'1 A 1; ; chat(v;)
Ah 2 l /\l : chasse(v1,v§)))

spéciﬁe que la formule étiquetée par l (l : chasse(v1, 1/1)) soit sous—formule de celle étiquetée
par l2 (car hl Z l, et hl sous—formule de |mp(l1,h1) étiquetée par l3, elle—méme sous—formule
de A||(v1, l3) d’étiquette l2). De la méme maniére, elle doit étre sous—formule de Ex(v§, lg)
étiquetée par lg (Via h’1 Z l et lg).

Cela donne deux formules de la logique de prédicats possibles qui Vériﬁent cette spéciﬁcation :

A||(ac, |mp(man(ac), EX(y, And(woman(y), |ove(ac, y)))))
EX(y, And(woman(y), A||(ac, |mp(man(ac), |ove(ac, y)))))

ou, exprimées dans la logique des prédicats usuelle :

‘v’ac(man(ac) => 3y(woman(y) /\ love(ac, y)))
EIy(woman(y) /\ ‘v’ac(man(ac) => love(ac, y)))

Ici, nous ne nous intéressons pas a trouver les formules de la logiques des prédicats qui sat-
isfont les formule de LU. Nous ne faisons que construire des formules de LU. Pour ce faire,
nous utiliserons une signature d’ordre supérieure EL” = (ALU, CL”, 71“) déﬁnie de la maniére
suivantez :

0 AL“ = {h, l, t, p, e} sont les types représentant respectivement les trous, les étiquettes, les
descriptions d’arbre, les prédicats et les entités (t et 6 sont choisis pour l’analogie avec la
sémantique de Montague, en particulier pour l’e’léVation de type) ;

0 CL” et 71” sont déﬁnis par les tableau 4 et trois quantiﬁcateurs existentiels El; : (l —>
t) —o t, Elh : (h —> t) —o 15 et Ele : (e —> t) —o t, tous notés par abus de langage El, et
dont l’interpre’tation intuitive est que EIP est une description d’arbre satisﬁable s’il existe
ac respectivement étiquette, trou ou individu, Pm est satisﬁable. Par abus de notation
toujours, on notera E|acP pour E|()\ac.P) ou ac est une Variable libre de P.

Sylvain Pogodalla

Z : h —> l —> t pour speciﬁer les relations de dominance large enlre lrous
et étiquettes

. : l —> p —o t perrnet d’étiqueter des prédicats

/\ : t —o t —o t perrnet la conjonction de descriptions

All, Ex :6 —> l —> t destine’ a étre interpre’te’ comme les quantiﬁcations uni-
Verselle et existentielle

And, Imp : l —> h —> p destine’ a étre interpre’te’ comme la conjonction et
l’implication

chien, chat, : e —> p Prédicats habituels

aboie

chasse : e —> e —> p

habituellement : h —> p

Table 4: Deﬁnition de la signature pour le langage de sous—spe’ciﬁcation

Pour utiliser EL”, il reste a de’ﬁnir une ACG (EDT, EL”, LI), avec £ un lexique qui lie les termes
abstraits des arbres de de’riVation aux termes des descriptions d’arbre. On aura bien entendu
pour tout c, L',(c) = c" dans le tableau 5, avec pour la transformation des types atomiques :

£(Ns) =
£(Sg) = h —> l —> t

(e—>h—>l—>t)—o(h—>l—>t) £(VPA)=(h—>l—>t)—o(h—>l—>t)
£(NA)=(e—>h—>l—>t)—o(e—>h—>l—>t)—o(h—>l—>t)

cghien = )\q.q()\a:hl.h 2 l/\l : chien(a:))

cgha, = )\q.q()\a:hl.h 2 l/\l : chat(a:))

cgboie = )\a,1,,)\s.s()\a:.a,1,,()\hl.h 2 l/\l : aboie(a:)))

cgme = )\a,1,,)\s)\o.s()\a:.a,1,,(o()\yh’l’.h’ 2 l’ /\ l’ : chasse(a:,y))))
cg“, = )\7‘p.)\hl.E|h1l1l2l3v1(h 2 l2 /\ l2 2 A"(’U1,l3) /\ l3 2 lmp(l1, h1)

/\h1 Z l/\’I"U1 llll /\p’U1lll)

C5,, = }\'r'p.}\h'l'.E|h'1l'1l'2lg'U'1(h' 2 lg /\ lg : EX('(/1, lg) /\ lg : And(l§, 
/\h’12l’/\7*v'1h’l’1/\pv§h’l’)

cgfabmellement = )\a,1v.}\7'.)\hl.E|h1l1('r' hl /\ ll 2 l1 /\ l1 : habituel|ement(h1)
/\h1 Z l/\ a,1,,()\h’l’.h’ Z l')hl1)

Table 5: Quelques représentations se’mantiques

Nous ne pouvons pas de’tailler ici les calculs, mais ce lexique rend compte de l’ambigu'1'té de
portée des quantiﬁcateurs, en calculant par exemple

II II
cchienctout

II II
cchatcun

= }\plll.Elll1l1l2l3’U1(ll 2 l2 /\ l2 2 A"(’U1,l3) /\ l3 2 |mp(l1,h1)
/\ll1 Z l/\ ll 2 l1 /\l1:ChleI1(’U1)/\p’U1 lll)

= }\pll’l’.Elll’1l’1l’2lg’Ui(ll’ 2 lg /\ lg Z EX(’Ui, lg) /\ lg Z AI1d(l’1, 
/\h’1 2 l’ A h’ 2 l'1/\l’1 : chat(v’1) /\p1/1 h’ l’)

‘C (CchasseI VP (cchienctout) (cchatcun)) : cghassel VP (cghiencllzut) (cghatcgn)

= }\lll.E|ll1l1l2l3’U1(ll 2 l2 /\ l2 2 A"(’U1,l3) /\ l3 2 |mp(l1, h1)
/\h1 Z l/\ ll 2 l1 /\ l1 : chien(v1) /\ Ell?/1l'1l'2lg'lJi(ll 2 lg
/\l’2 : Ex(v§, lg) A lg : And(l’1, '1) A h’12l/\ h 2 l’1
/\l’1 :chat(v§) A h 2 l A l : chasse(v1,v§)))

ou le prédicat chasse(v1, vi), étiquete’ par l, est dominé a la fois par l2 et l’2, ces deux quantiﬁ-

2Nous remarquons que cette fois nous utilisons des termes non linéaires 2 si Am.P : 04 —> ﬂ alors ac est une
variable libre de P qui y apparait une ou plusieursfois.

Vers un statutde1’arbre de derivation : eXemp1es de construction de
representations sémantiques pour les Grammaires d’Arbres Adjoints

cateurs n’étant pas ordonnés l’un par rapport a l’autre.

On peut de la meme maniere tenir compte de l’ambigu'1'té introduite par les adverbes. Ainsi,
on remarquera que le terme associe’ a czabimellemem agit comme un adverbe opaque : si un autre
adverbe lui est adjoint (le parametre adv), son champ dominera l1 : habitue||ement(h1). Cela
rend compte de ce que si un autre adverbe est ajoute’, habituellement restera toujours dans son
champs. Pour lever cette opacite’, il sufﬁrait que l’adVerbe adv ne domine que le label du Verbe,
soit l.

5 Conclusion

Revenant sur les diverses approches pour construire une representation sémantique en TAG,
nous avons propose’ de donner un role Central 51 l’arbre de derivation. Ce dernier est pris au
sens de terme du langage abstrait de l’ACG associe’e a la grammaire TAG, plus large que le
sens traditionnel. Des lors, la representation syntaxique (arbre dérive’) comme la representation
sémantique s’obtiennent au bout d’un processus de calcul décrit par l’arbre de derivation.

Si la partie syntaxique a été montrée comme complete Vis—a—Vis du langage d’arbre engen-
dre’ (de Groote, 2002), nous n’aVons donne’ ici que quelques exemples de la pertinence de notre
approche pour le calcul sémantique en TAG. Il s’agit de poursuivre cet effort et de Vériﬁer com-
ment modéliser les différents phénomenes identiﬁes comme problématiques dans (Kallmeyer,
2002; Frank & Van Genabith, 2001; Gardent & Kallmeyer, 2003), en particulier pour les Verbes
a controle. Néanmoins nous avons montre’ que les arbres de dérivation sufﬁsent pour rendre
compte du role sémantique des quantiﬁcateurs, meme en les représentant par des arbres ad-
_]O1l’1tS.

Enﬁn, nous n’aVons pas tenu compte des controles induits sur la derivation par la présence
des traits. Pour ce faire, il sera sans doute nécessaire d’élargir encore le langage de )\—termes
en faisant intervenir les types additifs de la logique linéaire, de la meme maniere qu’ils sont
utilise’s pour modéliser les traits dans les grammaires de types logique (Morrill, 1994).

Références

ABEILLE A. (1993), Les nouvelles syntaxes, Paris, Armand Colin Editeur.

BLACKBURN P., BOS J. (2003), Computational semantics for natural language, http: / /www.
iccs . informatics . ed . ac . uk/~jbos /comsem/bookl . html, Course Notes for NASSLLI
2003.

BOS J. (1995), Predicate logic unplugged, Proceedings of the Tenth Amsterdam Colloquium.

CANDITO M.—H., KAHANE S. (1998), Can the tag derivation tree represent a semantic graph? an
answer in the light of meaning—text theory, Proceedings of the Fourth International Workshop on Tree
Adjoining Grammars and Related Framework ( T AG+4 ), volume 98-12 of IRCS Technical Report Series.

COPESTAKE A., FLICKINGER D., SAG I., POLLARD C. (1999), Minimal recursion semantics: An
introduction, http : / /www—csli . stanford . edu/~aac /papers /newmrs . pdf.

M. DALRYMPLE, Ed. (1999), Semantics and Syntax in Lexical Functional Grammar: The Resource
Logic Approach, MIT Press.

Sylvain Pogodalla

DANOS V., COSMO R. D. (1992), The linear logic primer, http: //www.pps . jussieu . fr/
~dicosmo/CourseNotes /LinLog/, An introductory course on Linear Logic.

DE GROOTE P. (2000), Linear hi gher—order matching is np—complete, dans L. BACHMAIR, Ed., Rewrit-
ing Techniques and Applications, RTA’00, volume 1833 of LNCS, p. 127-140, Springer.

DE GROOTE P. (2001), Towards abstract categorial grammars, Association for Computational Linguis-
tics, 39th Annual Meeting and 10th Conference of the European Chapter, Proceedings of the Conference,
p. 148-155.

DE GROOTE P. (2002), Tree—adjoining grammars as abstract categorial grammars, T AG+ 6, Proceedings
of the sixth International Workshop on Tree Adjoining Grammars and Related Frameworks, p. 145-150,
Universita di Venezia.

DOWEK G. (2001), Higher—order uniﬁcation and matching, dans A. ROBINSON & A. VORONKOV,
Eds., Handbook of Automated Reasoning, volume 2, chapter 16, Elsevier Science.

FRANK A., VAN GENABITH J . (2001), Glue tag: Linear logic based semantics construction for
ltag — and what it teaches us about the relation between lfg and ltag, dans M. BUTT & T. H.
KING, Eds., Proceedings of the LF G ’0I Conference, Online Proceedings, CSLI Publications, http:
//cslipublications . stanford . edu/LFG/6 /lfg0 1 . html.

GARDENT C., KALLMEYER L. (2003), Semantic construction in feature—based tag, Proceedings of the
I 0th Meeting of the European Chapter of the Association for Computational Linguistics (EACL).

GIRARD J .—Y. (1987), Linear logic, Theoretical Computer Science, Vol. 50, 1-102.

J . R. HINDLEY & J . P. SELDIN, Eds. (1980), To H. B. Curry: Essays on combinatory logic, Lambda
Calculus and Formalism, Academic Press.

HOWARD W. A. (1980), The Formula:—as—Types Notion of Construction, p. 479-490, dans (Hindley &
Seldin, 1980).

JOSHI A. K., KALLMEYER L., ROMERO M. (2003), Flexible composition in ltag: Quantiﬁer scope
and inverse linking, dans H. BUNT, I. VAN DER SLUIS & R. MORANTE, Eds., Proceedings of the Fifth
International Workshop on Computational Semantics I WCS—5 .

JOSHI A. K., LEVY L. S., TAKAHASHI M. (1975), Tree adjunct grammars, Journal of Computer and
System Sciences, Vol. 10(1), 136-163.

KALLMEYER L. (2002), Using an enriched tag derivation structure as basis for semantics, Proceedings
of the Sixth International Workshop on Tree Adjoining Grammar and Related Frameworks ( T AG+6 ).

LAMBEK J . (1958), The mathematics of sentence structure, American Mathematical Monthly,
Vol. 65(3), 154-170.

LOADER R. (2003), Higher order ﬂ matching is undecidable, Logic Journal of the IGPL, Vol. 11(1),
51-68.

MONTAGUE R. (1974), The proper treatment of quantiﬁcation in ordinary english, dans P. PORTNER &
B. H. PARTEE, Eds., Formal Semantics: The Essential Readings, chapter 1, Blackwell Publishers, 2002
edition.

MOORTGAT M. (1996), Categorial type logics, dans J . VAN BENTHEM & A. TER MEULEN, Eds.,
Handbook of Logic and Language, p. 93-177, Amsterdam, Elsevier Science Publishers.

MORRILL G. V. (1994), Type Logical Grammar Categorial Logic of Signs, Kluwer Academin Publish-
ers.

SCHABES Y., SHIEBER S. M. (1994), An alternative conception of tree—adjoining derivation, Compu-
tational Linguistics, Vol. 20(1), 91-124.

