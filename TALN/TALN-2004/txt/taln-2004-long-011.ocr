TALN 2004, Fe‘s, 19-21 avril 2004

Deux premieres étapes vers les documents auto-explicatifs

Hervé Blanchon, Christian Boitet

GETA, CLIPS-IMAG
BP 53
38041 Grenoble Cedex 9
{HerVé.Blanchon, Christian.Boitet}@imag.fr

Résumé - Abstract

Dans le cadre du projet LIDIA, nous avons montré que dans de nombreuses situations, la TA
Fondée sur le Dialogue (TAFD) pour auteur monolingue peut offrir une meilleure solution en
traduction multicible que les aides aux traducteurs, ou la traduction avec révision, méme si
des langages contrélés sont utilisés. Nos premieres expériences ont mis en évidence le besoin
de conserver les << intentions de l’auteur » au moyen << d’annotations de désambiguisation ».
Ces annotations permettent de transformer le document source en un Document Auto-
Explicatif (DAE). Nous présentons ici une solution pour intégrer ces annotations dans un
document XML et les rendre visibles et utilisables par un lecteur pour une meilleure
compréhension du << vrai contenu » du document. Le concept de Document Auto-Explicatif
pourrait changer profondément notre facon de comprendre des documents importants ou
écrits dans un style complexe. Nous montrerons aussi qu’un DAE, traduit dans une langue
cible L, pourrait aussi étre transformé, sans interaction humaine, en un DAE en langue L si un
analyseur et un désambiguiseur sont disponibles pour cette langue L. Ainsi, un DAE pourrait
étre utilisé dans un contexte monolingue, mais aussi dans un contexte multilingue sans travail
humain additionnel.

In the LIDIA project, we have demonstrated that, in many situations, Dialogue-Based MT
(DBMT) for monolingual author is likely to offer better solutions to multitarget translation
needs than machine aids to translators or batch MT, even if controlled languages are used.
First experiments have shown the need to keep a memory of the “author’s intention” by
means of “disambiguating annotations” transforming the source document into a “self-
explaining document” (SED). We present ways to integrate these annotations into an XML
document (SED-XML), and to make them visible and usable by readers for better
understanding of the “true content” of a document. The very concept of SED might deeply
change our way of understanding important or difficult written material. We also show that a
SED, once translated into a target language L, might be transformed into an SED in L with no
human interaction, if an analyzer and a disambiguator are available for L. Hence, the SED
structure might be used in multilingual as well as in monolingual contexts, without addition of
human work.

Mots Clés - Keywords

Document Auto-Explicatifs (DAE), désambigu'1'sation interactive, documents actifs
Self-Explaining Document (SED), interactive disambiguation, active documents

Herve’ Blanchon, Christian Boitet

Introduction

Dans beaucoup de situations, des notes de travail, des resumes scientifiques, des
documentations techniques, etc., devraient etre traduits dans plusieurs langues. Ils ne le sont
pas pour trois raisons : (1) ils sont prets a la derniere minute et les traducteur disponibles
n’ont pas le temps de faire le travail, (2) il n’y a pas de traducteur pour faire le travail, (3) et
bien sﬁr, dans tous les cas, aucune solution automatisee n’est satisfaisante.

La Traduction Automatique interactive Fondee sur le Dialogue (TAFD), telle que nous
l‘avons prototypee dans le cadre du projet LIDIA [Boitet C. and Blanchon H., 1995],
constitue une meilleure piste pour resoudre ce probleme que les aides au traducteur et les
systemes de TA de type << boite noire », meme si des langages contr6les sont utilises pour la
redaction.

La TAFD offre aussi la possibilite de produire toutes les versions d’un document, soit le
document source et tous les documents cibles, sous forme de Document Auto-explicatif
(DAE) [Boitet C., 1994]. Un DAE contient le texte du document ainsi que sa representation
linguistique, profonde ou multiniveau, desambigu'1'see et augmentee d’une memoire des
ambigu'1'tes qu’il contient et d’une trace du processus de desambigu'1'sation.

Avec le concept de DAE, nous proposons une nouvelle maniere, totalement novatrice et
potentiellement tres utile, d’acceder au contenu d'un document et de l’utiliser. Un lecteur de
DAE pourrait << cliquer » sur un segment textuel marque comme ambigu et obtenir une
presentation des differentes interpretations possibles avec un marquage de celle qui doit etre
retenue. Ainsi, un DAE redige dans un langage non contr6le serait moins ambigu qu’un texte
redige dans un langage contr6le, qui n'est certes pas ambigu pour la machine, mais le reste
tres souvent pour un humain. Nous proposons aussi une methode perrnettant de traduire un
DAE source en un DAE cible, sans effort humain supplementaire, sans traitement contrastif
(et tres difficile) des ambigu'1'tes, et avec capture de toutes les ambigu'1'tes en cible, rendant
ainsi l’intention exacte de l’auteur accessible dans d’autres langues.

Dans cet article, nous presentons d’abord le projet LIDIA, notre premier prototype (LIDIA-1),
ainsi que le concept de DAE. La section 2 est consacree a la presentation de l’implementation
LIDIA-2. Dans la section 3 nous presentons notre premier visualiseur de DAE et proposons
des ameliorations a court terrne. Nous proposons enfin, dans la section 4, des pistes de
recherches pour le futur.

1 LIDIA-1: le berceau du concept de DAE

L’idee des Documents Auto-Explicatifs (DAE) est issue de nos travaux sur la Traduction
Automatique Fondee sur le Dialogue (TAFD).

1.1 Le projet LIDIA

Les efforts passes visant a ameliorer la qualite des traductions produites par des systemes de
TA ont montre que la TA de haute qualite est possible, mais seulement pour des typologies de
textes (domaine, style) tres contraintes. On peut citer, par exemple, les bulletins
meteorologiques (METEO, TAUM, anglais—> francais), les breves boursieres du Nikkei
(ALT/Flash, NTT, japonais->anglais), ou les documents techniques (BV/aero/FE pour les
manuels de maintenance d’avions, Systran pour des documents XEROX en anglais contr6le).

La TAFD de haute qualite est un nouveau paradigme pour des situations traductionnelles pour
lesquelles les approches — fondees sur la langue, fondees sur la connaissance — ne sont pas
appropriees [Boitet C. and Blanchon H., 1995]. En TAFD, bien que les sources de

Deux premiéres étapes vers les documents auto-explicatifs

connaissances linguistiques soient encore cruciales, et que des connaissances extra-
linguistiques puissent etre utilisees si elles sont disponibles, l’accent est mis sur la pre-edition
indirecte au moyen d’un dialogue de desarnbigu'1'sation avec l’auteur permettant d’obtenir des
traductions de haute qualite sans revision.

La premiere situation que nous avons consideree est la production de documents techniques
multilingues sous la forme de documents HyperCard. HyperCard est un environnement de
production de documents hypertextes dont les << pages » sont appelees cartes. Les cartes
contiennent differents types d’objets, dont des champs textuels. Du point de vue linguistique,
nous utilisons une approche fondee sur un transfert multiniveau avec des acceptions,
proprietes, et relations interlingues. Notre premiere maquette, LIDIA-1, demontre l’idee avec
un document HyperCard qui presente, en contexte, des phrases ambigues en francais. Ce
document peut etre traduit vers l’anglais, l’allemand et le russe. Bien que cette maquette soit
reduite du point de vue de sa couverture linguistique, elle montre le potentiel de l’approche.

1.2 Quelques éléments sur l’interface de LIDIA-1

L’utilisateur peut activer les traitements LIDIA les plus frequents grace a une palette d’outils.
La premiere ligne d’outils (Figure 1), consideree de gauche a droite, permet de traduire l’objet
selectionne, voir la progression des traitements, voir les annotations et voir la retrotraduction
en francais. La seconde ligne permet de se deplacer parrni les cartes du document.

Apres l’analyse, un bouton (? !! - Figure 2) apparait au dessus de l’objet a traduire si son
contenu est arnbigu et necessite une desambigu'1'sation interactive.

Le capitaine a rapporte un vase de Chine.

= E Figure 2 : Questions de desarnbiguisation en
 Son navire est {res défraichi.  suspens pour un objet

 

 

 Le capitaine a rapporte un vase de Chine.

Figure 1 : selection d’un objet textuel £1 traduire

Lorsqu’il decide de resoudre les ambigu'1'tes concernant un objet particulier, l’utilisateur
clique sur ce bouton et les questions sont proposees comme ci-dessous. Dans le contexte de la
phrase, l’auteur doit choisir d’attacher << de Chine » a « vase » (un vase chinois, Figure 3). Un
second dialogue apparait alors pour le sens du mot << capitaine » (Figure 4).

amIJigu'I'té
amIJigu'I'té   I1 u a nlusieurs sens acceptables pour le mot:
, _ capitaine
I] u a plusieursinterpretatwns pour la phrase: _ _
Le capitaine a rapporte un vase de chine. C“°‘3‘3392 ‘9 '30“-

O Officier qui commande une compagnie d'infanterie, un
escadron de cavalerie, une batterie d'arti||erie
® Officier qui commande un navire de commerce

Chnisissez la hnnne
C) de Chine, Ie capitaine a rapporte un vase.

@) Le ca itaine a ra orte (un vase de chine).
p pp 0 Chef d'une équipe sportive

Figure 3 : Desarnbiguisation strucurelle Figure 4 : Desarnbiguisation du sens du mot
<< capitaine >>

La Figure 5 montre la traduction de la phrase << le capitaine a rapporte un vase de Chine »
dans deux contextes differents. Cela permet d’illuster l’interet de la desambigu'1'sation
interactive.

Herve’ Blanchon, Christian Boitet

—|Erste Beschichte |— —|Zu.Ieite Beschichte |—
DerHauptmann hat Der Kapihin hat ejne
eine Vase aus China chjnesaische Vase
mitgebracht Die Vase mitgebracht Sein Boot
ist eng1isch_ ist sehr verblasst

Figure 5 : Traduction d’une meme phrase dans deux contextes differentes

1.3 Etapes de production d’un DAE

Nous avons propose et motive le concept de DAE dans [Boitet C., 1994]. Nous donnons ici
un bref apercu (Figure 6) des etapes de traitement mises en oeuvre et des structures de
donnees produites dans le cadre l’architecture linguicielle LIDIA. Nous montrons aussi
comment la production de DAE en langues source et cible peut s’y integrer.

Chaque phrase du texte en langue source est d’abord analysee pour produire une structure
mmc-source (multisolution, multiniveaul, concretez). Cette structure znmc est alors utilisee
pour construire un arbre des questions qui seront posees a l’auteur. A l’issue de l’etape de
desambigu'1'sation interactive, le systeme obtient la structure umc-source (unisolution,
multiniveau, concrete) non ambigue choisie par l’auteur. Cette structure umc est ensuite
transforrnee en une structure abstraite uma-source (unisolution, multiniveau, abstraitez).

Un composant de transfert lexical et structural produit ensuite une structure gma-cible
(generatrice, multiniveau, abstraite). Une structure gma est plus generale et generatrice qu’une
structure uma car les niveaux de surface (fonctions syntaxiques, categories syntagmatiques,
...) peuvent ne pas étre renseignes. S'ils le sont, ils ne servent que de guide3 a la premiere
etape de la generation, qui "choisit la paraphrase a generer" et produit une structure uma-cible
qui est homogene a la structure qui serait produite en analysant et en desambigu'1'sant
interactivement le texte cible qui Va etre genere. Le processus de traduction se termine avec
les generations syntaxique et morphologique.

Au cours de la traduction, ou apres l’analyse suivie de desambigu'1'sation interactive
uniquement, les informations nécessaires a la construction d’un DAE sont conservees. En
effet, la production d’un DAE ne necessite pas l’execution de chacune des etapes du
processus de traduction. Pour produire un DAE, il suffit d’une etape d’analyse multiple suivie
d’une etape de desambigu'1'sation interactive.

La production d’un DAE en langue cible est detaillee dans la section 4.3.

1 La structure contient trois niveaux d’interpretation linguistique: le niveau des classes syntaxiques et

syntagmatiques, le niveau des fonctions syntaxiques, et le niveau des relations logiques et semantiques.

Une representation d’un texte est dite « concrete » si l’on retrouve directement le texte represente par un
parcours simple de la structure (mot des feuilles pour un structure syntagmatique, parcours infixe pour une
structure de dependances). Sinon, la structure est dite « abstraite ».

On utilise un attribut "tactique" ensembliste LOCK a valeurs dans les noms des attributs non interljngues

pour dire si tel ou tel attribut comme la classe ou la fonction syntaxique a ete calcule par le transfert a titre
d'ordre ou de preference).

Deux premiéres étapes vers les documents auto-explicatifs

 
 
   
  

rétro-traduction

     
 

sélection de sélection de
paraphrase paraphrase

\ -j - ?" j ‘ %
\ .\ \ \‘ \\ (‘ analyse ‘
‘~ \ \ \ . étape 1 _)

"  \  ."—'r'—

 _ . _°.4__ __ -
: biguités & I ' mbigultés 8: | I
: réponses E I réponses - '
"'""f'""" ' _ ' -0" _ ' _

généralion
étape 2

génération
étape 2

     
     

  

Flétro-traduction texte en langue : DAE enlangue : |—D'AFe'nTan§E ‘I
depuis Ian sourc :~__ _§9y_n§¢ ____ _.' __ _ ii?/L . _ .

Figure 6 : Organisation lingucielle en TAFD et production de DAE

2 LIDIA-2 : production d’un DAE

Avec LIDIA-2, nous avons change l’architecture logicielle au niveau de l’acces distribué aux
traitements ainsi que le format des données. En particulier, tous les composants utiles a la
traduction interactive sont maintenant accédés avec le méme protocole (telnet) alors que dans
LIDIA-1 nous utilisions le courrier électronique (SMTP) et les AppleEvents pour accéder au
linguiciel et au désambiguiseur. Un document LIDIA-2 contient l’historique de la
désambiguisation interactive. Il est ensuite filtré pour produire un DAE. Ces deux fichier sont
représentés en XML. L’environnement LIDIA-2 est implémenté en JAVA.

texte cible en
Ian - ue

Dans la premiere version de LIDIA-2, nous avons utilisé un désambiguiseur de l’anglais
[Blanchon H., 1995] fondé sur une étude de corpus [Fais L. and Blanchon H., 1996]. Ce
module était, en effet, directement intégrable a la nouvelle architecture d’intégration des
composants que nous avons proposée.

2.1 Exemple de session

L’utilisateur (l’auteur) personnalise d’abord son environnement. Il peut alors créer un
nouveau document ou ouvrir un document existant. La fenétre du document (Figure 7) est
divisée en deux sections : la partie supérieure est la fenétre d’édition, la partie inférieure
affiche des informations relatives a l’état des traitements effectués sur le document.

Apres que l’utilisateur ai demandé l’analyse du document, les phrases ambigués sont colorées
en brun et les phrases non ambigués sont colorées en vert. Dans la Figure 7, le texte contient
sept phrases ambigués et une phrase qui ne l’est pas (la premiere).

Lorsque l’utilisateur fait un clic double sur une phrase ambigué, les questions de
désambiguisation correspondant sont affichées. L’ordre d’affichage assure un parcours depuis
la racine jusqu’a une feuille dans l’arbre des questions associé a la phrase considérée. Pour la
phrase “let me pull up my maps to help you”, il n’y a qu’une question pour deux
interpretations. Lorsqu’elle est désambiguisée, la phrase est colorée en vert.

Herve’ Blanchon, Christian Boitet

E Document '5
Work document

 

Disambiguation: Let me pull up..

Good morning conference center. Status

 

Question 1 (Max remaining : I1)

Ambiguous phrase

Reformulations

This sentence has more than one possible interpretation :

O let me pull up (my maps to help you).

caption and statistics {E3 to help you, let me pull up rny maps.

translation accuracy: 12.0 ‘it
ﬁe:-rt > §uspencl

unparsahle SEMBHCB I I]
Figure 8 : Une question de désambiguisation

Please pick the correct one.

clear sentences : 1
not analyzed sentence : I]

Figure 7 : Fenetre de document (apres analyse)
2.2 Support a la manipulation du document

Un document LIDIA-2 (cf. Annexe) est un document XML. Nous avons choisi l’API DOM
pour gérer et manipuler le document LIDIA-2 en cours d’utilisation et l’API SAX pour
vérifier la bonne syntaxe des documents lors de leur ouverture. Ce document contient une
entéte (<description>) et un contenu (<support>) — le texte — sous forme de paragraphes
(<paragraphe>) et de phrases (<phrase>), saisies par l’utilisateur et enrichies par les
informations collectées lors des différentes étapes de traitement.

L’entéte comporte le titre du document, la langue source et le nom de l’auteur. Pour chaque
phrase du texte, le <support> comprend la langue source, le texte de la phrase, l’arbre des
questions, ainsi que la ou les traductions obtenues dans les langues cibles choisies. L’arbre
des questions est une representation, 61 la lisp, de celui qui est produit par le module de
désambiguisation. Cet arbre est enrichi d’une trace du chemin suivi par l’utilisateur lors de la
désambiguisation effective.

2.3 Filtrage vers un DAE

Pour produire le DAE associé au document LIDIA-2 en cours, celui-ci est filtré. On conserve
dans le DAE l’entéte du document LIDIA-2, et 1' organisation en paragraphes et phrases du
<support>. Pour chaque phrase, on retient le texte d’origine et la trace du parcours de l’auteur
dans l’arbre des questions. (cf. Annexe).

3 Visualisation d’un DAE (étape 2)

Nous concevons une DAE comme un document autonome et << portable » qui doit pouvoir
étre diffuse. Il faut donc proposer un environnement de visualisation autonome.

3.1 Objectif et contraintes

Un Visualiseur de DAE doit permettre a un lecteur de lire le contenu du document et
d’appréhender le << sens exact » de que ce l’auteur a voulu dire. Le Visualiseur doit donc
pouvoir signaler au lecteur les segments ambigus, et, a la demande, en révéler le << sens »
choisi par l’auteur lors de la phase de désambiguisation interactive.

Deux premieres étapes vers les documents auto-explicatifs

Le premier visualiseur que nous présentons ici est assez simple et l’interaction avec le lecteur
assez pauvre. Il est écrit en JAVA pour étre portable et téléchargeable sur le web. L’API
DOM est utilisée pour gérer le document.

3.2 Interface du premier Visualiseur

Quand le lecteur ouvre un DAE avec le visualiseur, le contenu textuel du DAE est affiché
(Figure 9).

Dans cette implementation, les segments ambigus ne sont pas surlignes. Pour obtenir les
informations relatives aux différentes lectures possibles d’une phrase, l’utilisateur doit faire
un double clic sur son texte. Une boite de dialogue apparait alors. Elle perrnet au lecteur de
naviguer dans l’arbre des questions en voyant les rephrasages sélectionnés par l’auteur (=> 
<=) lors de la désambigu'1'sation, comme le montre la Figure 10.

E%\|"isuaIiseuI de DAE TDkyDTrip_daB
File ?

n"Izl"|2|

 

Good morning conference center. I want the
symposium on interpreting telecommunication at the
international conference center. It says that here on my

 

TokynTrip.dae 

 

Good morning conference center. I want the
ﬂyer. Let me pull up my maps to help you. I will show

you where you are located right now. Where can i

symposium on interpreting telecommunication at the
international conference center. It says that here on my
ﬂyer. Let me pull up my maps to help you. I will show

 Hefulmulations...

   

you where you are located right now. Where can i
catch a taxi from Kyoto station. Go across the street to
the north of the train station. You can tell him that you
are goi.ng to the international conference center and it
should be a twenty minutes ride.

a @ => to help you, let me pull up rm,-' maps. <=
5 *3 let me pull up {rny maps to help you}.

Next... Cancel

   

-i-i-|:3|

Figura 9 5 EnViT°nnement 513 lecture “run DAE Figure 10 : Afﬁchage des rephrasages sélectionnés
lors de la désarnbiguisation

3.3 Améliorations in court terme

Afin d’améliorer l’irnplémentation de LIDIA-2, nous avons plusieurs objectifs a court terme.
Les perspectives a long terme sont détaillées dans la section 4.

3.3.1 Inte’grer les linguiciels LIDIA-1 dans la nouvelle architecture

Notre premier objectif a court terme est d’intégrer dans l’architecture LIDIA-2 les modules
d’analyse, de désambigu'1'sation interactive, de transfert et de generation développés pour la
maquette LIDIA-l [Boitet C. and Blanchon H., 1995]. Cela nous permettrait d’avoir une
plateforrne d’expérimentation plus riche. Nous verrons dans la section 4.1 qu’aller plus loin
dans la localisation des ambigu'1'tés implique des changements importants pour le module de
désambigu'1'sation interactive lui-meme.

3.3.2 Permettre des changements de re’p0nse aux questions de de’sambigui'sati0n

Dans certains cas, il peut étre intéressant de refaire la désambigu'1'sation interactive, soit pour
corriger un résultat de traduction (la désambigu'1'sation interactive aurait dans ce cas été mal
faite), soit pour produire une nouvelle traduction pour montrer l’intérét de la
désambigu'1'sation.

Toutes les informations nécessaires sont déja disponibles dans un document LIDIA-2. Ainsi
une nouvelle désambigu'1'sation peut étre effectuée de maniere autonome (hors ligne). Si le

Herve’ Blanchon, Christian Boitet

nouveau parcours de desambigu'1'sation est le meme que le precedent, les bonnes traductions
Vers les differentes langues cibles auront deja ete calculees. Si le parcours est different, de
nouvelles traductions devront etre produites (en ligne).

3.3.3 Créer automatiquement des corpus multilingues auto-explicatifs alignés

Nous avons dit que LIDIA-2 peut accepter des demandes de traduction Vers plusieurs langues
cibles. Les traductions sont conservees dans le document LIDIA-2.

I1 pourrait donc etre interessant d’exporter un document multilingue deja aligne au niveau de
sa structure. On pourrait meme envisager de conserver dans le document LIDIA-2 toutes les
structures intermediaires produites lors du processus de traduction afin de calculer
automatiquement differents alignements pour chaque phrase (au niveau des mots, des
segments, des syntagmes).

Cela pourrait etre utile, par exemple, en apprentissage des langues, et aussi pour l’etude
contrastive des ambigu'1'tes. On sait, egalement, que les besoins de corpus alignes croissent
avec le developpement de moteurs statistiques pour le traitement de la langue naturelle,
notamment en traduction.

4 Perspectives 51 plus long terme

Nos objectifs a long terme ont un impact sur les modules qui participent a la chaine de
traduction (analyse, transfert, generation), et sur le module de desambigu'1'sation interactive.

4.1 Prendre en compte du support de l’ambigu'1'té

Afin d’ameliorer l’utilisabilite d’un DAE, l’aspect le plus important nous semble la
localisation precise des arnbigu'1'tes. Pour etre capable de faire cela, le moteur de preparation
de l’arbre des questions doit etre capable de localiser precisement le support [Boitet C. and
Tomokio M., 1995] de chaque ambigu'1'te. Cet objectif peut etre atteint soit en calculant le
support de l’ambigu'1'te, a posteriori, a partir des descripteurs d’ambigu'1'tes actuels, soit en
modifiant les descripteurs d’ambigu'1'tes afin qu’ils soient definis directement sur les supports
de l’ambigu'1'te. Cette demiere solution, qui a notre preference, implique plus de modifications
du module de desambigu'1'sation que la premiere.

4.2 Autoriser une désambiguisation interactive incomplete

Dans le contexte de Vraies applications, l’analyseur rencontrera un grand nombre
d’ambigu'1'tes. Pour chaque phase, il est donc possible que l’arbre des questions ait une telle
profondeur que l’auteur n’accepte de repondre qu’aux questions cruciales. En d’autres termes,
etant donnee une structure mmc, quelques reponses a des questions de desambigu'1'sation et,
eventuellement, des preferences utilisateur, le systeme doit etre capable de faire des choix et
de produire ou bien une traduction unique, ou bien une representation factorisee explicitant
les differentes traductions possibles, en langue cible. Afin d’implementer une telle strategie, il
est necessaire que les modules utilises puissent mettre en oeuvre des techniques heuristiques
de desambigu'1'sation automatique et/ou soient capables de manipuler des structures ambigues.

4.3 Créer des DAEs en langues cibles

Comme l’etape de generation produit une structure intermediaire equivalente a une structure
d’analyse desambigu'1'see (umc), il suffit pour creer un DAE en langue cible de faire une
analyse multiple (mmc) des phrases effectivement generees, puis de construire un arbre des
questions concemant ces phrases. Sachant que l’on connait la structure umc a retenir, on peut
ensuite calculer automatiquement les reponses aux questions de desarnbigu'1'sation. On dispose

Deux premieres e’tapes vers les documents auto-explicatifs

alors des informations necessaires pour produire un DAE en langue cible, et ce sans aucune
intervention humaine : le systeme aura ainsi effectue << la desambigu'1'sation que l'auteur aurait
pu faire lui-meme en langue cible » (en supposant qu'il la connaisse et ait la patience de la
faire une seconde fois)

Atteindre cet objectif suppose qu'on dispose d’un analyseur adequat (a sorties multiples) dans
chacune des langues visees. C'est le cas de quelques enconvertisseurs vers UNL, ainsi que de
certains analyseurs de systemes de TA operationnels (ALT/JE de NTT, PT de Linguatec,
notamment). Nous esperons pouvoir bientot experimenter cette idee grace a des cooperations
avec certains d'entre eux.

Conclusion

Nous avons montre une premiere implementation du concept de document auto-explicatif.
Cette idee se situe dans le champ de recherche sur les documents actifs [Quint V. and Vatton
I., 1994]. Nous travaillons sur un environnement LIDIA integre a un editeur de documents
XML 61 la Thot (http://opera.inrialpes.fr/'Thot.en.html).

Notre structure de document XML est assez simple, et toute l’inforrnation qu’il contient n’est
pas au format XML. Par exemple, la structure mmc et l’arbre des questions sont representes
dans un formalisme a la lisp, ce qui necessite des modules de gestion specifiques, alors qu’un
traitement avec l’API DOM serait plus efficace et robuste.

Cependant, ces deux premieres etapes (le nouvel environnement LIDIA-2 et le visualiseur de
DAE) representent des resultats originaux, et les perspectives de ce travail sont variees. Nous
esperons pourvoir exposer des resultats plus pratiques dans le futur.

Remerciements

Ghislain Gressard a developpe la premiere implementation de l’interface java de LIDIA.
Eugenie Schonek a realise le premier Visualiseur de DAE.

References

Notre proposition de construire des document auto-explicatifs semble tout-a-fait original, qu'i1 s'agisse du
concept ou de realisation comme celle montree ici. En effet, nous n'avons rien trouve a ce sujet dans la
litterature. Cela explique que la bibliographie qui suit contienne tres peu de references externes.

Blanchon H. (1995). An Interactive Disambiguation Module for English Natural Language
Utterances. Proc. NLPRS'95. Seoul, Korea, Dec 4-7, 1995. vol. 2/2: pp. 550-555.

Boitet C. (1994). Dialogue-Based MT and self explaining documents as an alternative to
MAHT and MT of controled language. Proc. Machine Translation Ten Years On. Cranfield,
England, Oct. 12-14, 1994: 7p.

Boitet C. & Blanchon H. (1995). Multilingual Dialogue-Based MT for monolingual authors:
the LIDIA project and a first mockup. in Machine Translation. vol. 9(2): pp. 99-132.

Boitet C. & Tomokio M. (1995). Ambiguities & ambiguity labelling: towards ambiguity
databases. Proc. RANLP'95 (Recent Advances in NLP). Tzigov Chark, Bulgaria, 14-16
September, 1995. vol. 1/1: pp. 13-26.

Fais L. & Blanchon H. (1996). Ambiguities in Task-oriented Dialogues. Proc. MIDDIM'96.
Le col de porte, Isere, France, 12-14 Aoﬁt 1996. vol. 1/ 1: pp. 263-275.

Quint V. & Vatton I. (1994). Making structured documents active. vol. 7(2): pp. 55-74.

Herve’ Blanchon, Christian Boitet

Annexe : documents XML produits

Nous donnons simultanément les fichiers .1di et .dae correspondant 51 1'exemp1e donné dans
1'artic1e. La structure complete des fichiers .1di et .dae est donnée, mais nous avons supprirné
1'ana1yse (liste d'arbres), trop Volumineuse. Le contenu propre au fichier .1di est en italiques. I1
s'agit de la source, du timbre £1 date, de 1'ana1yse et de la traduction.

<?xml version="1.0" ?>
<work>
<description>
<title><![CDATA[A trip to Tokyo]]></title>
<language><![CDATA[ENG]]></language>
<auteur> <firstname><![CDATA[herve]]></firstname>
<lastname><![CDATA[blanchon]]></lastname> </auteur>
</description>
<support>
<paragraphe>
<phrase source="ENG" stamp="11054803544635">
<original><![CDATA[Good morning conference center.]]></original>
<analyse><![CDATA[m]]></analyse>
<traduction cible="FRA"><![CDATA[Bonjour ici le centre de conférences international.]]>
</traduction>
</phrase>
<phrase source="ENG" stamp="21054803544655">
<original><![CDATA[ I want the symposium on interpreting telecommunication at the
international conference center.]]></original>
<question>
<reformulation choix="NON"><![CDATA[the symposium (on interpreting telecommunications at
the international conference center)]]>
<question>
<reformulation><![CDATA[the (international center) for conference]]>
<analyse><![CDATA[m]]></analyse>
</reformulation>
<reformulation><![CDATA[the center for (international conference)]]>
<analyse><![CDATA[m]]></analyse>
</reformulation>
</question>
</reformulation>
<reformulation choix="OUI"><![CDATA[at the international conference center, the symposium
on interpreting telecommunications]]>
<question>
<reformulation choix="OUI"><![CDATA[the (international center) for conference]]>
<analyse><![CDATA[m]]></analyse>
</reformulation>
<reformulation choix="NON"><![CDATA[the center for (international conference)]]>
<analyse><![CDATA[m]]></analyse>
</reformulation>
</question>
</reformulation>
</question>
<traduction cible="FRA"><![CDATA[Je veux le symposium sur la communication interprétée qui
se déroule au centre de conférences international.]]></traduction>
</phrase>

<phrase source="ENG" stamp="51054803544695">
<original><![CDATA[ I will show you where you are located right now.]]></original>
<question>
<reformulation choix="NON"><![CDATA[I will show you (where you are located right now).]]>
<analyse><![CDATA[m]]></analyse>
</reformulation>
<reformulation choix="OUI"><![CDATA[right now, I will show you where you are located.]]>
<analyse><![CDATA[m]]></analyse>
</reformulation>
</question>
<traduction cible="FRA"><![CDATA[Je vais tout de suite vous montrer ou vous
étes.]]></traduction>
</phrase>

<7paragraphe>
</support>
</work>

