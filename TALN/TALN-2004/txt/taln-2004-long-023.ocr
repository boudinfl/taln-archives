TALN 2004, Fés, 19-21 avril 2004

Grammaires d'uniﬁcation polarisées

Sylvain Kahane

Lattice, Universite Paris 7
Modyco, Universite Paris 10
sk@ccr.jussieu.fr

Résumé — Abstract

Cet article propose un formalisme mathematique generique pour la combinaison de structures.
Le controle de la saturation des structures finales est realise par une polarisation des objets des
structures elementaires. Ce formalisme perrnet de mettre en evidence et de forrnaliser les
mecanismes proceduraux masques de nombreux formalismes, dont les grammaires de reecriture,
les grammaires de dependance, TAG, HPSG et LFG.

This paper proposes a generic mathematical formalism for the combination of structures. The
control of saturation of the final structures is realized by a polarization of the objects of the
elementary structures. This formalism allows us to bring to the fore and to formalize the hidden
procedural mechanisms of numerous formalisms, including rewriting systems, dependency
grammars, TAG, HPSG and LFG.

Mots Clés —Keywords

Grammaire formelle, unification, polarisation, grammaire de reecriture, grammaire de
dependance, TAG, HPSG, LFG, graphe, arbre, dag.

Formal grammar, unification, polarization, rewriting system, dependency grammar, TAG, HPSG,
LFG, graph, tree, dag.

1 Introduction

Notre objectif est de donner un cadre general a la plupart des formalismes a base de regles
utilisees en linguistique. Les productions langagieres sont fortement structurees et par ailleurs la
langue est compositionnelle, c'est—a—dire que la structurel d'unites langagieres complexes peut

1 La question de savoir si une production langagiere, par exemple une phrase, a une ou des structures est une

question qui depend du point de vue. D'une part, il est clair qu'on peut associer a une phrase differentes
structures selon que l'on considere le point de vue semantique, syntaxique, morphologique ou phonologique.
D'autre part, les differentes structures d'une phrase ne sont pas independantes les unes des autres et meme si oe
ne sont pas des structures sur les memes objets (par exemple les nmuds de la structure semantique ne
correspondent pas un a un aux nmuds de la structure syntaxique, qui eux correspondent aux mots), il existe des
liens entre les differents objets de ces structures. En d'autres termes, en considerant de fagon dissociee les
differentes structures simples de la phrase, on ne rend pas compte de la structure complete de la phrase,
puisqu'on perd les interrelations entre les structures simples.

Sylvain Kahane

etre obtenue par composition de structures elementaires associees aux unites elementaires. Le
plus simple des modes de composition de deux structures A et B est l'unification, a savoir la
construction d'une structure C en superposant partiellement A et B, c'est—a—dire en identifiant une
partie des objets de A avec ceux de B. Cette idee rejoint une idee ancienne, deja presente chez
Jespersen 1924, Tesniere 1934 ou Ajduckiewicz 1935, que la phrase serait comme une molecule
dont les mots seraient les atomes, chaque mot etant dote d'une certaine Valence (terrne
explicitement emprunte par la linguistique a la chimie) qui l'oblige ou lui permet de s'assembler a
un certain nombre d'autres mots. Neanmoins, les grammaires d'unification (ou l'unification est
prise au sens strict du terrne) sont incapables de rendre compte du fait que la structure de
certaines unites linguistiques est insaturee et que celles—ci doivent obligatoirement se combiner
avec d'autres unites pour former une unite stable. Par exemple, la forme Verbale voulait ne peut
former a elle seule une phrase et appelle un sujet et un complement. La plupart des formalismes
a base de regles ne traitent pas directement dans le formalisme des regles la question de la
saturation des structures generees. Par exemple, dans une grammaire de reecriture, ce ne sont pas
les regles de la grammaire qui assurent qu'une suite generee par la grammaire soit uniquement
composee de symboles terminaux, mais une condition separee, Verifiee independamment et
compliquant par consequent la procedure de derivation. En HPSG, la saturation est assuree par
des conditions obligeant certains traits a avoir pour Valeur une liste Vide. L'utilisation de polarites
permet d'incorporer le traitement de la saturation dans le formalisme des regles. Le processus de
saturation Va ainsi guider la composition des structures tout au long du processus de generation.

Dans cet article, nous presentons une nouvelle famille de formalismes, les grammaires
d'umﬁcati0n polarisées (GUP). Les GUP prolongent les grammaires d'unification en proposant
un controle tres explicite de la saturation des structures par l'attribution a chaque objet d'une
p0larite'. Certaines polarites sont neutres, d'autres non, mais une structure finale doit
obligatoirement etre completement neutre. Deux obj ets non neutres peuvent s'unifier (c'est—a—dire
en fait s'identifier) en formant un objet neutre, c'est—a—dire en se neutralisant. L'unification
proprement dite ne permet rien d'equiValent. Le formalisme de Nasr (1995) est l'un des premiers
a utiliser explicitement une polarisation des structures et Duchier & Thater 1999 est la premiere
etude a ma connaissance a mettre en avant la question de la polarite (et a introduire les termes
p0larite' et neutralisation), tandis que Perrier 2002 est le premier a proposer un formalisme, les
grammaires d'interaction, entierement base sur ces idees.

Dans la Partie 2, nous presenterons le cadre general des GUP et notamment le systeme des
polarites. La Partie 3 proposera plusieurs exemples de GUP et tout particulierement la traduction
en GUP de formalismes classiques comme les grammaires de reecriture, TAG, HPSG ou LFG.

2 Uniﬁcation et polarités

2.1 Grammaires d'unification polarisées

Les grammaires d'unification polarisees sont des grammaires permettant de generer des
ensembles de structures finies. Tous les types de structures sont a priori envisageables, mais
dans cet article nous ne considererons que des graphes orientes et notamment les cas particuliers
des dagsz et des arbres. Nous considererons egalement des structures complexes obtenues en
combinant plusieurs structures sur les memes objets.

Une structure repose sur des objets. Par exemple, pour un graphe (oriente), les objets sont les
meuds et les arcs. Ces deux types d'objets sont lies entre eux, ce qui foumit la structure
proprement dite : si X est l'ensemble des noeuds et U l'ensemble des arcs, le graphe est defini par
deux fonctions 1:1 et 1:2 de U dans X qui associent respectivement a un arc sa source et sa cible.

On appelle dag un graphe oriente acyclique (angl. directed acyclic graph).

Grammaires d'uniﬁcati0n polarisées

Une structure polarisée est une structure dont les objets sont polarises, c'est—a—dire etiquetes par
une valeur appartenant a un ensemble fini P de polarites. L'ensemble P est muni d'une operation
notee ".", appelee produit. Le produit est commutatif et generalement associatif : (P,.) est appele
le systéme des polarités. Un sous—ensemble N de P contient les polarites dites neutres. Une

structure polarisee est dite neutre si tous les obj ets de cette structure sont neutres.

Les structures peuvent etre combinees par uniﬁcation. L'unification de deux structures A et B
donne une nouvelle structure AC-BB obtenue en « collant >> ensemble ces structures par
l'identification d'une partie des obj ets de la premiere structure avec ceux de la deuxieme. Lorsque
deux structures polarisees A et B sont unifiees, la polarite d'un objet de AC-BB obtenu par
identification de deux objets de A et B est le produit de leurs polarites.

Une grammaire d'uniﬁcati0n polarisée (GUP) est definie par une famille finie F de types
d'objets (avec des fonctions attachees aux differents types d'objets), un systeme (P,.) de polarites,
un sous—ensemble N de P de polarites neutres, et un ensemble fini de structures elementaires
polarisees, dont les objets sont decrits par F et dont une est marquee comme la structure initiale.
Les structures ge'ne're'es par la grammaire sont les structures neutres obtenues par combinaison
de la structure initiale et d'un nombre fini de structures elementaires. Les polarites sont
uniquement utilisees pour controler la saturation au cours du calcul et ne sont pas considerees
lorsqu'on evalue la capacite generative de la grammaire. Bien que donnees sous une forme
declarative, les polarites jouent en fait un role essentiellement procedural.

2.2 Le systéme des polarites

Nous allons presenter un systeme des polarites P qui sera ensuite utilise dans tous nos
exemples. L'element neutre (au sens mathematique du terme) de P est note et appele gris
(VxEP, .x=x). Le symbole est une polarite neutre (EN) et peut etre interprete comme un
contexte facultatif. Un contexte obligatoire est represente par la symbole O appele blanc. ll s'agit
d'une polarite non neutre (O$N) qui se comporte comme un element neutre sauf avec (Vx¢,
O.x=x). Le symbole J. represente l'e'chec et est par consequent l'element absorbant de P (VxEP,
J..x:J.). Evidemment, J. n'est pas neutre et par l'impossibilite de le neutraliser, l'apparition de J.
bloque tout espoir de produire une structure neutre. Le symbole O, appele noir, represente la
saturation : il s'agit d'une polarite neutre qui ne peut etre combinee avec aucune autre polarite
que les deux precedentes (Vx¢/O, O.x=J.). Les symboles + et — representent les polarites
positive et négative: ce sont des polarites non neutres qui, combinees entre elles, donnent la
saturation et qui ne peuvent etre combinees avec elles—memes ou avec la saturation (+.—=O,
+.+=J., +.O=J., —.—=J. et —.O=J.). Le symbole — peut etre vu comme un besoin et + comme la
ressource correspondante.

Le systeme {0,0,J.} est utilise par Nasr 1995, tandis que le systeme {,O,—,+,J.} est considere
par Bonfante et al. 20033, qui montrent les avantages des polarites negatives et positives dans le
prefiltrage des objets en analyse syntaxique (une famille de structures comportant des polarites
negatives et positives ne pourront se combiner en une structure neutre que si la somme des
polarites negatives de chaque type d'objet est egale a la somme des polarites positives).

Le systeme (P,.) que nous venons de presenter est commutatif et associatif. La commutativite est
essentielle pour que la combinaison de deux structures ne soit pas proceduralement orientee.
L'associativite permet de rendre la combinaison des objets egalement associative, c'est—a—dire que
si un objet B doit se combiner avec A et C, il n'y a pas d'ordre de precedence entre la
combinaison de A et B et celle de B et C : AC-B(B(-BC) = (AC-BB)C-BC.

3 Ceux—ci ulilisent les notations {:,<—>,<—,—>,J.}.

Sylvain Kahane

Bien d'autres polarités peuvent encore étre utiles. Par exemple, un besoin facultatzf, noté ?, aura
les memes propriétés que la polarité negative — (+.?=O, ?.?=J_ et ?.O=J_), mais sera neutre. Ou
encore, l'instanciati0n, au sens des structures de traits, notée ::, aura les memes propriétés que la
saturation, mais pourra se combiner avec elle—méme (::.::=::). Dans la suite, nous utiliserons un
systeme avec deux polarités neutres (, O) et quatre polarités non neutres (O, +, —, J_).

2.3 Monotonie

Tel que présenté jusqu'a maintenant, le formalisme des GUP est monotone aux polarités pres : le
résultat AC-BB de la combinaison de deux structures A et B par une GUP contient A et B comme
sous—structures. On peut ajouter un ordre (partiel) sur P pour rendre le formalisme
completement monotone4. Notons 5 cet ordre. Pour que le formalisme soit monotone, 5 doit
Verifier la propriété de monotonie suivante : Vx,yEP x.y 2 xvy, ou xvy est le maximum de x et y.
Ceci nous impose d'aVoir < O < +/—/? < O < J. et 0 < :: < J_. Une GUP construite sur un
systeme ordonné (P,.,s) Vérifiant la propriété de monotonie est monotone. Ceci induit de bonnes
propriétés computationnelles et permet par exemple de traduire l'analyse en GUP en un
probleme de résolution de contraintes (Duchier & Thater 1999).

3 Des exemples de GUP

3.1 Les grammaires d'arbres

Les premieres grammaires d'arbre rentrant dans le paradigme des GUP ont, a ma connaissance,
été proposées par Nasr 1995. La grammaire G1 suivante permet de générer tous les arbres finis
(un arbre est un graphe orienté connexe dont tous les noeuds sont la cible d'au plus un arc) : les
objets sont des nceuds et des arcs ; la structure initiale (placé dans le cadre de gauche) est réduite
a un noeud noir ; la grammaire possede une seule structure élémentaire qui est composée d'un arc
noir reliant un noeud blanc a un noeud noir. Chaque noeud blanc devra s'unifier avec un noeud
noir pour étre neutralise et un noeud noir pourra s'unifier avec un nombre quelconque de noeuds
blancs. On Vérifie aisément que les structures générées par la grammaire sont bien des arbres,
puisque tout noeud aura un et un seul gouvemeur a l'exception du noeud introduit par la structure
initiale qui sera la racine de l'arbre. Dans nos figures, la double barre sépare la structure initiale
des autres structures élémentaires.

O O O

/\

G1 G2 G3

La grammaire G1 ne permet pas de controler le nombre de fils de chaque noeud. Une grammaire
du type de G2 permet de controler la Valence de chaque noeud, mais elle n'assure pas que les
structures générées sont des arbres puisque deux noeuds blancs peuvent s'unifier et un noeud
peut donc avoir deux gouVerneurs5. La grammaire G3 résout le probleme en ne générant que des

Cette idée m'a été suggérée par Guy Perrier.

Nasr 1995 propose une grammaire de ce type pour générer des arbres. Ceci est assuré par une clause
procédurale qui oblige, lors de la combinaison de deux structures, la racine d'une des structures a se combiner
avec un nmud de l'autre.

Grammaires d'umﬁcati0n p0larise'es

arbres. En fait, on peut voir G3 comme la superposition de G1 et G2. En effet, si P0 = {0,0},
P1: {O,+,—,O} E POXPO, avec +=(0,0) et —=(0,0). La premiere polarité controle la structure
d'arbre comme dans G1, tandis que la deuxieme controle la valence comme dans G2.

Avec les memes principes, on peut construire une grammaire de dependance générant les arbres
de dépendance syntaxique d'un fragmet de langue. La grammaire G4, directement inspiree de
Nasr 1995, propose un fragment de grammaire pour 1'ang1ais perrnettant de générer 1'arbre
syntaxique de Peter eats red beans. Les noeuds de cette grammaire sont étiquetes par des
structures de traits qui devront s'unifier. Les traits et les valeurs des structures de traits sont
égalements des objets qui peuvent (et doivent dans une GUP) etre polarisés (cf. plus loin la
representation des structures de traits d'HPSG sous forme de dags). En attribuant des polarites
positives et negatives aux traits /cat/ p1ut6tqu'aux noeuds, on obtient une grammaire dans 1'esprit
de Perrier 2002.

cat: V cat: N
lex: eat

cat: N cat: N Subj   dobj mod
lex: Peter lex: beans

cat: N cat: N C313 Ad]
lex: red

cat: V

G4 (Grammaire de dépendance pour 1'ang1ais)

3.2 Grammaires de réécriture et arbres ordonnés

N'importe quelle grammaire de réécriture peut etre simulee par une GUP. Nous reprenons ici
des idées développées par Burroni 1993. Les GUP ont donc la capacite generative faible des
machines de Turing. Une suite abc est représentée par une chaine d'arcs étiquetés a, b etc :

a b C
O-—>O-—>O-—>O
La catégorie initiale S de la grammaire donne la structure initiale : O S Q
B
Une regle de récriture ABC —> DE donne A O O C
la structure élémentaire : O O
D Q E

Cette structure élémentaire est une << cellule >> dont le bord supérieur est une chaine d'arcs
positifs correspondant a la partie gauche de la regle, tandis que le bord inférieur est une chaine
d'arcs négatifs correspondant a la partie droite de la regle. Chaque arc positif doit s'unifier avec
un arc négatif et vice—versa pour donner un arc noir. Les noeuds sont g1is, c'est—a—dire qu'i1s sont
neutres et peuvent s'unifier entre eux.

Un symbole terminal a correspond a un arc positif : Q a 0

Les cellules vont venir s'unifier les unes aux autres pour donner une structure finale qui
représente la structure de derivation d'une suite, la suite e11e—méme étant le bord inférieur de cette
structure. Nous donnons ci—apres la structure de derivation de la suite Peter eats red beans avec
une grammaire syntagmatique classique, que le lecteur reconstituera de 1ui—méme. Dans une telle

representation, les arcs représentent des syntagmes et correspondent a des intervalles de
découpage de la suite et les nceuds aux bomes de ces intervalles.

Sylvain Kahane

 

Pour une grammaire de re'e'criture h0rs—c0ntexte, la grammaire génere en fait l'arbre de
derivation , que l'on peut représenter de maniere traditionnelle en ajoutant les branches de l'arbre.
Les noeuds de l'arbre de derivation seront les arcs des cellules et une regle du type A —> BCD

donnera la structure : A
o A/ o
B o C o D

Rappelons qu'un arbre de derivation pour une grammaire de réécriture hors—conteXte est un arbre
ordonné. Un arbre ordonné combine deux structures sur un meme ensemble de noeud : une
structure d'arbre proprement dite et une relation de précédence sur les nceuds de l'arbre. Ici la
relation de précédence est représentée de maniere explicite (un << noeud >> de l'arbre precede un
autre << noeud >> si la cible du premier est la source du deuxieme). ll n'est pas possible, avec une
GUP, de générer l'arbre de derivation, relation de précédence comprise, de facon plus simpleé.
Notons que la représentation usuelle des arbres ordonnés (ou la relation de précédence n'est pas
explicite, mais seulement déductible de la planéité de la representation) est fort trompeuse d'un
point de Vue computationnel. En calculant la relation de précédence, les analyseurs syntaxiques
(du type CKY par exemple) calculent en fait une structure de données comme celle que nous
présentons ici, dont les noeuds sont les débuts et les fins des syntagmes.

3.3 TAG (Grammaire d'adjonction d'arbres)

Les GUP doivent beaucoup aux grammaires TAG qui sont les premieres grammaires de
combinaisons de structures a avoir été étudiées en detail. On présente généralement les
grammaires TAG comme des grammaires de combinaison d'arbres (ordonnés). En fait, en tant
que grammaires d'arbres, les TAG ne sont pas monotones et ne peuvent donc étre simulées par
une GUP. Comme l'a montré Vijay—Shanker 1992, il faut pour obtenir un formalisme monotone
considérer TAG comme une grammaire de combinaison de quasi—arbres. Intuitivement, un
quasi—arbre est un arbre dont les noeuds sont scindés en deux et possedent donc une partie
supérieure et une partie inférieure, entre lesquelles peut Venir s'intercaler un autre quasi—arbre
(c'est la fameuse opération d'adjonction de TAG). Formellement, un quasi—arbre est un arbre
dont les branches sont de deux types : des relations de dépendance et des relations de dominance
(respectivement notés par un trait plein et un trait pointillé). Deux noeuds reliés par une relation
de dominance sont considérés comme étant potentiellement les deux parties d'un meme noeud ;

6 L'idée la plus naturelle serait d'encoder une régle de réécriture par un arbre de profondeur 1 et la relation ti:

précédence par des arcs allant d'un nmud a son successeur. La difficulté est ensuite de propager la relation
d'ordre aux descendants de deux fréres lorsqu'on leur applique une régle de réécriture par substitution d'un arbre
de profondeur 1. La solution la plus simple est incontestablement celle présentée ici, consistant a un
introduire des objets représentant les débuts et fins des syntagmes (nos nmuds gris) et d'indiquer les relations
entre un syntagme, son début et sa fin en représentant le syntagme par un arc allant de son début a sa fin.

Grammaires d'umﬁcati0n polarisées

seule la partie inférieure peut avoir plusieurs fils. La figure ci—dessous donne un arbre on (= a
substituer) et un arbre [3 (= a adjoindre) avec les structures de la GUP correspondante7.

A A
A A O

o/<0 A
B C B C A* c C
D B Q C A C

T r 1» ° :

D D

Un arbre on et sa traduction GUP Un arbre [3 et sa traduction GUP

Un noeud de substitution (comme DJ,) donne un noeud négatif, qui devra s'unifier avec la racine
d'un arbre oc. Un arbre [3 possede une racine et un noeud pied blancs qui devront s'unifier avec la
partie haute et la partie basse d'un noeud scindé. Pour cette raison, la racine et le noeud pied sont
relies par un lien de dominance positif qui devra s'unifier avec le lien de dominance negatif
reliant les deux parties du site d'adjonction. A la fin de la derivation, la structure doit etre un arbre
et tous les noeuds doivent etre reconstitués : pour cela nous introduisons la regle suivante, qui
présente un lien de dominance positif reliant un noeud a lui meme et qui en s'unifiant avec un lien
de dominance négatif assurera la saturation de celui—ci et forcera l'unification de ses deux
extrémités.
O

Cette demiere regle montre encore une fois l'aVantage d'une GUP : la reunification des noeuds
qui dans la presentation de Vijay—Shanker 1992 est donnee sous forme procédurale est ici
assuree par une regle declarative.

3.4 HPSG (Grammaire syntagmatique guidée par les tetes)

Il est bien connu que les structures de traits (ST) peuvent etre Vues comme des dags dont les arcs
representent les traits et les nceuds les Valeurs (cf., par exemple, Kesper et Monnich 2003). Les
grammaires HPSG s'écriVent donc simplement dans le forrnalisme des GUP. Il est important de
souligner au préalable une difference essentielle entre l'unification de ST et l'unification de
structures dans les GUP : on considere généralement qu'une ST possede au plus un trait de
chaque sorte et, par consequent, lors de l'unification de deux ST, les traits de meme sorte des
deux ST doivent etre identifies et leurs Valeurs unifiees. ll n'y a rien de tel pour les GUP : un
noeud d'un dag peut tres bien etre la source de plusieurs arcs de meme etiquette et seule la
nécessite de neutraliser deux objets peut inciter ales identifier (il y a aussi des identifications qui
résultent de contraintes structurelles : l'identification de deux arcs entraine l'identification de leurs
extrémites).

7 Par souci de simplicité, nous laissons de ceté dans notre presentation des grammaires TAG, l'encodage de la

relation de précédence sur les fils d'un meme nmud. Celle—ci devra etre encodée, comme nous l'avons fait pour
les grammaires de réécriture hors—contexte, en modélisant les semi—n(x:uds des arbres TAG par des arcs. Ceci ne
pose aucune difficulté particuliere, mais pourrait rendre les structures difficiles a comprendre.

Sylvain Kahane

Voyons donc comment traduire l'unification de ST en GUP. Considérons le schema de base de
HPSG, a savoir le schéma head—dau§ghter—phrase de combinaison d'un constituant téte avec un
sous—constituant fille sous—catégorisé :

HEAD:
SUBCAT:
HDTR: HEAD:
SUBCAT: () ea
NHDTR: HEAD:
SUBCAT : elist

Cette structure de traits donne le dag suivant, ou une liste est représentée récursivement en deux
morceaux : sa téte (valeur de H) et sa queue (valeur de Q). Nous placons a la droite de ce dag
l'entrée lexicale pour eat indiquant que eat est un V dont la SUB CAT contient deux constituants
de catégorie N (nous traitons le sujet comme un complément sous—catégorisé).

C
HD HD 1e eat

DTR *9 Q J cat‘OV

ﬁg  \S\ H HD cat N
/

s?‘LQ elisl Q ‘.elisl

Comme nous l'aVons dit, l'identification de deux arcs de meme étiquette et de meme source n'est
plus immédiate comme avec les ST. Elle est ici controlée par la polarisation : une partie du dag
est une ressource (noir/gras ou positif) et une partie est un besoin (blanc/fin ou négatif) qui
devra étre neutralisé. En plus d'assurer l'unification complete des ST, la polarisation permet
également de forcer l'instanciation des listes SUBCAT (et par conséquent de controler la
saturation de la Valence), ce qui n'est pas directement assure par le formalisme habituel des regles
en HPSG. Notons que le fragment de grammaire HPSG donné ici est equivalent a celui de G4 et
inutilement plus compliqué. Remarquons qu'a la différence des arbres, on n'a pas de GUP qui
génere tous les dags (on ne peut pas déceler des cycles de longueur potentiellement illimitée).
Néanmoins, on peut assurer qu'une GUP ne génere que des dags, notamment en obligeant
comme ici a respecter une structure d'arbre sous—jacente : cela signifie qu'un noeud ne pourra
avoir deux gouvemeurs dans une structure finale que si cela a été spécifié par une structure
élémentaire.

3.5 LFG (Grammaire lexicale fonctionnelle) et grammaires synchrones
Le formalisme de LFG permet de synchroniser une grammaire syntagmatique hors—conteXte

avec une grammaire de dépendance. La grammaire de dépendance ne génere pas des arbres, mais
des structures de traits réentrantes, appelées structures fonctionnelles, que nous représentons par

Les numéros dans les bo’1‘tes indiquent des valeurs partagées par plusieurs traits. La valeur de SUBCAT est une
liste (la liste des constituants sous—catégorisés). Le constituant fille (NHDTR) doit étre saturé et avoir donc
une liste SUBCAT vide (elist). La liste SUBCAT du sous—constituant téte (PHJTR) est la concaténation,
notée (+3, de deux listes : une liste a un élément constituée de la description du sous—constituant fille et la liste
SUBCAT du constituant complet. Le reste de la description de ce constituant (valeur de HEAD) est égal a
celle de son sous—constituant téte.

Grammaires d'umﬁcati0n polarisées

des dags, comme nous l'aVons fait pour HPSG. Considérons une premiere regle LFG et sa

traduction GUP: , — _ ‘
S ‘ ’ ‘

S —> NP VP .
l = Tsubj l = 0 0 / Sum

NP,‘ 0 ‘ J /

|\ VP ‘ —— ’ ’ Z /

Les équations sous les catégories assurent la synchronisation de la structure syntagmatique avec
la structure fonctionnelle. Chaque noeud syntagmatique est synchronise avec un noeud
« fonctionnel >>. Les expressions J, et 1‘ renvoient respectivement au noeud fonctionnel
synchronise avec le noeud syntagmatique courant et a celui synchronise avec le noeud
syntagmatique pere (ici S). L'équation J,=’|‘ signifie donc que le noeud syntagmatique courant et
son pere sont synchronisés avec le meme noeud fonctionnel. L'expression ’[‘Subj désigne le
noeud fonctionnel dépendant de 1‘ par la relation Subj. Dans la traduction, seul le lien de
synchronisation Vers le noeud syntagmatique pere est saturé. La structure fonctionnelle est
totalement blanche et elle sera saturée par une regle lexicale comme :

- _ VComp O
7 g‘

V —> Veut ’ I Subj
’[‘Pred = ‘Vouloir(Subj,VComp)’ V A
’[‘Subj = ’[‘VCompSubj V) Pred Subl
Veut

‘Vouloir’

On notera que la regle lexicale est entierement traduite par des éléments saturés, a l'eXception des
éléments de la Valence et des éléments introduits par une équation fonctionnelle, comme ici la
relation Subj entre les deux éléments de la Valence introduite par ’[‘Subj = ’[‘VCompSubj.

Donnons encore la traduction d'une regle pour le traitement d'une interrogative indirecte avec

extraction de l'obj et. Notons que la distinction entre équation contrainte (f :6 V) et non contrainte
(f = V) est facilement prise en compte par les polarités. La propagation de Comp* (qui
correspond, comme son nom l'indique, a une séquence de dépendance Comp) est assurée par la
regle en bas a gauche et l'arrét de cette propagation par la regle Voisine.

+
S‘ %  S f 1 _ § Int

J, = ’[‘Comp*Obj ’[‘Int = + S. ‘ ’ N COmp*
J,Wh :6 + O O //

C0mp* L ‘-’’g,/ Wh‘O+

Comp* "““""'

Comp 00 Comp*

Encore une fois la traduction en GUP perrnet de mettre en évidence certaines composantes
fondamentales des regles (comme les liens de synchronisation) et des mécanismes non explicités
comme la propagation de Comp* ou le fait qu'une équation lexicale comme ’[‘Pred =
‘Vouloir(Subj,VComp)’ introduit a la fois des ressources et des besoins.

4 Conclusion

L'introduction de la polarisation des objets dans une grammaire d'unification perrnet de controler
la saturation des structures de maniere explicite. Procéduralement, le forrnalisme des GUP est

Sylvain Kahane

extrémement simple : il impose seulement que la combinaison de deux structures mette en jeu
l'unification d'au moins un objet. L'obligation ou l'interdiction de combiner davantage d'obj ets est
ensuite entierement controlée par la polarisation des objets. La polarisation Va donc guider la
procedure de combinaison des structures élémentaires. Malgré sa simplicite, le formalisme des
GUP est suffisamment puissant pour simuler élégamment la quasi-totalité des formalismes
utilisés en linguistique forrnelle et en TAL9. Cela perrnet a la fois d'obtenir un éclairage nouveau
sur ces formalismes, de mettre en évidence la nature exacte des structures qu'ils manipulent et
d'eXtraire certains mécanismes procéduraux masqués par le formalisme. Mais surtout, le
formalisme des GUP perrnet d'écrire séparément divers modules de la grammaire manipulant des
structures différentes et de les coupler ensuite en un meme formalisme, comme cela est par
exemple fait en GUST (Kahane 2002). Les GUP foumissent ainsi une alternative aux
formalismes d'unification bases sur les structures de traits en permettant une plus grande
diversite des structures géométriques et un meilleur controle des ressources. Les propriétés
computationnelles des GUP restent a étudier et notamment les restrictions qui permettent d'avoir
une analyse en temps polynomial.

Remerciements

Je remercie Benoit Crabbe, Kim Gerdes, Piet Mertens, Guy Perrier, Alain Polguere et Benoit
Sagot pour leurs nombreuses remarques et leurs commentaires éclairants.

Références

AJDUKIEWICZ K. (1935), Die syntaktische Konnexitat, Studia Philosophica, Vol. 1, 1-27.
BONFANTE G., GUILLAUMEB., PERRIER G. (2003), Analyse syntaxique électrostatique, TAL.

BURRONI A. (1993), Higher—dimensional word problems with applications to equational logic,
Theoretical Computer Sciences, Vol. 115, 43-62.

DUCHIER D., THATER S., 1999, Parsing with tree descriptions: a constraint—based approach,
NLULP 1999 (Natural Language Understanding and Logic Programming), Las Cruces, NM.

KAHANE S. (2002), Grammaire d'Uniﬁcation Sens—Texte : vers un modele mathe'matique
articule’ de la langue, Habilitation a diriger les recherches, Université Paris 7, 82 p.

KESPER S., MONNICH U. (2003), Graph properties of HPSG feature structures, Formal
Grammar 2003, 115-124.

NASR A. (1995), A formalism and a parser for lexicalised dependency grammars, 4th Int.
Workshop on Parsing Tecnologies, State Univ. of NY Press.

PERRIER G. (2002), Descriptions d'arbres avec polarités : les Grammaires d'Interaction, TALN
2002, Nancy.

ROGERS J ., VIJAY-SHANKER K. (1992), Reasoning with descriptions of trees, ACL 1992, 72-80.

TESNIERE Lucien, 1934, Comment construire une syntaxe, Bulletin de la Faculte' des Lettres de
Strasbourg, Vol. 7, 12”” année, 219-229.

VIJAY-SHANKER K. (1992), Using description of trees in a Tree Adjoining Grammar,
Computational Linguistics, Vol. 18, n°4, 481-517.

9 Aux formalismes présentés ici, nous pouvons ajouter une partie des grammaires catégorielles, traduites en

GUP par Perrier 2002 sous le nom de grammaires d'interaction. Rappelons encore une fois que la présente
contribution doit beaucoup a ce travail précurseur.

