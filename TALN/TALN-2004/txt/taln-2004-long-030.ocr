TALN 2004, Fés, 19-21 avril 2004

Annoter les documents XML avec un outil d’analyse syntaxique

Claude Roux

Xerox Research Centre Europe
6, chemin de Maupertuis
38240 Meylan
claude.roux@xrce.xerox.com

Résumé — Abstract

Cet article présente l’intégration au sein d’un analyseur syntaxique (Xerox Incremental Parser)
de regles spe’cifiques qui permettent de lier l’analyse grammaticale a la sémantique des balises
XML spécifiques a un document donné. Ces regles sont basées sur la norme XPath qui offre
une tres grande finesse de description et permet de guider tres précise’ment l’application de
l’analyseur sur une famille de documents partageant une meme DTD. Le re’sultat est alors étre
intégré directement comme annotation dans le document traite’.

This article presents the embedding within a syntactic parser (Xerox Incremental Parser or
XIP) of specific rules which are used to bind the grammatical analysis to the semantic of the
XML mark up tags specific to a given document. The goal of these rules is to guide the
application of a natural language processing tool through the use of XPath instructions to
describe documents that share the same DTD. The result can then be embedded within the
input document in order to annotate that document.

Mots Clés — Keywords

XML, analyse syntaxique, traitement automatique des langues, traitement de documents,
Xpath,XIP.
XML, parsing, natural language processing, document processing, XPath,XIP

1 Introduction

Depuis quelques anne’es déja, la norme XML s’est géne’ralise’e dans la gestion de documents.
Désormais de nombreux acteurs du monde des bases de données offrent des méthodes de
stockage et d’indexation de documents basés sur cette norme. La plupart des traitements de
texte offre aussi de leur cote’ des solutions pour retraduire les documents en XML. Ce format
répond en effet a une demande de plus en plus forte du monde de l’industrie d’homoge’ne’iser

annoter les documents xml avec un outil d ’analyse syntaxique

les bases documentaires des entreprises. Cette migration Vise toute a la fois la possibilité de
disposer d’une base de texte partageant une meme representation, mais aussi et surtout
d’annoter les documents de fagon a renforcer l’efficacite’ des outils de recherche et
d’extraction d’information. Cependant cette annotation lorsqu’elle conceme des millions de
documents ne peut s’effectuer a la main. Or l’utilisation d’un format unique permet
aujourd’hui d’offrir aux outils linguistiques, statistiques ou symboliques, une représentation
standardise’e des textes, ce qui permet de simplifier l’automatisation du traitement de ces
documents. Cependant, pour que de tels logiciels soient efficaces, il est nécessaire de marier la

représentation XML avec les outils linguistiques.

Cet article présente une me’thode qui permet de placer au cceur de l’analyse linguistique le
balisage des documents. En effet la sémantique des balises peut se révéler cruciale durant le
traitement d’un document. Si un titre est marqué a l’aide d’une balise spécifique, il est clair
que cela a un impact sur le contenu textuel associe’ a cette balise. De meme, si dans un texte
une série de mots est place’e en italique ou en gras, cela aussi doit étre pris en compte par la
grammaire. Enfin, si l’on organise le traitement en suivant l’arborescence XML, cela simplifie
aussi naturellement le re’alignement du re’sultat avec les parties analyse’es.

Nous allons dans un premier temps présenter l’analyseur syntaxique XIP (Xerox Incremental
Parser) développé a XRCE (Xerox Research Centre Europe). Puis, dans un deuxieme temps
nous présenterons le formalisme unifie’ qui nous permet de gérer en parallele une grammaire
de document et une grammaire de langue. Cette grammaire de document ne porte que sur la
structure du document (ses balises et les attributs qui leur sont associe’s). Son but est de
décider en fonction d’une balise donne’e de l’inte’rét ou non d’appliquer la grammaire de
langue, et du degre’ de finesse d’analyse qui doit étre sélectionne’ (simple analyse
morphologique, construction de l’arbre des syntagmes noyauxl ou extraction des
de’pendances). Le re’sultat est alors intégré dans le document initial sous la forme de nceuds
XML.

2 Xerox Incremental Parser (XIP)

XIP (A'1't et al. 2000, Roux 99) est un outil de traitement linguistique dont le but est d’analyser
du texte tout—Venant. XIP fournit un ensemble tres riche de regles pour effectuer aussi bien de
la désambigu'1'sation de catégorie, de la construction de syntagmes noyaux et de l’extraction
de dépendances syntaxiques (Tesniere 59).

Les regles sont applique’es de fagon incrémentale, autrement dit les regles sont ordonne’es et
applique’es les unes apres les autres. XIP gere pour chaque phrase une séquence de nceuds
lexicaux ou syntagmatiques associe’e a un ensemble de de’pendances portant sur ces nceuds.
Des traits en nombre illimite’ peuvent étre associés a ces nceuds ou a ces dépendances. Ils
proviennent soit des lexiques soit de l’application de re gles antérieures.

1 Le terme « syntagme noyau » correspond a la notion de chunk défini par Abney (Abney
1991).

Claude Roux

L’application de XIP sur un texte consiste a découper d’abord le texte en mots. Ces mots sont
ensuite de’sambigu'1'sés, puis réunis en syntagmes noyaux. On déduit, grace a des regles
spécifiques, des dépendances syntaxiques entre les nceuds lexicaux en se basant sur les
délimitations introduites par les syntagmes noyaux.

XIP offre de nombreuses possibilite’s d’analyse. On peut par exemple ne calculer que la liste
des mots avec leur analyse morphologique, ou bien encore s’arréter a la seule construction de
l’arbre des syntagmes noyaux. Chaque fois évidemment, le temps de calcul est d’autant re’duit.
XIP peut aussi renvoyer plusieurs types de résultats, un re’sultat en mode texte qui correspond
a l’eXemple ci—dessous, ou un re’sultat de type XML qui obe’it a une DTD propriétaire épousant
tres précise’ment les résultats de XIP.

Exemple :
La dame referme la porte de la maison.

Nous extrayons la suite de dépendances suivantes ainsi que l’arbre des syntagmes noyaux
pour cette phrase :

S UBJ_N0 UN(referme,dame)
0BJ_N0 UN(referme,porte)
O>GROUPE{SC{NP{La dame} FV{referme}} NP{la porte} PP{de NP{la maison}}}

Ces dépendances ont la signification suivante :

SUBJ_NOUN indique une relation « sujet » entre un nom et un Verbe. Une relation
« suj et » entre un pronom et un Verbe aurait e’té indiquée par
SUBJ_PRONOUN.

OBJ_NOUN indique une relation complément d’objet direct entre un nom et un
Verbe. Le trait « NOUN » indique que le COD est un nom.

Des grammaires XIP a large couverture sont disponibles aujourd’hui aussi bien pour l’anglais
que pour le frangais. Des grammaires plus limite’es existent aussi pour le japonais et
l’allemand.

2.1 La sortie XML de XIP

Un document XML est un ensemble de nceuds dont certains sont associe’s a des contenus
textuels. Notre objectif est d’appliquer d’abord une analyse linguistique sur ces contenus, puis
d’associer au nteud XML ainsi traité le re’sultat de cette analyse ; ce qui impose évidemment
que la sortie de l’analyseur obe’isse aussi a un format XML. Or choisir le bon modele de sortie
XML n’est pas aussi trivial qu’il y parait de prime abord. Tout d’abord, une sortie XML est
par définition extrémement Verbeuse, et il faut minimiser la taille de celle—ci, sans que cela
nuise a la richesse d’information que peut avoir produit le systeme en amont. Les travaux
récents en normalisation des structures de traits (TEI/ISO 2003) montrent que le choix d’une
bonne interface XML ne s’improVise pas. Si nous comparons notre choix a celui de NITE

annoter les documents xml avec un outil d ’analyse syntaxique

(Carletta & al.), il est clair que nous ne fournissons pas une annotation linguistique aussi riche
et aussi développée que la leur. Par exemple, notre annotation n’introduit aucune notion de
synchronisation temporelle nécessaire dans le cas d’une annotation de documents audio
video. Notre représentation est beaucoup plus simple et beaucoup moins générale. Cependant,
l’objectif reste le meme, nous Voulons fournir en sortie un document ou les parties annotées
sont clairement mises en relation avec le résultat de leur annotation.

Exemple :
L’eXemple qui suit correspond a l’analyse de la phrase donne’e dans l’eXemple préce’dent :

<XIPRESULT>
<LUNIT>
<NODE num="16" tag="GROUPE" start="O" end="37">
<NODE num="22" tag="SC" start="O" end="15">
<FEATURE attribute="SE" Value="+"/>
<NODE num="O" tag="DET" start="O" end="2">
<TOKEN pos="DET" start="O" end="2">

La
<READING lemma="le" pos="DET"/>
</TOKEN>
</NODE>
</NODE>
<DEPENDENCY name="SUBJ">
<FEATURE attribute="NOUN" Value="+"/>
<PARAMETER ind="O" num="4" word="referme"/>
<PARAMETER ind="1" num="2" word="dame"/>
</DEPENDENCY>
</LUNIT>
<LUNIT>
</LUNIT>
</XIPRESULT>

ll s’agit d’un simple extrait de la structure Véritablement géne’re’e par XIP. Mais elle illustre la
fagon dont l’information est renvoyée par l’analyseur. Les liens en particulier qui s’établissent
entre les dépendances et les nceuds de l’arbre sont basés sur l’attribut « num », l’identificateur
unique de chaque nteud pour une interpre’tation donnée. Chaque « LUNIT (Linguistic Unit) »
correspond a une sequence de mots isole’e par la grammaire formant une unite’ linguistique,
dans la majorite’ des cas il s’agit d’une phrase. Lorsqu’un texte est analyse, il est de’coupe’ en
autant de « LUNIT » que de phrases détecte’es. Le nceud XML « XIPRESULT » correspond a
la racine du document XML ainsi géne’re’.

Claude Roux

3 Grammaire de document XML

La manipulation des documents XML est aujourd’hui le centre d’une intense réflexion sur la
définition des méthodes et des outils les plus souples pour aborder cette tache (Chidlovskii
2003, Vion—Dury 2003, Chen et al. 2003). Or l’analyse syntaxique n’est pas un but en soi mais
le maillon dans une chaine plus large de traitements qui Visent a enrichir a chaque nouvelle
étape un document. Aussi, nous proposons de conside’rer le traitement linguistique comme une
autre forme de transformation de document a l’instar de XSLT par exemple. Pour cette raison,
le langage de manipulation que nous allons définir Va comme XSLT ou XQuery reposer sur
XPath (W3C 99). XPath permet la description des nceuds XML d’un document sous la forme
de chemins qui définissent des contraintes portant tout a la fois sur les noms de balise, la
comparaison d’attributs ou encore la position relative des nceuds XML les uns par rapport aux
autres. Enfin, derniere contrainte, nous Voulons pouvoir Varier le traitement du contenu textuel
de ces balises en fonction de leur sémantique particuliere.

La solution que nous proposons consiste a de’Velopper une Véritable grammaire de document
qui Va guider l’application de l’analyseur linguistique pas a pas. Cette grammaire tres simple
doit permettre de décider, en fonction de la nature de la balise, du type de traitement le plus
approprié. Nous avons identifie’ quatre situations parmi les plus courantes :

1. Le contenu de cette balise ne doit pas étre analyse’.
2. Le contenu de cette balise doit étre directement analysé

3. Cette balise est la racine d’un sous—arbre XML dont les contenus textuels doivent étre
fusionne’s avant d’appliquer l’analyseur.

4. Cette balise est par exemple une balise typographique. Les mots ainsi balise’s doivent
étre marque’s par un trait spécifique. Cette balise ne doit pas interfe’rer avec l’analyse
du contenu plus large ou elle se trouve.

3.1 XPath

Comme nous l’aVons dit en introduction, chacune des regles de cette grammaire de document
repose sur une description de nceuds XML sous la forme d’un XPath. On peut en effet
conside’rer un document XML comme un arbre dont chaque nteud est identifiable par son
chemin depuis la racine et par la Valeur de ses attributs. XPath permet de décrire un tel chemin
en utilisant une syntaxe proche des chemins dansUNIX.

Exemple :

/XIPResult/LUNIT ce XPath correspond it tous les nceuds LUNIT places directement sous
un nceud XIPResult.

//Node[@num=lO] ce XPath relatif correspond it tous les nceuds Node dont l’atlribut num
porte la valeur 10.

annoter les documents xml avec un outil d ’analyse syntaxique

XPath dispose de plus de toute une série d’opérateurs pour rejoindre des nceuds parents ou
freres a partir d’un nteud donné.

Grace a XPath, l’eXe’cution n’est pas uniquement guide’e par le seul nom de la balise. On peut
aussi bien intégrer la position de ce nteud dans l’arborescence du document que la Valeur de
ses attributs.

3.2 Les instructions

Le formalisme que nous allons décrire ici correspond a celui que nous avons implante’ dans
XIP. Comme nous l’aVons mentionne’ plus haut, cette grammaire doit offrir plusieurs types
d’analyse. Les instructions dont nous disposons sont les suivantes :

° Ignore cette instruction permet d ’ignorer le contenu textuel d ’une balise
° Analyse(type) cette instruction provoque l ’analyse du contenu de la balise

° Fusionne(type) cette instruction eﬂectue la fusion des contenus textuels place sous le
nceud courant.

° Marque(trait) cette instruction marque le contenu textuel avec le trait «trait ».

La Variable type associe’ a Fusionne et a Analyse permet de définir le type d’analyse associe’ a
ce XPath. Les Valeurs sont les suivantes :

a) token le texte est simplement segmente’ en mots analyses morphologiquement.
b) noyau le texte est analyse en syntagmes noyaux.
c) dépendance les de’pendances sont extraites.

De cette fagon, on peut donc indiquer la finesse d’analyse désire’e pour chacun des types de
balises.

3.3 Exemple

Supposons que nous Voulions analyser des documents contenant des dépéches ayant la forme
suivante :

<NO UVELLES>
<DEPECHE ID="1">
<DATE>26—FEB—1987 15:O1:O1.79</DATE>
<LIEUX><D>Brési1</D><D>Bahia</D></LIEUX>
<TEXTE>
<TITRE>Production de cacao a Bahia</TITRE>

Claude Roux

<CORPS>Des averses ont bouleverse’ la région de
<GRAS>Bahia</GRAS> pendant tout la semaine perturbant la récolte
de cacao.</CORPS>

</ TEX TE>
</DEPECHE>
</N O U VELLE S >

Ce document présente un mélange de champs textuels dont le contenu comprend aussi bien
des dates, des titres, des mots clefs que du texte libre. Pour 1’analyse de ce document, nous ne
Voulons pas appliquer de facon aveugle l’eXtraction des dépendances au champ DATE par
exemple, ou encore au champ LIE UX, puisque ces champs se re’sument a une simple liste de
mots clefs. En revanche, nous Voulons appliquer ce type de traitement au contenu du champ
CORPS. Remarquons au passage, que ce champ comprend 1ui—méme du texte balise’ en GRAS,
ce qui impose un traitement particulier aVant1’app1ication de l’analyseur syntaxique.

a) Par défaut, les contenus textuels des balises ne sont pas ana1yse’s ce que nous traduisons par
la ligne suivante :

#defaut—>ignore() ;

b) Les balises typographiques doivent étre retire’es pour e’Viter de perturber 1’analyse du texte,
mais comme ce balisage peut revétir une certaine importance, nous devons le remplacer par
une structure de traits, ce que nous traduisons par :

//GRAS—>Marque(focus) ;
Le trait « focus » sera automatiquement associe’ a tous les mots balise’s par GRAS.

c) Enfin, le contenu de la balise CORPS est un contenu complexe, puisqu’il peut contenir
d’autres balises. Par consequent, nous allons devoir effectuer une phase de fusion de tous les
« sous—teXtes » présents avant d’appliquer notre analyse. La description de la balise sera donc
la suivante :

//CORPS—>fusionne(dépendance) ;

Le moteur fonctionne en traitant les documents en profondeur d’abord, ce qui nous assure un
traitement de la balise GRAS avant celui de la balise CORPS. De cette facon, nous nous
assurons que la transformation de cette balise typographique sera effectuée avant celle de la
balise CORPS.

Ainsi, si l’on applique cette grammaire a notre document, l’analyseur syntaxique recevra la
seule phrase suivante :

Des averses ont bouleverse’ la région de Bahia[f0cus] pendant tout la semaine perturbant la
récolte de cacao.

annoter les documents xml avec un mm"! d ’analyse syntaxique

3.4 Le document résultat

Nous avons présente’ cette grammaire de document comme une nouvelle forme de
transformation de documents. De fait, l’application de cette grammaire génére un résultat qui
doit étre associe’ a chacune des balises qui ont été analysées. Pour ce faire, nous allons
exploiter la possibilité qu’offre XIP de fournir un résultat au format XML. A chaque étape, le
contenu des balises décrites par la grammaire de document Va étre analysé, le résultat de ces
analyses sera renvoyé en XML et directement intégré sous le nmud méme qui aura été analysé.
Ainsi, le document résultat comprendra aussi bien le texte initial que le résultat de l’analyse
de ce texte, le tout conforme de bout en bout a la norme XML. De cette fagon, l’alignement
des textes analysés avec le résultat de l’analyse se fera automatiquement.

Exemple :

Si nous utilisons la grammaire de document donne’ en exemple, le document final en sortie
sera le suivant:

<TEXTE>
<TITRE>Production de cacao a Bahia</TITRE>

<CORPS>Des averses ont bouleverse’ la région de
<GRAS>Bahia</GRAS> pendant tout la semaine perturbant la récolte
de cacao.</CORPS>

<XIPRESULT>. . .
</XIPRESULT>
</TEXTE>

Le résultat XML de XIP est simplement intégré au document final sous la forme d’un sous-
arbre XML XIPRES ULT.

4 Conclusion

Nous avons présente’ une méthode qui permet l’application de traitements linguistiques qui
respectent le format des documents XML. Cette méthode basée sur XPath associe des nccuds
XML avec des types de traitement particulier tel que l’eXtraction de dépendance ou
l’eXtraction des syntagmes noyaux. Le résultat de l’analyse est alors fourni sous la forme d’un
document reproduisant le document initial mais dont les parties traitées sont enrichies avec le
résultat issu d’un traitement linguistique controle’. Cette méthode est, de plus, trés générale
puisqu’elle n’implique aucun balisage a priori du document et offre une mise en route trés
rapide, la description de cette grammaire de document se réduisant le plus souvent a quelques
régles. L’utilisation de XPath permet par la méme occasion un traitement trés souple de ces
mémes documents, on peut par exemple décider do no traiter que les balises DEPECHE dont
l’attribut ID est inférieur a 10.

Claude Roux

Example :
//DEPECHE[@ID<=10]—>fusionne(dépendance)

Nous n’aVons pas décrit dans le détail le fonctionnement complet du systeme. Ainsi, par
exemple nous avons utilise’ libxml comme bibliotheque de base pour le traitement des
documents XML. libxml fournit de’ja un traitement efficace des expressions XPath, ce qui
permet de nous affranchir de la tache hasardeuse d’écrire notre propre Version. Il est aussi
possible de spécialiser la grammaire de langue sur la base de XPath. Par exemple, on peut
décider de suspendre certaines parties de la grammaire lors de l’analyse d’une balise «titre »,
en omettant l’eXtraction des dépendances. Enfin, la plate—forme que nous avons développée
offre la possibilité de traiter de gros documents en les découpant en sous—arbres XML qui sont
analyse’s indépendamment.

La fusion d’une grammaire propre au document avec la grammaire d’analyse syntaxique
simplifie grandement le traitement des gros fichiers XML. Elle permet de conside’rer les
balises non plus comme un simple bornage de champs textes mais comme une information
sémantique supplémentaire pour guider l’analyse du document.

5 Références

ABNEY S., (1991), Parsing by chunks, in Principled—Based Parsing, R. Berwick, S. Abney,
and C. Tenny, editors. Kluwer Academic Publishers, Dordrecht, 1991.

AiT—MOKH1"AR S., CHANOD J.—P., ROUX C., (2002) Robustness beyond shallowness.'
incremental dependency parsing, in a special issue of the NLE Journal, 2002.

AiT—MOKH1"AR S., LUX V., BANIK. E, (2003) Linguistic parsing of lists in structured
documents, in Language Technology and the Semantic Web: 3rd Workshop on NLP and XML
(NLPXML—2003), EACL, Budapest, 2003.

CARLETTA, J ., KILGOUR, J ., O'DONNELL, T., EVERT, S., AND VOORMANN, H. (2003) The NITE
Object Model Library for Handling Structured Linguistic Annotation on Multimodal Data
Sets, in proceedings of the EACL Workshop on Language Technology and the Semantic Web
(3rd Workshop on NLP and XML, NLPXML—2003).

CHEN H., TOMPA F.W., Set—at—a—time Access to XML through DOM, in DocEng 2003
(Meylan).

CHIDIDVSKII B. (2003), A Structural Adviser for the XML Document Authoring, in DocEng
2003 (Meylan).

ROUX C., (1999), Phrase—Driven Parser, VEXTAL 99 (Venice).
TESNIERE L., (1959), Elements de syntaxe structurale, Klincksiek (Paris).

VION—DURY J .Y. (2003), XPath on Left and Right Sides of Rules .' Toward Compact XML Tree
Rewriting through Node Patterns, in DocEng 2003 (Meylan).

annoter les documents xml avec un outil d ’analyse syntaxique

VOUTILAINEN A., HEIKKILA J ., (1994), An English constraint grammar (EngCG).' a surface
syntactic parser of English, Fries, Tottie and Schneider (eds.), Creating and using English
language corpora. Rodopi.

TEI/ISO Joint Activity on Feature Structures: Reunions tenues les 4 et 5 Novembre 2003 a
l’ATILF, Université de Nancy 2.

W3C (1999), XML Path Language (XPath) 1.0, W3C recommendation, November 16th 1999
(http://www.w3.org/TR/xpath)

W3C (1999), XSL Transformations XSLT Version 1.0, W3C recommendation, November 16th
1999.

