TALN 2005, Dourdan, 6-10 juin 2005

Projection et monotonie dans un langage de representation
lexico—grammatical

Benoit Crabbe
LORIA — Universite Nancy 2
BP 239, 54506 Vandoeuvre—les—Nancy Cedex
crabbe@loria.fr

Mots-clefs :

Syntaxe, Lexique, Liage, Interface syntaxe semantique, TAG

K€yWOFdS2 Syntax, Lexicon, Linking, Syntax Semantics interface, TAG

Resume Cet article apporte une methode de developpement grammatical pour la reali-
sation de grammaires d’arbres adjoints (TAG) de taille importante augmentees d’une dimen-
sion semantique. La methode que nous presentons s’exprime dans un langage informatique de
representation grammatical qui est declaratif et monotone. Pour arriver au resultat, nous mon-
trons comment tirer parti de la theorie de la projection dans le langage de representation que
nous utilisons. Par consequent cet article justiﬁe l’utilisation d’un langage monotone pour la
representation lexico—grammaticale.

Abstract This papers provides a methodology for the grammatical development of large
sized tree adjoining grammars (TAG) augmented with a semantic dimension. The provided
methodology is expressed in a monotnic and declarative language designed for the compact
representation of grammatical descriptions. To achieve the result, we show how to express
a linking theory in the language used. Therefore this paper justiﬁes the use of a monotonic
language for lexico— grammatical representation.

1 Introduction

Dans cet article, nous donnons une methode generale qui permet representer de maniere com-
pacte un fragment signiﬁcatif de grammaire TAG pour le frangais comportant une interface
syntaxe—semantique. TAG n’etant pas en tant que tel un formalisme d’analyse syntaxique com-
portant une speciﬁcation explicite de la representation semantique, nous utilisons ici la variante
introduite par (GKO3). Celle—ci utilise des unites elementaires qui sont des structures a deux
dimensions. Une dimension syntaxique qui est l’arbre TAG habituel, et une dimension seman-
tique qui represente l’information semantique associee a cet arbre. La dimension semantique
est constituee de formules du langage de representation semantique utilise par (GKO3). Celui—ci
est de la meme famille que la minimal recursive semantics.

427

428

Benoit Crabbe

2 Enjeux méthodologiques

Pour representer une grammaire TAG de maniere non redondante, nous utilisons un langage
informatique destiné a exprimer la grammaire de maniere compacte (CD04). Celui—ci repose
sur l’utilisation de macros (ou classes) réutilisables. Ce langage est destine a servir de source
a un interprete effectivement implémente qui realise l’expansion de la description compacte
(DLPO4). Le langage utilise pose que dans un systeme de description grammatical, il est
souhaitable de reconnaitre deux types de géneralisations : les genéralisations de structure d’une
part et les géneralisations d’alternatives d’autre part.

N On identiﬁe dans la description gram-

/\ maticale un certain nombre de construc-

N* S tions recurrentes que l’on souhaiterait

N 1 C pouvoir réutiliser. Par exemple dans les
deux arbres suivants, nous avons encer—

q1|1e cle l’information qui represente un su-

jet nominal realise en position canon-

La pomme We Jean mange ique. D’autre part, et independamment
du partage de structure, on souhaite capturer la notion d’altemative. Par exemple ou souhaitera
identiﬁer qu’une construction passive est une alternative d’une construction active. Les alter-
natives que nous identiﬁons ont un statut particulier. En effet, ces géneralisations contribuent
a décrire des ensembles d’unites grammaticales mises en relation. Dans l’exemple donné ci-
dessus, l’altemative entre un contexte transitif actif (a) et un contexte transitif pas sivise (b) con-
tribuent a décrire un ensemble de deux arbres qui partagent une semantique commune (predicat
binaire transitif). La reconnaissance explicite des alternatives constitue un point important du
langage que nous utilisons. En effet, une famille d’arbres (AbeO2), n’est rien d’autre qu’un
ensemble de realisations alternatives d’une meme structure prédicat—argument. Or la represen-
tation des alernatives a souvent été negligee dans les propositions recentes pour la representation
grammaticale de TAG (Can99; XiaOl; GCRO2)1.

Jean mange une pomme

Rejet des régles lexicales Le cadre que nous proposons ici se veut operationnel. Dans ce
contexte, la méthode que nous proposons se caracterise par le rejet des regles lexicales. La
raison principale est que l’utilisation d’une mecanique procedurale dans le développement de
grammaires d’arbres adj oints de tailles consequentes pose en pratique de tres sérieux problemes
d’ ordonnancement de regles (ProO2). En lieu et place de regles lexicales, nous utilisons un lan-
gage purement déclaratif muni de deux operateurs qui permettent de combiner des descriptions
grammaticales fragmentaires : la conjonction et la disjonction.

3 Langage utilisé

Le langage que nous utilisons (note £g) permet de tirer parti des deux types de géneralisations
que nous avons identiﬁes. Celui—ci repose crucialement sur la notion de classe. Une classe con-
tient une description de structure(s) grammaticale(s) partielle(s). Pour une TAG, une description
est une description partielle d’arbre potentiellement augmentee de structures de traits associées

1En particulier, mentionnons que (Can99; GCR02) permettentd’eXprimer1es alternatives de maniere detournee
a1’aide d’un algorithme de « croisement ». En pratique nous avons observe que cet algorithme complique consid-
erablement 1e travail de conception de grammaires.

Projection et monotonie dans un langage de representation lexico— grammatical

aux noeuds. Une classe a pour fonction de nommer la description D a laquelle elle est associée
de telle sorte qu’il est possible de réutiliser D par ailleurs dans une description D’ quelconque.
Ce sont les classes qui nous permettent dans le langage de capturer les generalisations gram-
maticales. Ce langage détaille par (CD04) comporte quatre aspects.

Nommage Le langage permet de nommer une description. Associer un nom a une description
permet de la réutiliser par apres. Ceci est illustre par les exemples suivants ou on associe un
nom (a gauche) a la description indiquee a droite2N

S N*

(/2

S

SujetCanonique —> N L V SujetRe1atiVisé —> N L V FormeVerba1e —> V<>

Réutilisation Il est possible dans une description donnee de reutiliser une description deja as so-
ciée a un nom par ailleurs. Dans l’exemple suivant, on reutilise ainsi la « macro » FormeVerbale
dans la description de VerbeActif.

VerbeActif —> FarmeVerbale
Alternative On peut exprimer dans le langage la notion d’alternatiVe (ou de choix) en utilisant
le symbole V. Ainsi, l’exemple suivant montre comment exprimer que la notion de sujet recou-
Vre aussi bien la notion de sujet canonique que de sujet relativise.

Sajet —> SajetCanam'qae V SajetRelativisé
Composition Il est egalement possible de combiner deux descriptions. Ainsi, on peut exprimer
qu’une famille de constructions intransitives est faite d’un sujet et d’une forme Verbale a l’actif
de la maniere suivante :

Verbelntransity’ —> Sajet /\ VerbeActy’

S T /S\
Ni V /\ V<> : Ni V<>
Le gargran. .. dart Le gargran dart
N N

/\ S /\

N* S l N* S

A V<> :> /\
(Le gargran) qm. .. Le gargan qm dart

Figure 1: Deux arbres a contexte intransitif

Interprétation du langage Formellement, comme l’indiquent (CD04), l’interpretation d’une
description grammaticale d formulee en £6 se ramene a un interpreter un programme logique
de la famille Deﬁnite Clause Grammar (DCG). Cela se comprend en considerant que d est
une grammaire dont les terminaux sont des descriptions arborescentes, que l’opération de con-
catenation est ici la conjonction et en imposant que la DCG sous—jacente a d soit non recursive
(CD04). L’interpretation d’une description d engendre de maniere indeterministe toutes les
phrases, prises comme des conjonctions de descriptions, de la DCG sous—jacente a d. Dans
l’exemple presente jusqu’ici, en considérant la classe Verbelntransity‘ comme axiome de la
DCG, l’interprete engendre deux arbres representant deux contextes de Verbe intransitif, comme
indique en ﬁgure 1. Ou on illustre sur la gauche les deux conjonctions de descriptions engen-
drees par l’interprete et sur la droite le resultat de la composition des descriptions3.

2Nous utilisons dans ce document une syntaxe abstraite pour illustrer notre propos. Un interprete concret pour
ce langage a été implanté par (DLP04).
3Le mécanisme de composition est détaillé par (CD04)

429

430

Benoit Crabbe

4 Théorie de la projection lexicale

Le langage etant pose, nous donnons dans cette section une méthode genérale qui permet
d’exprimer de maniere declarative une grammaire a l’aide de ce langage. Cette methode re-
pose sur la théorie de la projection (linking theory). La fonction de projection associe chaque
element de la structure argumentale a un element de la structure syntaxique, comme indique ici :

MANGER (agent patient) MANGER (agent patient)
l I 9>6'w
manger (sujet objet) mangerpass (sujet par — objet)
Approche monotone Utiliser la projection dans un langage
MANGER (agent patient) tel que celui que nous proposons consiste a considerer que
k-rﬁi l’on genere un ensemble d’unites grammaticales completement
mangerpass (sujet (D)

speciﬁées par surspéciﬁation de la structure argumentale. Cette
méthode permet de garantir un mecanisme monotone pour exprimer l’interface syntaxe seman-
tique. Pour illustrer ce point, prenons le cas classique du passif court qui, dans la littérature est
souvent utilise pour justiﬁer l’utilisation d’une mecanique procedurale (Bec93; Can99; XiaO1).
Dans ce cas, Marie est vue est considere comme Variante de Jean voit Marie dans laquelle
l’agent n’est pas exprime. Le traitement par regle lexicale du passif court consiste a effacer
l’agent (i.e. Jean). Dans le cas du modele projectif, rien n’est efface. Au contraire l’agent non
exprime est projeté sur une realisation Vide en syntaxe, comme illustré a gauche. L’ approche
projective ne fait qu’ aj outer de l’information, et eventuellement de l’information Vide a la struc-
ture argumentale.

Projection pour une grammaire TAG L’ approche projective presentée jusqu’ a present s’ ada-
pte facilement a une grammaire semi—lexicalisée du type LFG. Ainsi dans une grammaire
LFG, une structure syntaxique comme mcmger(sujet objet) correspond directement a la f-
structure de l’entree lexicale d’un Verbe.

En pratique, dans le cas d’une grammaire TAG a dimension semantique,
S les entrees lexicales a décrire sont des schemas d’arbres comme illus-
tré a droite. La dimension sémantique est prise comme contrepartie de

Nih V0 N i7y la structure argumentale et la structure arborescente est prise comme
contrepartie de la dimension syntaxique. La fonction de projection est
<>(?X,‘_>y) representee par le partage de Valeurs des traits semantiques associes aux

noeuds de l’arbre et les Variables d’indiVidus de la prédication élémentaire (indiquee en gras).

La methodologie que nous proposons repose sur l’idée de base que les arbres elementaires TAG
sont décrits par assemblage de fragments de structure correspondant a la representation des
arguments et du predicat. La methodologie qui suit consiste ensuite a produire des familles
d’arbres en assemblant ces differents fragments. Ce qui generalise l’exemple donne en ﬁg-
ure 1. La méthode comporte quatre etapes : (1) Description des fragments (2) Description de
fonctions syntaxiques (3) Description de changements de diathese (4) Description de familles.
Pour realiser l’interface syntaxe—semantique, l’idée consiste a etablir le lien entre la structure
prédicative et les Valeurs de traits dans les arbres a l’aide de classes parame’tre’es4

La premiere etape de la description consiste a déﬁnir des fragments representant differentes

“On se rappelle que le langage de controle 13¢ est Vu comme la contrepartie d’une DCG ce qui nous autorise a
utiliser des parametres.

Projection et monotonie dans un langage de representation lexico— grammatical

s
s s I

A /\ f /V\

SujCan(?x)—> Ni?ac V ObjCan(?x)—> V Ni?ac F0rActive—>V<> F0rPassive—>\/L V0

S S S
/\ /\ /\
V PP PP S V PP
/\,, /\,, /\,,
1|? NH 1'9 NH P H
IndObjCan(?x)—> 3 IndObjWh(?x)—> 3 Par0bjCan(?x)—> pin
S
PP S N S
/\,? /\ {\
P NW N* s NH S
Par0bjWh( ?x) —> pg“ SujRel( ?x) —> Ni?/ac\\] 0bjWh( ?x) ~> \|,

Figure 2: Fragments d’arbres utilises comme << blocs de construction » de la grammaire

formes du predicat et des arguments (Figure 2). Chacun de ces fragments est reutilise pour la
description des arbres. Par exemple, toute description d’arbre qui représente un contexte ou le
sujet est realise en position canonique utilisera le fragment SujCcm. De plus, pour implementer
le liage syntaxe/se’mantique, chaque classe decrivant un fragment arborescent coindexe la valeur
du trait sémantique dans la structure arborescente avec un parametre de classe approprie. La
seconde etape regroupe les classes qui decrivent les fonctions syntaxiques. Celles—ci capturent
le fait qu’une fonction syntaxique est une notion qui permet de s’abstraire de la question de
l’ordre des mots.
(1) Sujet(?X) —> SujetCan(?X) v SujRe1(?x)

Objet(?X) —> ObjCan(?X) v ObjWh(?x)

ParObjet(?x) —> ParObjCan(?x) V ParObjWh(?x)

ObjetIndirect(?x) —> IndObjCan(?x) V IndObjWh(?x)

Par exemple, la clas se Sujet quoi que simpliﬁée ici capture le fait que le sujet recouvre alterna-
tivement une realisation nominale devant le verbe (SujCcm) ou en position relativisee (SujRel).
En outre, les classes decrivant les variantes fonctionnelles contribuent a établir le liage entre
syntaxe et semantique en propageant la coindexation de valeurs par utilisation de parametres.

La troisieme etape ou l’on decrit les changements de diathese constitue le point important. Pour
capturer l’alternance actif/passif, nous utilisons la deﬁnition suivante :
(2) A1temancePassive(?x, ?y) —>
(Sujet(?X) /\ FormeActive /\ Objet(?y))
V(Sujet(?y) /\ FormePassive /\ ParObjet(?x))
V(Sujet(?y) /\ FormePassive)

Ce qui indique que les realisations alternatives de l’actif et du passif sont soit faites d’un sujet,
d’une forme verbale active et d’un objet; soit d’un sujet, d’une forme verbale passive et op-
tionellement d’un complement d’agent. Cette classe deﬁnit deux parametres ?:E et ?y qui sont
coindexes avec les parametres des classes de fonctions syntaxiques. Les valeurs des parametres
?:E et ?y représentent les valeurs associees aux arguments dans la structure argumentale. Ainsi
la premiere ligne, qui represente l’actif, a pour effet de lier le premier argument (?:c) au sujet et
le second (?y) a l’objet. Par contre, la seconde ligne, qui représente le passif, lie le premier argu-
ment au complement d’agent et le second au sujet. Finalement la demiere ligne, qui represente
le passif sans agent, lie uniquement le second argument au sujet. Le premier argument n’est
tout simplement pas lie.

431

Benoit Crabbe

En demier lieu, la deﬁnition des familles (Abe02) demande d’introduire explicitement la represen-
tation semantique et de lier les variables de la predication élémentaire avec les parametres de
clas se appropries. On deﬁnira une famille ditransitive de la maniere suivante :
(3) Famil1eDitransitive —>
A1temancePassive(?X, ?y) /\ ObjetIndirect(‘?z)
/\ <sem> <>(‘.7:c, 17y, 17.2)

ou <sem> represente la description d’un litteral semantique dont les variables d’individu sont
coindexees avec les parametres de classes appropries Le litteral semantique ainsi decrit est
la contrepartie dans notre langage de ce que la theorie de la projection appelle la structure
argumentale. A chacun des niveaux de description les variables sont coindexees de maniere
appropriee. La generation de l’ensemble des arbres de la famille produit bien un ensemble de
couples (arbre, representation semantique) dans lesquels la projection est bien realisee.

5 Conclusion

Dans cet article, nous avons propose une methode de developpement de grammaires d’arbres
adjoints qui s’exprime dans un cadre monotone. Cette methode permet de justiﬁer l’usage
d’un langage monotone pour la representation lexico—grammaticale. En second lieu elle ou-
vre la porte au developpement de grammaires d’arbres adjoints a large couverture comportant
une interface syntaxe—sémantique. Ces grammaires doivent étre interfacees avec les analyseurs
TAG existants (GP05). Le langage ainsi que la méthode proposes ont permis de generer une
grammaire d’arbre adjoints de taille importante (environ 4000 arbres). De plus le cadre pro-
pose ici s’adapte facilement au développement de grammaires pour d’autres formalismes forte-
ment lexicalises. Ainsi, G. Perrier a pu reutiliser cette methode pour produire une grammaire
d’interaction. Nous avons egalement mene quelques experiences encourageantes qui ont permis
de creer une petite grammaire XDG du francais.

Références

Anne Abeillé. (Abe02) Une grammaire d ’arbres adjoints pour lefrancais. CNRS, Paris, 2002.

Tilman Becker. (Bec93) HyTAG.' A new Type of Tree Adjoining Grammars for Hybrid Syntactic Repre-
sentation of Free Word Order Language. PhD thesis, Universitat des Saarlandes, 1993.

Marie—Hélene Candito. (Can99) Organisation Modulaire et Parame’trable de Grammaires Electroniques
Lexicalise’es. PhD thesis, Université de Paris 7, 1999.

Benoit Crabbe and Denys Duchier. (CD04) Metagrammar redux. In Constraint Solving and Language
Processing, Copenhagen, 2004.

Denys Duchier, Joseph Leroux, and Yannick Parmentier. (DLP04) The metagrammar compiler: An nlp
application with a multi—paradigm architecture. In Mozart 2004, Charleroi, 2004.

Bertrand Gaiffe, Benoit Crabbe, and Azim Roussanaly. (GCR02) A new metagrammar compiler. In
Proc. TAG+6, Venise, 2002.

Claire Gardent and Laura Kallmeyer. (GK03) Semantic construction in feature—based tree adjoining
grammar. In Proc. EACL, 2003.

Claire Gardent and Yannick Parmentier. (GP05) Large scale semantic construction for tree adjoining
grammar. In Proc. LACL 2005, Bordeaux, 2005.

Carlos Prolo. (Pro02) Systematic grammar development in the XTAG project. In COLING’02, 2002.

Fei Xia. (Xia0l) Automatic Grammar Generation from two Diﬁerent Perspectives. PhD thesis, Univer-
sity of Pennsylvania, 2001.

432

