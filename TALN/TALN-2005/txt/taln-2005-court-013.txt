TALN 2005, Dourdan, 6-10 juin 2005

A Descriptive Characterization of Multicomponent Tree
Adjoining Grammars

Laura Kallmeyer
TALaNa/Lattice, UFRL, University Paris 7
2 place Jussieu, Case 7003, 75005 Paris

laura.kallmeyer@linguist.jussieu.fr

M0tS-Cl€fS I Grammaires d’Arbres Adjoints, MCTAG, formalismes grammaticaux

K€yWOFdSI Tree Adjoining Grammars, MCTAG, grammar formalisms

Resume Il a ete montre que les Grammaires d’Arbres Adjoints Ensemblistes (Multicom-
ponent Tree Adjoining Grammars, MCTAG) sont tres utiles pour des applications TAL. Pour-
tant, la deﬁnition des MCTAG est problematique parce qu’elle fait reference au proces de deri-
vation meme : une contrainte de simultaneite est imposee concemant la fagon dont on aj oute les
membres d’un meme ensemble d’arbres. En regardant uniquement le resultat d’une derivation,
c’est—a—dire l’arbre derive et l’arbre de derivation, cette simultaneite n’est plus visible. Par con-
sequent pour veriﬁer la contrainte de simultaneite, il faut touj ours considerer l’ ordre concret des
pas de la derivation. Aﬁn d’eviter cela, nous proposons une caracterisation alternative de MC-
TAG qui permet une abstraction de l’ordre de derivation : Les arbres generes par la grammaire
sont caracterises par les proprietes de leurs arbres de derivation.

Abstract Multicomponent Tree Adjoining Grammars (MCTAG) is a formalism that has
been shown to be useful for many natural language applications. The deﬁnition of MCTAG
however is problematic since it refers to the process of the derivation itself: a simultaneity con-
straint must be respected concerning the way the members of the elementary tree sets are added.
Looking only at the result of a derivation (i.e., the derived tree and the derivation tree), this si-
multaneity is no longer visible and therefore cannot be checked. I.e., this way of characterizing
MCTAG does not allow to abstract away from the concrete order of derivation. Therefore, in
this paper, we propose an alternative deﬁnition of MCTAG that characterizes the trees in the
tree language of an MCTAG via the properties of the derivation trees the MCTAG licences.

1 Introduction

1.1 Tree Adjoining Grammars

Tree Adjoining Grammar (TAG, J oshi et al., 1975) is a tree—rewriting formalism. A TAG con-
sists of a ﬁnite set of trees (elementary trees) with nonterminals and terminals as node labels
(terminals only label leaf nodes). Starting from the elementary trees, larger trees are derived by

457

458

Kallmeyer

3 derived tree: S
A . .
 NP /_VP Np VP derivation tree:
NP ‘~._A  | | laugh
l VP - — —’ V John ADV VP
John /\ l ' l l/\3
ADV VP* laughs always V _
I | _]0hI1 always
always laughs

Figure 1: TAG derivation for John always laughs

substitution (replacing a leaf with a new tree) and adjunction (replacing an internal node with a
new tree). In case of an adjunction, the new tree is a so—called auxiliary tree that has exactly one
leaf marked as the foot node (marked with an asterisk). All other elementary trees are called
initial trees. When adjoining an auxiliary tree 3 to a node ,a, in the resulting tree, the subtree
with root node ,a from the old tree is put below the foot node of ﬂ. Each derivation starts with
an initial tree. In the ﬁnal derived tree, all leaves must have terminal labels. See for example
Fig. 1 : Starting from the laughs tree, the tree for John is substituted for the NP leaf and the tree
for always is adjoined at the VP node.

TAG derivations are represented by derivation trees that record the history of how the elemen-
tary trees are put together. A derived tree is the result of carrying out the substitutions and
adjunctions. Each edge in the derivation tree stands for an adjunction or a substitution. The
edges are labelled with Gorn addresses of the nodes where the substitutions/adjunctions take
place.1 E.g., in Fig. 1 the derivation tree indicates that the elementary tree for John is substi-
tuted for the node at address 1 and always is adjoined at node address 2.

1.2 Multicomponent TAG

Multicomponent TAG (MCTAG, J oshi, 1987; Weir, 1988) is a TAG extension useful for lin-
guistic applications. An MCTAG contains sets of elementary trees. Starting with an initial tree,
in each derivation step, all trees from one of the tree sets are added simultaneously. Depending
on the nodes to which these trees attach, different kinds of MCTAGs are distinguished: if all
nodes are required to be part of the same elementary tree, the MCTAG is tree—l0cal; if all nodes
are required to be part of the same tree set, the grammar is set—l0cal; otherwise the grammar
is n0n—l0cal.2 Consider for example the non—local MCTAG derivation in Fig. 2: the tree for
to be certain adjoins to the lower S node of like, the WH and NP nodes of like are substituted
for what and John respectively, and does and seem are adjoined simultaneously to the upper S
node of like and the root node of to be certain respectively. These last two operations cannot be
performed before having added to be certain to like, otherwise the simultaneity requirement is
not satisﬁed.

Intuitively, the requirement of adding all elements of an elementary set simultaneously is easy to
understand and this deﬁnition of MCTAG seems very clear. However, the simultaneity require-
ment imposes certain derivation orders even though a different order might lead to the same
adjunctions and substitutions and to the same derived tree. E.g., in Fig. 2 one might as well

1The root has the address 6, and the j th child of the node with address p has address pj.

2Cases where MCTAGs have been argued to be useful are extractions out of complex NPs as in “which painting
did you buy a copy of” where the two parts of the complex NP should be part of one elementary structure but cannot
be part of the same elementary tree. For such examples Kroch and J oshi ( 1987) propose to use tree—local MCTAGs.

A Descriptive Characterization of Multicomponent Tree Adjoining Grammars

{  S’ _______________ --s
what “~~-.WH/\S< """""" ",IIIIIIII:—S’;_‘_‘_’____“ d0é\S,..
J\ _—/,’ /\ ‘ \

NP___ ——”’"’NP Slﬂﬂ { tobecertain S* } I """ "S

I  >s<
{ John } to like Seem 5

Figure 2: Derivation for what does John seem to be certain to like in an MCTAG G M

/AR like
does certain who john does certain who john

SCCIII SCCIII
Figure 3: TAG derivation trees for the TAG underlying Fig. 2

start by adding does to like (at the higher S node), then adjoin to be certain to like (at the lower
S node) and then adjoin seem to to be certain. This yields the same derived tree with the same
adjunctions and substitutions. But the simultaneity requirement is not respected. Consequently,
in order to check whether a given tree is part of the tree language, one has to check the possible
derivations of this tree including the different derivation orders. In contrast to this, in a TAG it
is sufficient to check whether there is a derivation tree yielding the tree in question. I.e., one can
abstract away from the order of the derivations steps. E. g., in Fig. 1, no matter in which order
John and always are added, the derivation tree and consequently the derived tree are the same.

For MCTAG as well one would like to abstract away from differences with respect to derivation
order that do not make any difference concerning the substitutions and adjunctions that are
performed. One way to achieve this is to consider an MCTAG as a TAG G with additional
multicomponent tree sets (sets of initial and auxiliary trees from G) where certain derivation
trees in G are disallowed since they do not satisfy certain constraints. E. g., the derivation trees
in Fig. 3 are both possible in a TAG with the elementary trees from the MCTAG G M in Fig. 2.
The ﬁrst derivation tree is the one for the derivation from Fig.2. Since we know that only
does and seem are in one set and since does and seem are dominated by different daughters of
like (namely does and certain respectively), this is a possible TAG derivation tree in G M. The
second derivation tree is possible in the underlying TAG but not in G M: since seem adjoins into
does, it is not possible to add does and seem simultaneously to different nodes in an already
derived tree. With this characterization of MCTAG one gets rid of the problematic simultaneity
requirement. Instead, one characterizes in a descriptive way the properties of the derivation
trees licensed by the grammar. The advantage of this non—operational perspective is that one
needs not to check all possible derivation orders with respect to the simultaneity constraint.

In section 2, standard deﬁnitions of TAG and MCTAG are given. Then, in section 3, an altema—
tive descriptive characterization of MCTAG is proposed.

2 Standard deﬁnitions of TAG and MCTAG

We assume that the deﬁnitions of initial and auxiliary trees and the deﬁnitions of substitution
and adjunction are already known.3 a TAG (see, e.g., Vijay—Shanker, 1987) is a tuple G =

3For formal deﬁ nitions of initial and auxiliary trees with certain alphabets of nonterminal and terminal symbols
and also for formal deﬁ nitions of the operations substitution and adjunction see for example Kallmeyer (1999).

459

460

Kallmeyer

(I, A, N, T) with N abd T being ﬁnite sets of nonterrninals and terminals, and I and A being
ﬁnites sets of initial and auxiliary trees with nonterrninals N and terminals T.

In a TAG G = (I, A, N, T), a derivation step is deﬁned as follows: Let 7 and 7’ be ﬁnite trees.
7 2 7’ in G iff there is a node position p and a tree 70 E I U A4 such that 7’ = 7[p, 70].5 2 is
the reﬂexive transitive closure of 2. The tree language of G is then LT(G) := {7 ] there is an
oz 6 I such that oz 2 7 and all leaves in 7 have terminal labels}.

Each node address p in a derived tree points at a node belonging to some elementary tree 76. In
76 this node has some address pa. In the following we assume that the address pin a derivation
step 7 2 7’ of the node where the adjunction/substitution takes place is the corresponding tuple
(pg, 76). This is possible since each node in a derived tree in TAG belongs uniquely to one of
the elementary trees used in the course of the derivation. E. g., the address of the ADV node
in the derived tree in Fig. 1 is (1, always). Using these addresses we can deﬁne derivation
trees: A derivation tree is a tuple (./V‘, 8) of nodes and edges. ./V‘ is a ﬁnite set of instances of
elementary trees and 8 C N X N X lN* where IN* is the set of Gorn addresses. (The edges are
directed from the mother node to the daughter.)6 For a TAG G = (I, A, N, T) and a derivation
70 2 71 2 72 - -- 2 7,, in G, the derivation tree (./V‘, 8) is then as follows: 70 E ./V’, and for
all derivation steps 7, 2 7,-+1, 0 3 2' < n in the derivation such that there is a node position
(pe,7e) and a tree 7 E I U A with 7,-+1 = 7,-[(pe,7e),7]: 7 E ./V’ and (7e,7,pe) E 8. These are
all nodes and edges. In a derivation tree D = (./V’, 8), the parent relation is the relation between
mothers and daughters, 7313 := {(711, 712) ] there is a p E IN* such that (711, TL2, p) E 8 The
dominance relation is its reﬂexive transitive closure, DD := {(711, ng) ] n1, TL2 E ./V‘ and either
711 = in or there is a 713 such that (711,713) 6 7713 and (n3, 712) 6 DD}.

Finally, we deﬁne multicomponent TAG (MCTAG, Joshi, 1987; Weir, 1988): A multicompo-
nent TAG (MCTAG) is a tuple G = (I, A, N, T, A) such that: GTAG := (I, A, N, T) is a TAG,
and A Q P(ILJA) is a set of subsets of IUA, the set of elementary tree sets.’ 7 2 7’ is a multi-
component derivation step in G iff there is an instance {V1, . . . ,7,,} of an elementary tree set in
A and there are pairwise different node addresses p1, . . . ,p,, such that 7’ = 7[p1, 71] . . . ]p,,, 7,,]
where 7[p1, 71] . . . [pm 7,,] is the result of adding the 7, (1 3 2' 3 n) at node positions p, in 7.
As in TAG, a derivation starts from an initial tree and in the ﬁnal derived tree, all leaves must
be labelled by terminals.

In each MCTAG derivation step, the trees from a new elementary tree set are added to the
already derived tree. Since they are added to pairwise different nodes, one can as well add them
one after the other, i.e., each multicomponent derivation in an MCTAG G = (I, A, N, T, .4)
corresponds to a derivation in the TAG GTAG := (I, A, N, T). Let us deﬁne the TAG derivation
tree of such a multicomponent derivation as the corresponding derivation tree in GTAG.8

4To be precise, this must be an occurrence of an elementary tree. Henceforth, whenever we use an elementary
tree in a derivation we actually mean an occurrence of this elementary tree.

5As usual, we use the following notations for substitution and adjunction. For trees 7 and 7' and for node
positions p, 7[p, 7' ] is deﬁ ned as follows: If 7/ is (derived from) an initial tree with root label X E N and the node
at position pin 7 is a substitution node with label X, then 7]p, 7'] is the tree one obtains by substitution of 7' into
7 at node position p. If 7' is (derived from) an auxiliary tree with root label X E N and if the node at position p in
7 is an internal node with label X, then 7]p, 7' ] is the tree one obtains by adjunction of 7' to 7 at node position 10.
Otherwise 7]p, 7' ] is undeﬁ ned.

6Linear precedence is not needed in a derivation tree since it does not inﬂrence the result of the derivation.

7P(X) is the set of subsets of some set X.

8This TAG derivation tree is not the MCTAG derivation tree deﬁ ned in Weir (1988). The nodes of Weir’s
MCTAG derivation trees are labelled by sequences of elementary trees (i.e., by elementary tree sets) and each edge
stands for simultaneous adjunctions/substitutions of all elements of such a set.

A Descriptive Characterization of Multicomponent Tree Adjoining Grammars

3 A descriptive characterization of MCTAG

The TAG derivation trees for MCTAG derivations have certain properties resulting from the
requirement that the elements of elementary tree sets must be added simultaneously: Firstly,
if an elementary tree set is used, then all trees from this set must occur in the derivation tree.
Secondly, one tree from an elementary tree set cannot be substituted or adjoined into another
tree from the same set. Thirdly, different tree sets cannot be interleaved. More concretely there
cannot be 71 tree sets such a tree from the ﬁrst is added to a tree from the second, a tree from
the second to a tree from the third etc. (which amounts to adding ﬁrst the nth tree set, then the
(n — 1)th etc.), while at the same time a tree from the nth set is added to a tree from the ﬁrst
set. For non—local MCTAG, these are all constraints the TAG derivation tree needs to satisfy.

Lemma 1 LetG = (I,A, N, T, A) be anMCTAG, GTAG := (I,A, N, T). LetD = (./\/,8) be
a derivation tree in GTAG with the corresponding derived tree 25 being in L(GTAG).

D is a possible TAG derivation tree in G with t E L(G) Q3‘ D is such that

o (MC1) The root of D is an instance of an initial tree oz 6 I and all other nodes are instances
of trees from tree sets in A such that for all instances F of elementary tree sets from A and
forall71,72 E 1“: #71 E N, then 72 E ./V‘.

o (MC2) For all instances F of elementary tree sets from A and for all 71,72 6 F, 71 7E 72:
(71172) 65 DD-

0 (MC3) For all pairwise dyjferent instances F1, F2, . . . , Tn, n 2 2 of elementary tree sets from
.4: there are no 7?), 73) E F,-, 1 3 2' 3 n such that (79), 7;”) 6 DD and (79), 73-1)) 6 DD
for 2 3 2' 3 n.

The proof is given in Kallmeyer (2005). The lemma gives us a way to characterize non—local
MCTAG via the properties of the TAG derivation trees the grammar licenses and thereby to get
rid of the original simultaneity requirement: The corresponding properties are now captured
in the three constraints (MCl)—(MC3). Since these constraints need to hold only for the TAG
derivation trees that correspond to derived trees in the tree language, sub—derivation trees need
not satisfy them. In other words, 71 and 72 from the same tree set can be added at different
moments of the derivation as long as the ﬁnal TAG derivation tree satisﬁes (MCl)—(MC3).

We can now deﬁne tree—local and set—local TAG derivation trees by imposing further conditions:
Let G = (I, A, N, T, A) be an MCTAG. Let D = (./V‘, 8) be a TAG derivation tree for some
t E L((I, A, N,  D is a multicomponent derivation tree iff it satisﬁes (MCl)—(MC3). D is
tree—local iff for all instances {71, . . . ,7,,} of elementary tree sets with 71, . . . ,7,, E N: there
is one 7 such that (7, 71), . . . (7, 7”) E 7313. D is set—local iff for all instances {71, . . . ,7,,} of
elementary tree sets with 71, . . . ,7,, E N: there is an instance P of an elementary tree set such
that for all 1 3 2' 3 71 there is a 25,- E P with (t,-, 7,) E 7713.

The following lemma is immediate.

Lemma 2 Let G be an MCTAG.

0 G is a tree—local MCTAG Q?’ the set of trees generated by G, LT(G), is deﬁned as the set of
those trees that can be derived with a tree—local multicomponent TAG derivation tree in G.

0 G is a set—local MCTAG Q?‘ the set of trees generated by G, LT(G), is deﬁned as the set of
those trees that can be derived with a set—local multicomponent TAG derivation tree in G.

461

462

Kallmeyer

4 Conclusion

MCTAG is an extension of TAG that has been shown to be useful for many natural language
applications. Therefore a profound understanding of the mathematical properties of the formal-
ism is indispensable. In a TAG, the central structure of a derivation, the derivation tree abstracts
away from the order of derivation steps as long as the result of the derivation is the same: in the
derivation tree, the adjunction/substitution operations corresponding to different daughters of
the same node can be performed in any order without inﬂuencing the derived tree one obtains.
Consequently, the derivation trees are unordered with respect to linear precedence.

This way of abstracting away from the concrete order of derivation steps is not possible with
the classical MCTAG deﬁnition. The deﬁnition is problematic since it refers to the process
of the derivation itself: a simultaneity constraint must be respected concerning the way the
members of the elementary tree sets are added. Looking only at the result a derivation (i.e., the
derived tree and the derivation tree), this simultaneity is no longer visible and therefore cannot
be checked. I.e., this way of characterizing MCTAG does not allow to abstract away from the
concrete order of derivation. Therefore, in this paper, we propose an alternative deﬁnition of
MCTAG that characterizes the trees in the tree language of an MCTAG via the properties of
the TAG derivation trees the MCTAG licences. In this way, in MCTAG like in TAG, the TAG
derivation tree can be considered being the central structure of the formalism and the desired
abstraction can be obtained.

Apart from the fact that this descriptive characterization of MCTAG helps to understand the
mathematical properties of the grammar formalism, it probably also has an impact on pars-
ing. Parsing can be done independently from concrete derivations since the simultaneity con-
straint need not be checked. Only the outcoming derivation trees need to be checked for well-
formedness in the sense of (MC1)-(MC3). However, we do not pursue this further here and we
leave the subject for future research.

Références

Joshi, A. K.: 1987. An introduction to Tree Adjoining Grammars. in A. Manaster—Ramer (ed.), Mathe-
matics of Language. John Benjamins. Amsterdam. pp. 87-114.

Joshi, A. K., Levy, L. S. and Takahashi, M. 1975. Tree Adjunct Grammars. Journal of Computer and
System Science 10, 136-163.

Kallmeyer, L.: 1999. Tree Description Grammars and Underspeciﬁ ed Representations. PhD thesis. Uni-
versitat Tiibingen. Technical Report IRCS—99—08 at the Institute for Research in Cognitive Science,
Philadelphia.

Kallmeyer, L. 2005. Tree—local multicomponent tree adjoining grammars with shared nodes. Computa-
tional Linguistics. To appear.

Kroch, A. S. and Joshi, A. K.: 1987. Analyzing extraposition in a tree adjoining grammar. in G. J.
Huck and A. E. Ojeda (eds), Syntax and Semantics.‘ Discontinuous Constituency. Academic Press, Inc..
pp. 107-149.

Vijay—Shanker, K.: 1987. A Study of Tree Adjoining Grammars. PhD thesis. University of Pennsylvania.

Weir, D. J .: 1988. Characterizing mildly context—sensitive grammar formalisms. PhD thesis. University
of Pennsylvania.

