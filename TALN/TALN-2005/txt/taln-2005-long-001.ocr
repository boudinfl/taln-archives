TALN 2005, Dourdan, 6-10 juin 2005

Comment obtenir plus des Méta-Grammaires

Francois Thomasset, Eric Villemonte de la Clergerie
ATOLL - INRIA
Domaine de Voluceau

Rocquencourt, B.P. 105, 78153 Le Chesnay (France)
{Francois.Thomasset,Eric.De_La_Clergerie}@inria.fr

Mots-clefs I Méta-grammaires, Analyse Syntaxique, TAG, 'TIG

Keywords: Meta-grammars, Parsing, TAG, 'TIG

Résumé Cet article présente un environnement de développement pour les méta-grammaires
(MG), utilisé pour concevoir rapidement une grammaire d’arbres adjoints (TAG) du francais a
large couverture et néanmoins tres compacte, grace a des factorisations d’arbres. Exploitant
les fonctionnalités foumies par le systeme DYALOG, cette grammaire a permis de construire
un analyseur syntaxique hybride TAGfTIG utilisé dans le cadre de la campagne d’évaluation
syntaxique EASY.

Abstract This paper presents a development environment for Meta-Grammars (MG),
used to design, in a short period, a wide coverage but still very compact Tree Adjoining Gram-
mar (TAG) for French, thanks to tree factorizations. Exploiting the functionalities provided by
DYALOG system, an hybrid TAG/'TIG parser was compiled from the grammar and used for the
EASY parsing evaluation campaign.

Francois Thomasset, Eric Villemonte de la Clergerie

1 Introduction

Les meta-grammaires (MG) (Candito, 1999) renouvellent les methodes de conception des gram-
maires, en introduisant un niveau plus abstrait de description a l’aide de contraintes elemen-
taires, regroupees en classes relativement simples, elles-memes inserees dans une hierarchie
multiple d’heritage. Une phase de compilation permet ensuite de croiser ces classes et d’utiliser
les contraintes pour deriver des structures grammaticales pour un formalisme cible comme les
grammaires d’arbres adjoints (TAG) ou les grammaires fonctionnelles lexicales (LFG) (Gaiffe
et al., 2003; Clement & Kinyon, 2003). Les descriptions deviennent plus modulaires et per-
mettent la factorisation d’ensembles de contraintes communs a plusieurs phenomenes syn-
taxiques (comme des regles d’accord). L’heritage permet d’afﬁner progressivement la descrip-
tion d’un phenomene, par exemple pour la structure verbale. Il rend aussi raisonnable l’espoir
qu’une partie de l’organisation en classes ainsi qu’une partie du contenu des classes puissent
étre conservees d’une langue a une autre et d’un formalisme cible a un autre.

Ces raisons nous ont conduit a choisir les meta-grammaires pour concevoir rapidement un ana-
lyseur syntaxique hybride TAGfTIG du frangais a large couverture, analyseur qui a ﬁnalement
pu étre deploye dans le cadre de la campagne EASY d’evaluation d’analyseurs syntaxiques.
Neanmoins, nos premieres tentatives ont montre certaines limites dans les capacites descriptives
des MG mais ont egalement suggere des possibilites pour obtenir a peu de frais des grammaires
TAG beaucoup plus compactes. En effet, il est bien connu que les grammaires TAG a large
couverture ont tendance a exploser en nombre d’arbres, avec plusieurs milliers ou dizaines de
milliers de (schemas d’) arbres (Abeille, 2002), ce qui rend tres difﬁcile l’analyse, meme en
exploitant des techniques de ﬁltrage par les mots de la chaine d’entree. Les alternatives propo-
sees passent par des techniques d’analyse des arbres pour retrouver et factoriser leurs parties
communes (Carroll et al., 1998) ou par la description de schemas de parcours multiples dans
les arbres (Harbusch & Woch, 2004). Les meta-grammaires s’appuyant sur des descriptions
factorisees nous permettent d’aller plus facilement dans la direction de tels arbres factorisés.

Le systeme DYALOG que nous utilisons pour la construction d’analyseurs syntaxiques peut
gerer de tels arbres factorises (Section 2). En consequence, en parallele avec la conception
d’une meta-grammaire du frangais, nous avons etendu les possibilites descriptives des MG et
les possibilites generatives de notre compilateur de MG (Section 3). Nous avons egalement
complete notre environnement de travail pour les MG. La section 4 foumit quelques elements
d’information sur notre meta-grammaire et sur la grammaire resultante, en particulier au niveau
de la compacite. Enﬁn, la section 5 foumit quelques resultats preliminaires pour notre analyseur.

2 Analyseurs hybrides TAG/TIG avec le systéme DYALOG

Le systeme DYALOG (Villemonte de la Clergerie, 2002) foumit un environnement de compi-
lation et d’eXecution d’analyseurs syntaxiques tabulaires (a la Earley) offrant la puissance d’un
langage de programmation en logique. Il couvre divers formalismes syntaxiques, dont ceux
utilises dans notre experience, a savoir les Grammaires d’Arbres Adjoints (TAG) et les Gram-
maires d’Insertion d’Arbres ('TIG).

Les TAG (J oshi, 1987) sont forrnees d’arbres partiels d’analyse combinables par substitution et
adj onction. Un noeud feuille etiquete par un non-terrninal peut étre substitue par un arbre initial.
Une adjonction insere le contenu d’un arbre auxiliaire B au niveau d’un noeud N, le sous-arbre

1
2
3
4
5
6
7
8
9
10
11

12
13

Comment obtenir plus des Méta-Grammaires

de racine N étant rattaché au niveau du pied fg de B. Dans les FTAG, les noeuds sont décorés
par une paire d’attributs top et bot, généralement exprimés comme des structures de traits.

Les TIG (Schabes & Waters, 1995) sont une variante des TAG restreignant les arbres auxiliaires
de sorte qu’ils ne puissent s’insérer qu’a droite ou a gauche du noeud d’adjonction. Cette condi-
tion implique en particulier que les arbres auxiliaires aient leur dorsale (c.a.d. le chemin de la
racine au pied) comme frontiere gauche ou droite. L’intérét majeur des 'TIG provient du fait
qu’elles sont analysables, comme les CFG, avec une complexité en O(n3) alors que les TAG le
sont en O(n6) ou n denote la longueur de la chaine d’entrée. De plus, la plupart des grammaires
TAG sont essentiellement 'TIG et il est en fait possible de construire des analyseurs syntaxiques
hybrides TAGfTIG (Alonso & Diaz, 2003). DYALOG peut analyser une grammaire TAG pour
identiﬁer les parties TIG aﬁn de construire de tels analyseurs hybrides TAGfTIG1.

Pour les différents formalismes syntaxiques qu’il couvre, le systeme DYALOG permet, a l’in-
térieur des structures grammaticales, l’usage d’0pe’rateurs réguliers tels que la disjonction,
l’étoile de Kleene et l’entrelacement, ce dernier permettant d’indiquer un ordre libre entre
des séquences de constituants (Nederhof et al., 2003). Ces opérateurs ne changent pas le for-
malisme sous-jacent car ils peuvent en théorie étre expansés et éliminés en introduisant de
nouvelles structures grammaticales (arbres ou productions) et/ou de nouveaux non-terminaux.
Néanmoins, le taux d’expansion peut étre exponentiel en le nombre d’occurrences de ces opéra-
teurs. Leur utilisation permet donc d’obtenir des grammaires beaucoup plus compactes et plus
efﬁcaces, car ces opérateurs sont utilisés sans expansion. D’autre part, il est a noter que l’usage
de ces opérateurs rend plus naturel les foréts de dérivations en évitant l’usage de non-terminaux
artiﬁciels.

3 Etendre les MetaGrammaires

class collect_real_subject_canonical {
<: collect_real_subject;
$arg.extracted value(~cleft);
S >> VSubj; VSubj < V; V >> postsubj; VMod < postsubj;
node postsubj: [cat:N2,id:subject, type:subst, top:[wh:—,sat:+]];

— postsubj zzagreement; postsubj = postsubj::N;

postsubj =>
node(Infl).bot.inV = value(+),
$arg.extracted = value (—) , $arg.real = value(N2),
desc. extraction = value(~—),

n0de(V) . top .mode=value(~ infinitive I imperative I gerundive I participle );
postsubj => node(Infl).bot.inV value(~+);

~

}
Listing 1 — Exemple de classe

Le listing 1 illustre une classe ﬁlle collect_real_subj ect_canonical héritant de la
classe parente co 1 l e ct_r e a l_s ub j e ct. Cette derniere décrit 1’ ensemble des réalisations
possibles du sujet et est utilisée comme modele pour les diverses réalisations du sujet en position
canonique ou en extraction clivéez. La classe ﬁlle complete la classe parente pour le cas cano-

1Il est a noter que cette analyse ne garantit pas touj ours l’équiValence entre analyseurs TAG et analyseurs
hybrides TAG/TIG suite aux decorations et a des gestions différentes de l’adj onction, a savoir adj onction «chainée»
(sur les racines des arbres auxiliaires) pour les TAG contre adjonction multiple pour les TIG.

2Type << C’est de travailler qui me fatigue ! ».

Francois Thomasset, Eric Villemonte de la Clergerie

nique, en précisant la position du sujet (sous S et devant le noyau verbal V) et en introduisant la
notion de sujet post-verbal uniquement réalisable par un groupe nominal (N2).

Plus formellement, les méta-grammaires permettent une description syntaxique éclatée a l’aide
de contraintes élémentaires regroupées en classes. Une classe peut hériter des contraintes de
plusieurs classes parentes (<2, ligne 2) et peut également foumir une ressource (+r) ou requérir
une ressource (—r, 1. 6).

Les contraintes peuvent porter sur les noeuds (1. 4 et 6) incluant l’égalité =, la précédence <
ainsi que les dominances immédiates >> et indirectes >>+. Les contraintes peuvent aussi porter
sur les décorations des noeuds (1. 5) ou de la classe elle-méme (desc, 1. 10). Les décorations
sont exprimées comme des structures de traits (1. 5) avec possibilité d’utiliser des disjonctions
I et négations ~ sur des valeurs atomiques (1. ll) ainsi que des variables ($arg). Les contraintes
sur les décorations s’eXpriment soit directement soit au travers d’équations entre chemins de
traits ancrés sur des noeuds (1. 8), sur la classe elle-méme (desc, ligne 10) ou sur des variables
(1. 9). Des macros peuvent étre utilisées pour nommer des valeurs ou des chemins. Enﬁn, il est
possible de faire porter des contraintes sur le pere d’un noeud N avec la notation « father (N)».

L’ objectif du compilateur de méta-grammaire3 est alors de croiser, par point ﬁxe, les classes
terminales (c.a.d. sans descendants) de maniere a obtenir des classes neutres pour lesquelles
chaque ressource fournie est consommée et réciproquement. Les contraintes sont accumulées
lors des croisements et seules sont conservées les classes dont les contraintes accumulées, pre-
nant en compte leurs conséquences logiques, sont satisﬁables4 . Les contraintes des classes
neutres survivantes sont ensuite exploitées pour produire les structures grammaticales mini-
males, en l’occurrence des arbres pour les TAG.

Dans la formalisation standard des MG (Candito, 1999), une ressource peut étre neutralisée
au plus une fois pour produire une classe neutre. Cette restriction amene a dupliquer certaines
classes pour nommer différemment la méme ressource. Ainsi, pour exprimer qu’une classe
décrivant les verbes a besoin de 2 arguments verbaux, il faut dupliquer une partie importante
de la hiérarchie des classes pour deux ressources similaires —vargl et —varg2. Pour lever
cette limitation, nous avons introduit la notion d’espace de noms et rompu la symétrie entre
foumisseurs et consommateurs : une ressource peut maintenant étre demandée dans un certain
espace de nom ns (ns = postsub dans —postsubj ::agreement, 1. 6) et lors d’un croisement avec
une classe foumisseuse C (ici, fournissant +agreement), les noeuds, variables et besoins de C
sont alors plongés dans l’espace de nom ns (ici postsubj ). Les espaces de noms permettent un
usage beaucoup plus intensif du mécanisme de ressources et une bien meilleure factorisation
des méta-grammaires. Les MG sont alors moins redondantes et plus faciles a maintenir.

Les décorations portées par les noeuds et la classe sont libres mais certaines ont néanmoins un
statut spécial par rapport a la génération des arbres TAG. Pour les noeuds, on peut citer les traits
cat pour la catégorie syntaxique, type pour le type de noeud, lex pour une valeur lexicale,
adj pour indiquer le statut du noeud pour l’adjonction, top et bot comme arguments. Pour
les classes, le trait ht indique l’hypertag qui sera associé aux arbres pour permettre l’ancrage
avec les entrées lexicales (voir Section 4).

La possibilité d’engendrer des arbresfactorisés résulte de divers mécanismes. En premier lieu, a
coté des types standards de noeuds, il existe les types spéciaux alternative et sequence.
Le trait optional permet de rendre optionnel un noeud tandis que le trait star permet de

3DéVeloppé sous le systéme DYALOG.
4Par exemple, le compilateur Vériﬁe qu’un noeud ne précéde pas son pére.

Comment obtenir plus des Meta-Grammaires

rendre un noeud repetable, correspondant a une etoile de Kleene5. Enﬁn, lors de l’enumera-
tion des arbres Ininimaux veriﬁant un ensemble de contraintes, le compilateur utilise l’opera-
teur d’entrelacement (##) pour rendre compte de sous-speciﬁcation de precedence entre noeuds
freres. Ainsi, les contraintes «N >> N_1; N>> N_2; N >> N_3; N_1 < N_2» produisent le fragment
d’arbre N ((N1, N2)##N3) indiquant que N3 se positionne librement (avant, au milieu, apres)
par rapport a la sequence N1, N2. Pour favoriser l’obtention d’arbres TIG, le compilateur evite,
dans la mesure du possible, d’utiliser l’operateur d’entrelacement quand il couvre un noeud
pied comme dans Rg(N##Fﬁ). Dans ce cas, les differentes possibilites d’ordonnancement
des noeuds sont examinees pour produire des arbres que l’on espere etre TIG. Il est egalement
possible d’assigner un rang a un noeud avec le trait rank et les valeurs first et last.

L’ optionnalite foumie par l’emploi du trait optional n’est pas assez ﬁne en pratique. L’ em-
ploi de gardes permet d’imposer des conditions a l’existence d’un noeud (1. 7) ou a sa non-
existence (1. 12). Ces gardes s’expriment comme des expressions booleennes sur des equations
entre chemins. Le compilateur de MG veriﬁe la satisﬁabilite de ces gardes, eliminant les alter-
natives conduisant a des echecs et les equations devenues tautologiquement vraies. Les gardes
restantes sont alors emises dans les arbres TAG pour étre evaluees pendant l’analyse.

Outre les extensions des meta-grammaires et du compilateur, le travail de description a ete fa-
cilite par le deploiement d’un environnement de travail adapte pour pouvoir aisement visualiser
et tester. En premier lieu, nous disposons d’un mode Emacs pour les MG interagissant avec
un outil graphique de visualisation de la hierarchie des classes. Par ailleurs, la chaine de trai-
tement allant des meta-grammaires aux analyseurs produit des representations intermediaires
sous formats XML6 pouvant etre visualisees, en particulier sous forme HTML pour les arbres,
decorations et gardes. Les foréts de derivations produites par notre analyseur sont egalement
convertibles en XML et visualisables sous differentes formes, en particulier sous forme de de-
pendances. L’utilisation d’un serveur d’analyseurs7 couple a divers scripts facilite la conduite
de tests sur corpus, pour mesurer divers parametres (temps d’analyse, taux d’ambigui'te, taux
de couverture, ...) et indiquer les differences entre 2 series de tests. Enﬁn, il est possible de
desactiver des classes8 pour deboguer ou, a terme, pour obtenir des grammaires specialisees.
Ces diverses possibilites permettent un suivi ﬁn des performances de la grammaire engendree.

4 Anatomie de la grammaire produite

Grace aux resultats decrits precedemment, nous avons pu rapidement concevoir une meta-
grammaire du francais engendrant une grammaire tres compacte, comme le montrent les di-
verses tables de la ﬁgure 1. Ainsi, la grammaire ne comporte que 133 arbres, incluant 7 arbres
construits manuellement. Elle est essentiellement TIG avec seulement 12 arbres auxiliaires en-
veloppants principalement utilises pour gerer les diverses formes de guillemets9. La grammaire
n’est pas totalement lexicalisee, avec un nombre assez important d’arbres sans ancre (mais

5A terme, la valeur du trait sera exploitee pour pouvoir speciﬁer un intervalle de repetition.

5Ces formats XML s’appuient de plus sur les propositions de normalisation, a savoir TAGML pour les TAG et
FSR pour les structures de traits.

7Accessible en ligne sur http : //atoll . inria . fr/parserdemo.

811 est en fait possible d’activer ou désactiver de maniere plus ﬁne, en exprimant un ensemble de contraintes
invalidant une classe.

9Pour etre plus precis, ces arbres sont uniquement utilises pour les guillemets autour de groupes, ceux autour
de mots simples sont geres avant analyse syntaxique. Le traitement propose est clairement une source d’inefﬁ—
cacite pouvant peut—etre etre gere autrement. Par ailleurs, il est a noter que le compilateur MG a produit plus

Francois Thomasset, Eric Villemonte de la Clergerie

possedant eventuellement des noeuds lexicaux), essentiellement utilises pour des adjonctions1°.
Les arbres ancres le sont surtout par les verbes mais ils ne representent qu’une inﬁme fraction
d’un ensemble equivalent d’arbres TAG non factorises. On voit que 7 arbres sufﬁsent a cou-
vrir un ensemble consequent de constructions verbales « canoniques ». Ces resultats decoulent
d’un usage intensif de la factorisation dans les arbres, en particulier controlee par des gardes.
L’ etoile de Kleene est uniquement utilisee pour gerer la coordination tandis que les entrelace-
ments proviennent essentiellement d’un ordre libre entre arguments du verbe (incluant le sujet
post-verbal). Les arbres factorises obtenus peuvent étre relativement consequents (jusqu’a 46
noeuds) mais la ﬁgure l(e) montre neanmoins que la plupart des arbres restent simples.

Classes Arbres Init. Aux. Aux.Env. Aux. Gauches Aux.Droits

191 l33=l26+7 44 89 12 29 48
(a) Distribution par types d’ arbres

non ancrés v coo adv adj csu prep aux np nc det pro
50 27 12 10 8 4 3 2 2 1 1 1

(b) Distribution par ancres

Canonique Extr. Actif Passif Quest. Rel. Clivées Coord Adv Adj
7 19 19 6 4 4 11 12 14 11

(c) Distribution par phenomenes syntaxiques

Gardes Disjonctions Entrelacement Etoiles de Kleene
820 92 26 13

(d) Distri Jution des factorisations

35

I arbres

arbres

 

13 5 7 9111315171921232527293133353739414345
noeuds

(e) Distribution des tailles d’arbres

FIG. 1 — Anatomie de la grammaire

La complexite des arbres factorises est illustree par la ﬁgure 2 representant une vue simpliﬁee
d’un des arbres verbaux canoniques pour la voix active. Cet arbre # l l l resulte du croisement
de 25 classes terminales, comprend 43 noeuds plus 3 noeuds d’altematives et 1 noeud d’entre-
lacement, et est controle par 35 gardes“. Il est difﬁcile d’obtenir le taux exact de factorisation
atteint, mais voici neanmoins quelques parametres indicatifs pour essayer de l’estimer :

d’arbres auxiliaires que necessaire pour eviter d’avoir des pseudo—arbres enveloppants et que certains phenomenes
syntaxiques pouvant produire des arbres enveloppants ont ete brides pour obtenir des arbres TIG.

1°Cette non lexicalisation partielle est guidee par des raisons pragmatiques (limitation du nombre d’a1’ores) mais
egalement linguistiques. Elle ne remet pas en cause la notion de domaine de localite semantique des arbres TAG. Au
contraire, l’ accroche d’une participiale sur un nom, par exemple, est non lexicalisee car distincte (semantiquement)
de la construction d’une participiale.

“Un tel arbre avec toutes ses gardes et decorations serait extremement difﬁcile a ecrire a la main (2171 lignes
de XML TAGML), ce qui justiﬁe d’autant plus le recours a une meta-grammaire.

Comment obtenir plus des Méta-Grammaires

s
VMod / \ V
i VMod / \ ##

//‘xx 1 // \

<>cln 1N2 LCS LS LPP V1 1N2 VMod VMod
//

Inﬂ I <>advneg
\

<>clneg <>advneg <>clr clseq clseq <>advneg

I
/ l \ / 1 \
<>cld ‘Q <>cld EA <>clg <>$/ <>cln A CS LPP 1N2 icomp LPP

<>prep Q <>csu LS

FIG. 2 — Arbre #111 (simpliﬁé)

subjreal = 5 choix de réalisations pour un sujet pré-verbal : cln (clitique nominatif), N2
(groupe nominal), CS (phrase), S (inﬁnitive), PP (inﬁnitive introduite par « d’ »);

subjpos choix entre «pas de sujet», «sujet pré-verbal», «sujet pré-verbal et clitique post-
verbal », « clitique post-verbal », « sujet post-verbal »;

argspos = 3 entrelacements entre 2 arguments post-verbaux et un sujet post-verbal, tous op-
tionnels;

clseqpos = X choix entre 2 sequences de clitiques pré ou post verbaux optionnels : cld, cla,
cld, cll, clg;

clopt = 2 clitiques pré-verbaux optionnels : clneg («ne »), clr (réﬂexif);

neg = 3 positions de négation (advneg « que » sur les arguments verbaux ou advneg pré-verbal
pour les inﬁnitives) ;

arglreal = 3 réalisations possibles pour argl : N2 (objet), comp (attribut), PP (groupe prépo-
sitionnel nominal, adjectival, inﬁnitif, complétif, ...);

arg2rea1 = 2 réalisations possibles (au moins) pour arg2 (CS,PP);

Divers calculs approchés donnent un taux de factorisation entre 10 000 et 100 000, sans meme
prendre completement en compte les disjonctions apportées par certaines gardes. Ce taux d’ex-
pansion astronomique est bien entendu tres largement au-dessus de la réalité si on prend mieux
en compte la satisﬁabilité des gardes. Néanmoins, méme un taux d’expansion plus réaliste de
l’ordre de 100 ou 1000 montre l’intérét des ces structures factorisées, difﬁcilement construc-
tibles manuellement sans le support apporté par les méta-grammaires. De plus, les expériences
menées ont montré que l’analyse reste efﬁcace méme avec des structures aussi complexes”.

Un arbre comme l’arbre #111 couvre de fait de tres nombreuses constructions syntaxiques,
bien plus en général que celles autorisées pour un mot donné. L’ancrage entre mots et arbres,
ainsi que la sélection des constructions autorisées pour un mot se fait par uniﬁcation entre des
structures de traits appelées hypertag associés aux arbres et aux mots (Kinyon, 2000)”. Ainsi
la ﬁgure 3(a) donne l’hypertag produit pour l’arbre #1 1 1 tandis que la ﬁgure 3(b) montre un
des hypertags mentionnés pour « promettre » dans notre lexique. Parmi toutes les constructions
possibles pour l’arbre #111, l’uniﬁcation sélectionne uniquement les constructions verbales
canoniques autorisant un objet optionnel et un groupe prépositionnel optionnel introduit par

12En général, les mauvaises performances résultent plutot d’arbres sous-contraints faisant exploser le nombre
d’analyses.

“Ce mécanisme d’ancrage par hypertags rend caduque la notion trop rigide de famille d’arbres présente dans
l’architecture XTAG (Doran et al., 1994).

Francois Thomasset, Eric Villemonte de la Clergerie

«a»14. Le lien entre hypertag H et des constructions syntaxiques se fait grace aux variables
présentes dans H et dans les décorations des noeuds ou dans les équations des gardes.

- "extracted - - kind subj|-
pcas — _ _
_real - I CS |N2 | PP | S | cln | prel | pri argl [kind ob] | scomp | -1
"extracted - pcas
kind — | acomp | obj |prepacomp | prepobj kind prepobj |-

1 r 2

arg pcas +|—|apres|a|aVec|de|par|... arg pcas 3|-

_real —|CS|N|N2|PP|S|V|adj|cla|... fl
re —
'extracted -
b ttr
kind — | prepacomp | prepobj | preps— ( )Pour«prome 6»
com repvcomp scomp

argz Vcoliip  vghcomp l l
pcas +|—|apres|a|...
_real —|CS|N|N2|PP|S|...

cat V
di athe s i s active

refl

(a) pour l’a1bre #111

FIG. 3 — Hypertags

5 Experiences

L’ analyseur hybride TAGfI‘IG compile a partir de la grammaire a été testé sur divers corpus tout
au long de la phase de développement et pendant la campagne EASY. Les analyses s’effectuent
sur des treillis de mots (pour gérer les ambiguités morpho-syntaxiques et les mots inconnus) en
s’appuyant sur un lexique de plus de 400 000 formes ﬂéchies fournissant des informations de
sous-categorisation pour les verbes. Nous n’avons pas utilisé d’étiqueteur morpho-syntaxique.
L’ analyseur s’appuie sur une stratégie d’analyse tabulaire descendante gauche-droite et peut
rendre soit une analyse complete de la phrase soit un ensemble d’analyses partielles couvrant
au Inieux l’entrée. Les analyses sont extraites sous forme de foréts partagées de derivations,
convertibles en foréts partagées de dépendances. Ces foréts nous servent de base pour calculer
un taux moyen d ’ambigu'z'te’ par mot oz déﬁni comme le nombre moyen d’arcs de dépendances

atteignant un mot moins un15 .
Corpus #phrases % couv. temps moyen (s) temps médian (s) ambigu'1'té
EUROTRA / OLD 334 95.80 / 89.22 1.81 / 0.70 1.27 / 0.54 0.7 / 0.3
TSNLP / OLD 1661 93.38 / 86.15 0.72 / 0.43 0.56 / 0.33 0.4/0.2
MD10x20/OLD 5000 63.18 /43.06 2.85/ 1.97 1.80/ 1.30 0.8/0.5
EASY 34438 42.45 / - 5.55 / - 1.61 / - 0.6/ -

TAB. 1 — Résultats (avec un timeout de 100s)

“La selection des constructions avec une complétive (s comp) se fait avec un autre arbre.
15Pour une analyse non—ambigue, tout mot sauf la << tete » de la phrase est atteignable par une seule dépendance.
Le nombre maximal d’analyses pour un taux d’ambigu'1'té 04 et une phrase de longueur 11 est en O((1 + 04) 

Comment obtenir plus des Méta-Grarnrnaires

La table 1 foumit des résultats d’analyses completes de 2 versions successives de l’analyseur
pour les jeux de tests EUROTRA et TSNLP ainsi que pour MD10x20, un corpus joumalistique
de phrases de longueur comprise er1tre 10 et 20 extraites (na'1'vement) du «Monde Diploma-
tique » et pour le corpus foumi pour la campagne EASY (couvrant divers styles : joumalistique,
littéraire, oral, mail, médical, questions/réponses). Les résultats de couverture sont excellents
sur les jeux de tests, en particulier a cause d’un vocabulaire relativement restreint pour lequel
notre lexique est complet. Sur le corpus MD10x20 qui est relativement homogene et pour le-
quel un minimum d’adaptation du lexique a été effectué, les résultats restent honorables. Les
résultats sont moins bons pour EASY qui est tres hétérogenew. Ce manque de couverture tra-
duit bien évidemment des manques dans la méta-grammaire, en particulier sur les coordinations
complexes, les superlatives et les comparatives, ainsi que sur les cadres de sous-categorisation
pour les categories non-verbales et sur certaines articulations de phrase. Cependant, le manque
de couverture provient également de notre lexique qui est tres récent et ne foumit pas nécessai-
rement des informations syntaxiques completes voire correctes pour tous les mots”.

La table 1 foumit aussi des résultats pour une version antérieure de l’analyseur (OLD) qui illus-
trent l’importance du suivi constant des grammaires. En effet, nous avons effectué, sans réel
controle, des modiﬁcations de demiere minute avant EASY pour essayer d’améliorer la cou-
verture (extension des clivées, généralisation abusive des incises, articulation des phrases par la
ponctuation, gestion na'1've des verbes support, . . . ). Ces modiﬁcations ont bien augmenté la cou-
verture, mais, mal controlées, elles ont fait doubler les taux d’ambigu'1'té et les temps d’analyse
(avec en premiere approximation, une relation linéaire entre temps et taux d’ambigu'1'té).

Enﬁn, sans corpus de référence, il nous est impossible pour l’instant de foumir des résultats
concemant la précision des analyses (completes ou partielles). Nous avons effectué de nom-
breuses vériﬁcations manuelles sur les vues graphiques des foréts mais attendons maintenant
les résultats de la campagne EASY pour avancer.

6 Conclusion

Notre méta-grammaire est encore loin d’étre complete mais l’expérience montre néanmoins que
les méta-grammaires rendent possible le développement rapide de grammaires a relativement
large couverture. Il est a noter que ce développement a été en partie freiné par le manque d’in-
formation dans le lexique, en particulier pour avoir une discrimination plus ﬁne des adverbes et
pour traiter les sous-catégorisations des adjectifs et des noms.

Les extensions apportées aux méta-grammaires ainsi que les améliorations de notre environ-
nement de travail se sont révélées tres utiles. Néanmoins, concevoir une méta-grammaire reste
un exercice délicat demandant une solide expertise linguistique et une utilisation systématique
d’outils de tests et de visualisation. I1 nous semble aussi souhaitable d’ajouter de nouveaux types
de contraintes, meme si elles peuvent s’exprimer a l’aide des contraintes actuelles, comme des
contraintes d’exclusion entre noeuds, des contraintes de cardinalité pour exprimer des regles to-
pologiques, ou des contraintes de rangs exprimables dans les gardes. Pour aller dans le sens de
grammaires paramétrables (autorisant divers niveaux de langue) ou pour aller vers des forma-
lismes cibles distincts, il serait utile de regrouper les contraintes par contextes a l’intérieur des

15On peut aussi préciser que les phrases pour EASY sont en moyenne plus longues.
17Mais nous exploitons progressivement les résultats d’analyse pour repérer et corriger les entrées incorrectes
ou incomplétes.

Francois Thomasset, Eric Villemonte de la Clergerie

classes de maniere a pouvoir plus facilement n’en exploiter qu’une partie lors de la compilation
(en sélectionnant un ensemble de contextes).

La factorisation des arbres, rendue possible par l’emploi de gardes et d’opérateurs réguliers,
nous semble une approche générique extrémement prometteuse pour controler l’explosion com-
binatoire du nombre de structures grammaticales produites, permettant ainsi de construire des
analyseurs syntaxiques plus efﬁcaces. Les arbres factorisés peuvent étre complexes mais leur
description au niveau de la méta-grammaire reste simple.

Le formalisme cible TAG que nous avons utilisé est judicieux mais néanmoins pas sufﬁsamment
puissant pour exprimer élégamment certains phénomenes syntaxiques comme les incises ou
certaines extractions (comme l’extraction de génitifs dans « de qui lis-tu un livre »). Nous envi-
sageons d’évoluer vers des formalismes cibles permettant d’exprimer plus de sous-spéciﬁcation
dans les arbres, comme par exemple les Local Multi Component TAG, avec l’ambition, a terme,
de réduire la distance entre les méta-grammaires et le formalisme cible.

Les outils mentionnés dans cet article ainsi que la méta-grammaire sont librement disponiblesls.

Références

ABEILLE A. (2002). Une grammaire électronique dufrancais. Paris 2 CNRS Editions.

ALONSO M. A. & DIAZ V. J. (2003). Variants of mixed parsing of TAG and TIG. Traitement Automa-
tique des Langues (T.A.L.), 44(3), 41-65.

CANDITO M.-H. (1999). Organisation modulaire et paramétrable de grammaires électroniques lexica-
lisées. PhD thesis, Université Paris 7.

CARROLL J ., NICOLOV N., SMETS M., SHAUMYAN O. & WEIR D. (1998). Grammar compaction and
computation sharing in automata-based parsing. In Proceedings of Tabulation in Parsing and Deduction
(TAPD’98), p. 16-25, Paris (FRANCE).

CLEMENT L. & KINYON A. (2003). Generating parallel multilingual LFG-TAG grammars from a
metaGrammar. In Proc. ofACL’03.

DORAN C., EGEDI D., HOCKEY B. A., SRINIVAS B. & ZAIDEL M. (1994). XTAG system — a
wide coverage grammar for English. In Proc. of the 15th International Conference on Computational
Linguistics (COLING’94), p. 922-928, Kyoto, Japan.

GAIFFE B., CRABBE B. & ROUSSANALY A. (2003). Représentation et gestion du lexique d’une gram-
maire d’arbres adjoints. Traitement Automatique des Langues (T.A.L.), 44(3).

HARBUSCH K. & WOCH J . (2004). Integrated natural language generation with schema-tree adjoining
grammars. In C. HABEL & E. THOMAS PECHMANN, Eds., Language Production. Mouton De Gruyter.
J OSHI A. K. (1987). An introduction to tree adjoining grammars. In A. MANASTER-RAMER, Ed.,
Mathematics of Language, p. 87-115. Amsterdam/Philadelphia 2 John Benjamins Publishing Co.
KINYON A. (2000). Hypertags. In Proc. of COLING, p. 446-452.

NEDERHOF M.-J., SATTA G. & SHIEBER S. (2003). Partially ordered multiset context-free grammars
and free-word-order parsing. In In 8th International Workshop on Parsing Technologies (IWPT’03), p.
171-182.

SCHABES Y. & WATERS R. C. (1995). Tree insertion grammar 2 a cubic-time, parsable formalism that
lexicalizes context-free grammar without changing the trees produced. Fuzzy Sets Syst., 76(3), 309-317.

VILLEMONTE DE LA CLERGERIE E. (2002). Construire des analyseurs avec DyALog. In Proc. of
TALN’02.

18Sur http : //atoll . inria . fr/packages/packages . html.

