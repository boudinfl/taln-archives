TALN 2005, Dourdan, 6-10 juin 2005

Comment obtenir plus des Meta-Grammaires

Francois Thomasset, Eric Villemonte de la Clergerie
ATOLL — INRIA
Domaine de Voluceau

Rocquencourt, B.P. 105, 78153 Le Chesnay (France)
{Francois.Thomasset,Eric.De_La_Clergerie}@inria.fr

M0tS-Cl€fS I Méta-grammaires, Analyse Syntaxique, TAG, TIG

K€yWOFdSZ Meta-grammars, Parsing, TAG, TIG

Résumé Cet article présente un environnement de développement pour les méta-grammaires
(MG), utilisé pour concevoir rapidement une grammaire d’ arbres adjoints (TAG) du francais a
large couverture et néanmoins tres compacte, grace a des factorisations d’arbres. Exploitant
les fonctionnalités foumies par le systeme DYALOG, cette grammaire a permis de construire
un analyseur syntaxique hybride TAG/TIG utilisé dans le cadre de la campagne d’évaluation
syntaxique EASY.

Abstract This paper presents a development environment for Meta-Grammars (MG),
used to design, in a short period, a Wide coverage but still very compact Tree Adjoining Gram-
mar (TAG) for French, thanks to tree factorizations. Exploiting the functionalities provided by
DYALOG system, an hybrid TAG/TIG parser was compiled from the grammar and used for the
EASY parsing evaluation campaign.

Francois Thomasset, Eric Villemonte de la Clergerie

1 Introduction

Les meta-grammaires (MG) (Candito, 1999) renouvellent les methodes de conception des gram-
maires, en introduisant un niveau plus abstrait de description 51 l’aide de contraintes elemen-
taires, regroupees en classes relativement simples, elles-memes inserees dans une hierarchie
multiple d’heritage. Une phase de compilation permet ensuite de croiser ces classes et d’utiliser
les contraintes pour deriver des structures grammaticales pour un formalisme cible comme les
grammaires d’arbres adjoints (TAG) ou les grammaires fonctionnelles lexicales (LFG) (Gaiffe
er al., 2003; Clement & Kinyon, 2003). Les descriptions deviennent plus modulaires et per-
mettent la factorisation d’ensembles de contraintes communs a plusieurs phenomenes syn-
taxiques (comme des regles d’accord). L’heritage permet d’afﬁner progressivement la descrip-
tion d’un phenomene, par exemple pour la structure verbale. Il rend aussi raisonnable l’espoir
qu’une partie de l’organisation en classes ainsi qu’une partie du contenu des classes puissent
étre conservees d’une langue a une autre et d’un formalisme cible a un autre.

Ces raisons nous ont conduit 51 choisir les meta-grammaires pour concevoir rapidement un ana-
lyseur syntaxique hybride TAG/TIG du frangais a large couverture, analyseur qui a ﬁnalement
pu étre deploye dans le cadre de la campagne EASY d’evaluation d’analyseurs syntaxiques.
Neanmoins, nos premieres tentatives ont montre certaines limites dans les capacites descriptives
des MG mais ont egalement suggere des possibilites pour obtenir a peu de frais des grammaires
TAG beaucoup plus compactes. En effet, il est bien connu que les grammaires TAG a large
couverture ont tendance a exploser en nombre d’arbres, avec plusieurs milliers ou dizaines de
milliers de (schemas d’) arbres (Abeille, 2002), ce qui rend tres difﬁcile l’analyse, meme en
exploitant des techniques de ﬁltrage par les mots de la chaine d’entree. Les alternatives propo-
sees passent par des techniques d’analyse des arbres pour retrouver et factoriser leurs parties
communes (Carroll et al., 1998) ou par la description de schemas de parcours multiples dans
les arbres (Harbusch & Woch, 2004). Les meta-grammaires s’appuyant sur des descriptions
factorisees nous permettent d’aller plus facilement dans la direction de tels arbres factorisés.

Le systeme DYALOG que nous utilisons pour la construction d’analyseurs syntaxiques peut
gerer de tels arbres factorises (Section 2). En consequence, en parallele avec la conception
d’une meta-grammaire du frangais, nous avons etendu les possibilites descriptives des MG et
les possibilites generatives de notre compilateur de MG (Section 3). Nous avons egalement
complete notre environnement de travail pour les MG. La section 4 fournit quelques elements
d’information sur notre meta-grammaire et sur la grammaire resultante, en particulier au niveau
de la compacite. Enﬁn, la section 5 fournit quelques resultats preliminaires pour notre analyseur.

2 Analyseurs hybrides TAG/l‘IG avec le systéme DYALOG

Le systeme DYALOG (Villemonte de la Clergerie, 2002) foumit un environnement de compi-
lation et d’execution d’analyseurs syntaxiques tabulaires (a la Earley) offrant la puissance d’un
langage de programmation en logique. Il couvre divers formalismes syntaxiques, dont ceux
utilises dans notre experience, a savoir les Grammaires d’Arbres Adjoints (TAG) et les Gram-
maires d’Insertion d’Arbres (TIG).

Les TAG (J oshi, 1987) sont formees d’arbres partiels d’analyse combinables par substitution et
adjonction. Un noeud feuille etiquete par un non-terrr1inal peut étre substitue par un arbre initial.
Une adjonction insere le contenu d’un arbre auxiliaire B au niveau d’un noeud N, le sous-arbre

1
2
3
4
5
6
7
8
9
10
11
12
13

Comment obtenir plus des Meta-Grammaires

de racine N etant rattache au niveau du pied fg de ﬂ. Dans les FTAG, les noeuds sont decores
par une paire d’ attributs top et bot, generalement exprimes comme des structures de traits.

Les TIG (Schabes & Waters, 1995) sont une variante des TAG restreignant les arbres auxiliaires
de sorte qu’ils ne puissent s’inserer qu’a droite ou a gauche du noeud d’ adjonction. Cette condi-
tion implique en particulier que les arbres auxiliaires aient leur dorsale (c.a.d. le chemin de la
racine au pied) comme frontiere gauche ou droite. L’interét majeur des TIG provient du fait
qu’elles sont analysables, comme les CFG, avec une complexite en O(n3) alors que les TAG le
sont en 0 (n6) oil n denote la longueur de la chaine d’entree. De plus, la plupart des grammaires
TAG sont essentiellement TIG et il est en fait possible de construire des analyseurs syntaxiques
hybrides TAG/TIG (Alonso & Diaz, 2003). DYALOG peut analyser une grammaire TAG pour
identiﬁer les parties TIG aﬁn de construire de tels analyseurs hybrides TAG/TIG1.

Pour les differents formalismes syntaxiques qu’il couvre, le systeme DYALOG permet, a l’in-
terieur des structures grammaticales, l’usage d’0pérateurs réguliers tels que la disjonction,
l’etoile de Kleene et l’entrelacement, ce dernier permettant d’indiquer un ordre libre entre
des sequences de constituants (Nederhof er al., 2003). Ces operateurs ne changent pas le for-
malisme sous-jacent car ils peuvent en theorie étre expanses et elimines en introduisant de
nouvelles structures grammaticales (arbres ou productions) et/ou de nouveaux non-tenninaux.
Neanmoins, le taux d’expansion peut étre exponentiel en le nombre d’occurrences de ces opera-
teurs. Leur utilisation permet donc d’obtenir des grammaires beaucoup plus compactes et plus
efﬁcaces, car ces operateurs sont utilises sans expansion. D’autre part, il est a noter que l’usage
de ces operateurs rend plus naturel les foréts de derivations en evitant l’usage de non-terrninaux
artiﬁciels.

3 Etendre les MetaGrammaires

class collect_real_subject_canonical {
<: collect_real_subject;
$arg.extracted value(~cleft);
S >> VSubj; VSubj < V; V >> postsubj;

VMod < postsubj;

node postsubj: [cat:N2,id:subject, type:subst, top:[wh:—,sat:+]];
— postsubjzzagreement; postsubj = postsubj::N;
postsubj =>
node(Infl).bot.inv = value(+),
$arg.extracted = value(—), $arg.real = value(N2),
desc. extraction = value(~—),

node(V) . top .mode=value(~ infinitive I imperative I gerundive I participle) ;
postsubj => node(Infl).bot.inv value(~+);

~

}
Listing 1 — Exemple de classe

Le listing 1 illustre une classe ﬁlle col le ct_real_subj e ct_canonical heritant de la
classe parente co 1 l e c t_r e a l_s ub j e c t. Cette derniere decrit l’ ensemble des realisations
possibles du sujet et est utilisee comme modele pour les diverses realisations du sujet en position
canonique ou en extraction cliveez. La classe ﬁlle complete la classe parente pour le cas cano-

‘Il est E1 noter que cette analyse ne garantit pas toujours l’équivalence entre analyseurs TAG et analyseurs
hybrides TAG/TIG suite aux decorations et 51 des gestions différentes de l’adj onction, a savoir adj onction «chainée»
(sur les racines des arbres auxiliaires) pour les TAG contre adjonction multiple pour les TIG.

2Type « C’est de travailler qui me fatigue I ».

Francois Thomasset, Eric Villemonte de la Clergerie

nique, en precisant la position du sujet (sous S et deVant le noyau Verbal V) et en introduisant la
notion de sujet post-Verbal uniquement realisable par un groupe nominal (N2).

Plus fonnellement, les meta-grammaires permettent une description syntaxique eclatee a l’aide
de contraintes elementaires regroupees en classes. Une classe peut heriter des contraintes de
plusieurs classes parentes (<:, ligne 2) et peut egalement foumir une ressource (-I-7‘) ou requerir
une ressource (—r, l. 6).

Les contraintes peuvent porter sur les noeuds (l. 4 et 6) incluant l’egalite =, la precedence <
ainsi que les dominances immediates >> et indirectes >>+. Les contraintes peuvent aussi porter
sur les decorations des noeuds (l. 5) ou de la classe elle-meme (desc, l. 10). Les decorations
sont exprimees comme des structures de traits (l. 5) avec possibilite d’utiliser des disjonctions
I et negations ~ sur des Valeurs atorniques (l. 11) ainsi que des Variables ($arg). Les contraintes
sur les decorations s’expriment soit directement soit au traVers d’equations entre chemins de
traits ancres sur des noeuds (l. 8), sur la classe elle-meme (desc, ligne 10) ou sur des variables
(1. 9). Des macros peuVent étre utilisees pour r1ommer des Valeurs ou des chemins. Enﬁn, il est
possible de faire porter des contraintes sur le pere d’un noeud N aVec la notation « father (N)».

L’objectif du compilateur de meta-grammaire3 est alors de croiser, par point ﬁxe, les classes
terrninales (c.a.d. sans descendants) de maniere a obtenir des classes neutres pour lesquelles
chaque ressource foumie est consommee et reciproquement. Les contraintes sont accumulees
lors des croisements et seules sont conservees les classes dont les contraintes accumulees, pre-
nant en compte leurs consequences logiques, sont satisﬁables4 . Les contraintes des classes
neutres surViVantes sont ensuite exploitees pour produire les structures grammaticales mini-
males, en l’occurrence des arbres pour les TAG.

Dans la formalisation standard des MG (Candito, 1999), une ressource peut étre neutralisee
au plus une fois pour produire une classe neutre. Cette restriction amene a dupliquer certaines
classes pour nommer differemment la meme ressource. Ainsi, pour exprimer qu’une classe
decrivant les Verbes a besoin de 2 arguments Verbaux, il faut dupliquer une partie importante
de la hierarchie des classes pour deux ressources similaires —vargl et —varg2. Pour lever
cette limitation, nous avons introduit la notion d’espace de noms et rompu la symetrie entre
foumisseurs et consommateurs : une ressource peut maintenant étre demandee dans un certain
espace de nom ns (ns = post sub dans —postsubj ::agreement, 1. 6) et lors d’un croisement avec
une classe foumisseuse C (ici, fournissant +agreement), les noeuds, Variables et besoins de C
sont alors plonges dans l’espace de nom ns (ici postsubj ). Les espaces de noms pennettent un
usage beaucoup plus intensif du mecanisme de ressources et une bien meilleure factorisation
des meta-grammaires. Les MG sont alors moins redondantes et plus faciles a maintenir.

Les decorations portees par les noeuds et la classe sont libres mais certaines ont neanmoins un
statut special par rapport a la generation des arbres TAG. Pour les noeuds, on peut citer les traits
cat pour la categorie syntaxique, type pour le type de noeud, lex pour une Valeur lexicale,
adj pour indiquer le statut du noeud pour l’adjonction, top et bot comme arguments. Pour
les classes, le trait ht indique l’hypertag qui sera associe aux arbres pour pennettre l’ancrage
aVec les entrees lexicales (Voir Section 4).

La possibilite d’engendrer des arbresfactorisés resulte de divers mecanismes. En premier lieu, a
cote des types standards de noeuds, il existe les types speciaux alternative et sequence.
Le trait optional permet de rendre optionnel un noeud tandis que le trait star pennet de

3DéVeloppé sous le systeme DYALOG.
4Par exemple, le compilateur Vériﬁe qu’un noeud ne precede pas son pere.

Comment obtenir plus des Meta-Grammaires

rendre un noeud repetable, correspondant a une etoile de Kleene5. Enﬁn, lors de l’enumera-
tion des arbres minimaux veriﬁant un ensemble de contraintes, le compilateur utilise l’opera-
teur d’entrelacement (##) pour rendre compte de sous-speciﬁcation de precedence entre noeuds
freres. Ainsi, les contraintes «N >> N_1; N>> N_2; N >> N_3; N_1 < N_2» produisent le fragment
d’arbre N ((N1, N2)##N3) indiquant que N3 se positionne librement (avant, au milieu, apres)
par rapport a la sequence N1, N2. Pour favoriser l’obtention d’arbres TIG, le compilateur evite,
dans la mesure du possible, d’utiliser l’operateur d’entrelacement quand il couvre un noeud
pied comme dans Rg(N##Fg). Dans ce cas, les differentes possibilites d’ordonnancement
des noeuds sont examinees pour produire des arbres que l’on espere etre TIG. Il est egalement
possible d’assigner un rang a un noeud avec le trait rank et les valeurs first et last.

L’ optionnalite fournie par l’emploi du trait optional n’est pas assez ﬁne en pratique. L’ em-
ploi de gardes permet d’imposer des conditions a l’existence d’un noeud (l. 7) ou a sa non-
existence (1. 12). Ces gardes s’expriment comme des expressions booleennes sur des equations
entre chemins. Le compilateur de MG veriﬁe la satisﬁabilite de ces gardes, elirninant les alter-
natives conduisant a des echecs et les equations devenues tautologiquement vraies. Les gardes
restantes sont alors emises dans les arbres TAG pour etre evaluees pendant l’analyse.

Outre les extensions des meta-grammaires et du compilateur, le travail de description a ete fa-
cilite par le deploiement d’un environnement de travail adapte pour pouvoir aisement visualiser
et tester. En premier lieu, nous disposons d’un mode Emacs pour les MG interagissant avec
un outil graphique de visualisation de la hierarchie des classes. Par ailleurs, la chaine de trai-
tement allant des meta-grammaires aux analyseurs produit des representations intennediaires
sous formats XML6 pouvant etre visualisees, en particulier sous forme HTML pour les arbres,
decorations et gardes. Les forets de derivations produites par notre analyseur sont egalement
convertibles en XML et visualisables sous differentes formes, en particulier sous forme de de-
pendances. L’utilisation d’un serveur d’analyseurs7 couple a divers scripts facilite la conduite
de tests sur corpus, pour mesurer divers parametres (temps d’analyse, taux d’ambigui'te, taux
de couverture, ...) et indiquer les differences entre 2 series de tests. Enﬁn, il est possible de
desactiver des classesg pour deboguer ou, a ter1ne, pour obtenir des grammaires specialisees.
Ces diverses possibilites permettent un suivi ﬁn des performances de la grammaire engendree.

4 Anatomie de la grammaire produite

Grace aux resultats decrits precedemment, nous avons pu rapidement concevoir une meta-
grammaire du francais engendrant une grammaire tres compacte, comme le montrent les di-
verses tables de la ﬁgure 1. Ainsi, la grammaire ne comporte que 133 arbres, incluant 7 arbres
construits manuellement. Elle est essentiellement TIG avec seulement 12 arbres auxiliaires en-
veloppants principalement utilises pour gerer les diverses formes de guillemets9. La grammaire
n’est pas totalement lexicalisee, avec un nombre assez important d’arbres sans ancre (mais

5}. terme, la valeur du trait sera exploitee pour pouvoir speciﬁer un intervalle de repetition.

6Ces formats XML s’appuient de plus sur les propositions de normalisation, a savoir TAGML pour les TAG et
FSR pour les structures de traits.

7Accessible en ligne sur http : / / atol 1 . inria . fr/parserdemo.

811 est en fait possible d’activer ou desactiver de maniere plus ﬁne, en exprimant un ensemble de contraintes
invalidant une classe.

9Pour etre plus precis, ces arbres sont uniquement utilises pour les guillemets autour de groupes, ceux autour
de mots simples sont geres avant analyse syntaxique. Le traitement propose est clairement une source d’inefﬁ—
cacite pouvant peut—etre etre gere autrement. Par ailleurs, il est a noter que le compilateur MG a produit plus

Francois Thomasset, Eric Villemonte de la Clergerie

possedant eventuellement des noeuds lexicaux), essentiellement utilises pour des adjonctionslo.
Les arbres ancrés le sont surtout par les Verbes mais ils ne representent qu’une inﬁme fraction
d’un ensemble equivalent d’arbres TAG non factorises. On Voit que 7 arbres sufﬁsent a cou-
Vrir un ensemble consequent de constructions Verbales << canoniques >>. Ces resultats decoulent
d’un usage intensif de la factorisation dans les arbres, en particulier controlee par des gardes.
L’ etoile de Kleene est uniquement utilisee pour gerer la coordination tandis que les entrelace-
ments proviennent essentiellement d’un ordre libre entre arguments du Verbe (incluant le sujet
post-Verbal). Les arbres factorises obtenus peuVent étre relativement consequents (jusqu’a 46
noeuds) mais la ﬁgure 1(e) montre neanmoins que la plupart des arbres restent simples.

Classes Arbres Init. Aux. Aux. Env. Aux. Gauches Aux. Droits

191 133=126+7 44 89 12 29 48
(a) Distribution par types d’arbres

non ancrés v coo adv adj csu prep aux np nc det pro

50 27 12 10 8 4 3 2 2 1 1 1
(b) Distribution par ancres

Canonique Extr. Actif Passif Quest. Rel. Clivées Coord Adv Adj
7 19 19 6 4 4 11 12 14 11

(c) Distribution par phénomenes syntaxiques

Gardes Disjonctions Entrelacement Etoiles de Kleene

820 92 26 13
(d) Distri oution des factorisations

35 35

I arbres

arbres

 

13 5 7 9111315171921232527293133353739414345
noeuds

(e) Distribution des tailles d’arbres

FIG. 1 — Anatomie de la grammaire

La complexite des arbres factorises est illustree par la ﬁgure 2 representant une Vue simpliﬁee
d’un des arbres Verbaux canoniques pour la Voix active. Cet arbre # 1 1 1 resulte du croisement
de 25 classes terrninales, comprend 43 noeuds plus 3 noeuds d’alternatiVes et 1 noeud d’entre-
lacement, et est controle par 35 gardes“. Il est difﬁcile d’obtenir le taux exact de factorisation
atteint, mais Voici neanmoins quelques parametres indicatifs pour essayer de l’estimer :

d’arbres auxiliaires que nécessaire pour éviter d’aVoir des pseudo—arbres enveloppants et que certains phénomenes
syntaxiques pouvant produire des arbres enveloppants ont été brides pour obtenir des arbres TIG.

‘°Cette non lexicalisation partielle est guidée par des raisons pragmatiques (limitation du nombre d’ arbres) mais
également linguistiques. Elle ne remet pas en cause la notion de domaine de localité sémantique des arbres TAG. Au
contraire, l’accroche d’une participiale sur un nom, par exemple, est non lexicalisée car distincte (sémantiquement)
de la construction d’une participiale.

“Un tel arbre avec toutes ses gardes et decorations serait extrémement difﬁcile E1 écrire 51 la main (2171 lignes
de XML TAGML), ce qui justiﬁe d’autant plus le recours E1 une méta—grammaire.

Comment obtenir plus des Meta-Grammaires

s
VMod / \ V
J VMod / \- ##

//‘xx 1 // \

<>cln LN2 LCS LS LPP V1 LN2 VMod VMod
//

Inﬂ I
\

<>clneg <>advneg <>clr clseq clseq <>advneg <>advneg

I
/ l \ / 1 \
<>cld ‘Q <>cld E <>clg <>$/ <>cln A CS LPP LN2 icomp LPP

<>prep Q <>csu LS

FIG. 2 — Arbre #111 (simpliﬁe)

subjreal = 5 choix de realisations pour un sujet pre-verbal : c1n (clitique nominatif), N2
(groupe nominal), CS (phrase), S (inﬁnitive), PP (inﬁnitive introduite par « d’ ») ;

subjpos choix entre « pas de sujet», «sujet pre-verbal», «sujet pre-verbal et clitique post-
verbal », « clitique post-verbal », « sujet post-verbal » ;

argspos = 3 entrelacements entre 2 arguments post-verbaux et un sujet post-verbal, tous op-
tionnels;

clseqpos = X choix entre 2 sequences de clitiques pre ou post verbaux optionnels : cld, c1a,
cld, C11, clg;

clopt = 2 clitiques pre-verbaux optionnels : clneg (« ne »), clr (reﬂexif) ;

neg = 3 positions de negation (advneg « que >> sur les arguments verbaux ou advneg pre-verbal
pour les inﬁnitives) ;

arglreal = 3 realisations possibles pour argl : N2 (objet), comp (attribut), PP (groupe prepo-
sitionnel nominal, adjectival, inﬁnitif, completif, .. .) ;

arg2real = 2 realisations possibles (au moins) pour arg2 (CS,PP) ;

Divers calculs approches donnent un taux de factorisation entre 10 000 et 100 000, sans meme
prendre completement en compte les disjonctions apportees par certaines gardes. Ce taux d’ex-
pansion astronornique est bien entendu tres largement au-dessus de la realite si on prend mieux
en compte la satisﬁabilite des gardes. Neanmoins, meme un taux d’expansion plus realiste de
l’ordre de 100 ou 1000 montre l’interet des ces structures factorisees, difﬁcilement construc-
tibles manuellement sans le support apporte par les meta-grammaires. De plus, les experiences
menees ont montre que l’analyse reste efﬁcace meme avec des structures aussi complexes”.

Un arbre comme l’arbre #111 couvre de fait de tres nombreuses constructions syntaxiques,
bien plus en general que celles autorisees pour un mot donne. L’ ancrage entre mots et arbres,
ainsi que la selection des constructions autorisees pour un mot se fait par uniﬁcation entre des
structures de traits appelees hypertag associes aux arbres et aux mots (Kinyon, 2000)”. Ainsi
la ﬁgure 3(a) donne l’hypertag produit pour l’arbre #1 1 1 tandis que la ﬁgure 3(b) montre un
des hypertags mentionnes pour « promettre » dans notre lexique. Parmi toutes les constructions
possibles pour l’arbre #111, l’uniﬁcation selectionne uniquement les constructions verbales
canoniques autorisant un objet optionnel et un groupe prepositionnel optionnel introduit par

12En general, les mauvaises performances résultent plutet d’arbres sous—contraints faisant exploser le nombre
d’ana1yses.

“Ce mécanisme d’ancrage par hypertags rend caduque la notion trop rigide de famille d’ arbres présente dans
l’architecture XTAG (Doran et al., 1994).

Francois Thomasset, Eric Villemonte de la Clergerie

« a»14. Le lien entre hypertag H et des constructions syntaxiques se fait grace aux variables
presentes dans H et dans les decorations des noeuds ou dans les equations des gardes.

arg0
arg1
arg2
cat V

diathesis
refl

‘extracted
kind Sum
pcas —

_real
‘extracted
kind
pcas
_real
"extracted
kind

pcas

_real

active

+|—|apres

+|—|apres
~|CS|N|N2|PP|S|...

-ICS|N2|PP|S|cln|prel|pri

— | acomp | obj | prepacomp | prepobj
avec | de | par | 
—|CS|N|N2|PP|S|V|adj|cla|...

a

- | prepacomp | prepobj | preps-
comp | prepvcomp | scomp |

vcomp | whcomp
a

(a) pour l’arbre #111

5 Experiences

FIG. 3 —

Hypertags

|f{ll’ld Subj I -ll

arg

pcas —

argl [kind obj | scomp | -1
pcas —

arg2 [kind prepobj |—1
pcas a —

(b) pour «promettre»

L’ analyseur hybride TAG/TIG compile 51 partir de la grammaire a ete teste sur divers corpus tout
au long de la phase de developpement et pendant la campagne EASY. Les analyses s’effectuent
sur des treillis de mots (pour gerer les ambiguites morpho-syntaxiques et les mots inconnus) en
s’appuyant sur un lexique de plus de 400 000 formes ﬂechies fournissant des informations de
sous-categorisation pour les verbes. Nous n’avons pas utilise d’etiqueteur morpho-syntaxique.
L’ analyseur s’appuie sur une strategie d’analyse tabulaire descendante gauche-droite et peut
rendre soit une analyse complete de la phrase soit un ensemble d’analyses partielles couvrant
au rnieux l’entree. Les analyses sont extraites sous forme de forets partagees de derivations,
convertibles en forets partagees de dependances. Ces forets nous servent de base pour calculer
un taux moyen d’ambigu'1’te’ par mot oz deﬁni comme le nombre moyen d’arcs de dependances

atteignant un mot moins un15.
Corpus #phrases % couv. temps moyen (s) temps median (s) ambiguité
EUROTRA / OLD 334 95.80 / 89.22 1.81 /0.70 1.27 / 0.54 0.7/0.3
TSNLP / OLD 1661 93.38 / 86.15 0.72 / 0.43 0.56 / 0.33 0.4/0.2
MD10x20/OLD 5000 63.18 /43.06 2.85 / 1.97 1.80/ 1.30 0.8/0.5
EASY 34438 42.45 / — 5.55 / — 1.61 / — 0.6/ —
TAB. 1 — Resultats (avec un timeout de 100s)

“La selection des constructions avec une completive (scomp) se fait avec un autre arbre.
‘5Pour une analyse non—ambigue, tout mot sauf la « tete >> de la phrase est atteignable par une seule dependance.
Le nombre maximal d’analyses pour un taux d’ambigu‘1'te a et une phrase de longueur n est en O((1 + 04) ”).

Comment obtenir plus des Meta-Grammaires

La table 1 fournit des resultats d’analyses completes de 2 versions successives de l’analyseur
pour les jeux de tests EUROTRA et TSNLP ainsi que pour MD10x20, un corpus journalistique
de phrases de longueur comprise entre 10 et 20 extraites (na'1'vement) du «Monde Diploma-
tique >> et pour le corpus foumi pour la campagne EASY (couvrant divers styles : joumalistique,
litteraire, oral, mail, medical, questions/reponses). Les resultats de couverture sont excellents
sur les jeux de tests, en particulier a cause d’un vocabulaire relativement restreint pour lequel
notre lexique est complet. Sur le corpus MD10x20 qui est relativement homogene et pour le-
quel un minimum d’adaptation du lexique a ete effectue, les resultats restent honorables. Les
resultats sont moins bons pour EASY qui est tres heterogene“. Ce manque de couverture tra-
duit bien evidemment des manques dans la meta-grammaire, en particulier sur les coordinations
complexes, les superlatives et les comparatives, ainsi que sur les cadres de sous-categorisation
pour les categories non-verbales et sur certaines articulations de phrase. Cependant, le manque
de couverture provient egalement de notre lexique qui est tres recent et ne foumit pas necessai-
rement des infonnations syntaxiques completes voire correctes pour tous les mots”.

La table 1 foumit aussi des resultats pour une version anterieure de l’analyseur (OLD) qui illus-
trent l’importance du suivi constant des grammaires. En effet, nous avons effectue, sans reel
controle, des modiﬁcations de demiere minute avant EASY pour essayer d’ameliorer la cou-
verture (extension des clivees, generalisation abusive des incises, articulation des phrases par la
ponctuation, gestion na’1've des verbes support, . . . ). Ces modiﬁcations ont bien augmente la cou-
verture, mais, mal controlees, elles ont fait doubler les taux d’ambigu’1'te et les temps d’analyse
(avec en premiere approximation, une relation lineaire entre temps et taux d’ambigu’1'te).

Enﬁn, sans corpus de reference, il nous est impossible pour l’instant de foumir des resultats
concernant la precision des analyses (completes ou partielles). Nous avons effectue de nom-
breuses veriﬁcations manuelles sur les vues graphiques des foréts mais attendons maintenant
les resultats de la campagne EASY pour avancer.

6 Conclusion

Notre meta-grammaire est encore loin d’étre complete mais l’experience montre neanmoins que
les meta-grammaires rendent possible le developpement rapide de grammaires a relativement
large couverture. Il est a noter que ce developpement a ete en partie freine par le manque d’in-
formation dans le lexique, en particulier pour avoir une discrimination plus ﬁne des adverbes et
pour traiter les sous-categorisations des adjectifs et des noms.

Les extensions apportees aux meta-grammaires ainsi que les ameliorations de notre environ-
nement de travail se sont revelees tres utiles. Neanmoins, concevoir une meta-grammaire reste
un exercice delicat demandant une solide expertise linguistique et une utilisation systematique
d’outils de tests et de visualisation. Il nous semble aussi souhaitable d’ ajouter de nouveaux types
de contraintes, meme si elles peuvent s’exprimer a l’aide des contraintes actuelles, comme des
contraintes d’exclusion entre noeuds, des contraintes de cardinalite pour exprimer des regles to-
pologiques, ou des contraintes de rangs exprimables dans les gardes. Pour aller dans le sens de
grammaires parametrables (autorisant divers niveaux de langue) ou pour aller vers des forma-
lismes cibles distincts, il serait utile de regrouper les contraintes par contextes a l’interieur des

“On peut aussi préciser que les phrases pour EASY sont en moyenne plus longues.
”Mais nous exploitons progressivement les résultats d’analyse pour repérer et corriger les entrees incorrectes
ou incompletes.

11

12

Francois Thomasset, Eric Villemonte de la Clergerie

classes de maniere a pouvoir plus facilement n’en exploiter qu’une partie lors de la compilation
(en selectionnant un ensemble de contextes).

La factorisation des arbres, rendue possible par l’emploi de gardes et d’operateurs reguliers,
nous semble une approche generique extrémement prometteuse pour controler l’explosion com-
binatoire du nombre de structures grammaticales produites, permettant ainsi de construire des
analyseurs syntaxiques plus efﬁcaces. Les arbres factorises peuvent étre complexes mais leur
description au niVeau de la meta-grammaire reste simple.

Le formalisme cible TAG que nous aVons utilise est judicieux mais neanmoins pas sufﬁsamment
puissant pour exprimer elegamment certains phenomenes syntaxiques comme les incises ou
certaines extractions (comme l’extraction de genitifs dans << de qui lis-tu un livre »). Nous envi-
sageons d’eVoluer Vers des formalismes cibles permettant d’exprimer plus de sous-speciﬁcation
dans les arbres, comme par exemple les Local Multi Component TAG, avec l’ambition, a terme,
de reduire la distance entre les meta-grammaires et le formalisme cible.

Les outils mentionnes dans cet article ainsi que la meta-grammaire sont librement disponibleslg.

Références

ABEILLE A. (2002). Une grammaire électronique dufrangais. Paris : CNRS Editions.

ALONSO M. A. & DIAZ V. J. (2003). Variants of mixed parsing of TAG and TIG. T raitement Automa-
tique des Langues (T.A.L.), 44(3), 41-65.

CANDITO M.—H. (1999). Organisation modulaire etparamétrable de grammaires électroniques lexica-
lisées. PhD thesis, Université Paris 7.

CARROLL J., NICOLOV N., SMETS M., SHAUMYAN O. & WEIR D. (1998). Grammar compaction and
computation sharing in automata—based parsing. In Proceedings of Tabulation in Parsing and Deduction
(TAPD’98), p. 16-25, Paris (FRANCE).

CLEMENT L. & KINYON A. (2003). Generating parallel multilingual LFG—TAG grammars from a
metaGrammar. In Proc. of ACL’03 .

DORAN C., EGED1 D., HOCKEY B. A., SRINIVAS B. & ZAIDEL M. (1994). XTAG system — a
wide coverage grammar for English. In Proc. of the 15th International Conference on Computational
Linguistics (COLING’94), p. 922-928, Kyoto, Japan.

GAIFFE B., CRABBE B. & ROUSSANALY A. (2003). Representation et gestion du lexique d’une gram-
maire d’arbres adjoints. T raitement Automatique des Langues (T.A.L.), 44(3).

HARBUSCH K. & WOCH J . (2004). Integrated natural language generation with schema—tree adjoining
grammars. In C. HABEL & E. THOMAS PECHMANN, Eds., Language Production. Mouton De Gruyter.
J OSHI A. K. (1987). An introduction to tree adjoining grammars. In A. MANASTER—RAMER, Ed.,
Mathematics of Language, p. 87-115. Amsterdam/Philadelphia : John Benjamins Publishing Co.
KINYON A. (2000). Hypertags. In Proc. of COLING, p. 446-452.

NEDERHOF M.—J., SATTA G. & SHIEBER S. (2003). Partially ordered multiset context—free grammars
and free—word—order parsing. In In 8th International Workshop on Parsing Technologies (IWPT’03), p.
171-182.

SCHABES Y. & WATERS R. C. (1995). Tree insertion grammar : a cubic—time, parsable formalism that
lexicalizes context—free grammar without changing the trees produced. Fuzzy Sets Syst., 76(3), 309-317.
VILLEMONTE DE LA CLERGERIE E. (2002). Construire des analyseurs avec DyALog. In Proc. of
TALN’02.

18Sur http : //atoll . inria . fr/packages/packages . html.

