TALN 2007, Toulouse, 5—8juin 2007

Vers un méta-EDL complet, puis un EDL universel pour la TAO

Hong—Thai NGUYEN‘, Christian BOITET2
GETALP, LIG

385, av. de la Bibliothéque, BP 53 F-38041 Grenoble cedex 9
{Hong—Thai.Nguyen,Christian.Boitet}@imag.fr

Résumé. Un “me'ta-EDL” (me'ta-Environnement de Developpement Linguiciel) pour la
TAO permet de piloter a distance un ou plusieurs EDL pour construire des systemes de TAO
heterogenes. Partant de CASH, un me'ta-EDL dedie a Ariane-G5, et de WICALE 1.0, un
premier me'ta-EDL generique mais aux fonctionnalites minimales, nous degageons les
problemes lies a l’ajout de fonctionnalites riches comme l’edition et la navigation en local, et
donnons une solution imple'mentee dans WICALE 2.0. Nous y inte'grons maintenant une base
lexicale pour les systemes a « pivot lexical », comme UNL/U++. Un but a plus long terme est
de passer d’un tel me'ta-EDL generique multifonctionnel a un EDL « universel », ce qui
suppose la reingenierie des compilateurs et des moteurs des langages specialises pour la
programmation linguistique (LSPL) supportes par les divers EDL.

Abstract. A “meta-EDL” (meta-Environment for Developing Lingware) for MT allows to
pilot one or more distant EDL in order to build heterogeneous MT systems. Starting from
CASH, a meta-EDL dedicated to Ariane-G5, and from WICALE 1.0, a first meta-EDL,
generic but offering minimal functionalities, we study the problems arising when adding rich
functionalities such as local editing and navigation, and give a solution implemented in
WICALE 2.0. We are now integrating to it a lexical database for MT systems relying on a
“lexical pivot”, such as UNL/U++. A longer-term goal is to evolve from such a
multifunctional generic meta-EDL to a “universal” EDL, which would imply the
reengineering of the compilers and engines of the specialized languages (SLLPS) supported
by the various EDLS.

M0t-CléSZ genie lingmiciel, langages specialises pour la programmation linguistique,
LSPL, environnement de developpement, EDL, TAO, systemes distribues heterogenes.

Keywords: lingware engineering, specialized languages for lingmistic programming,
development environment, EDL, MT, heterogeneous distributed MT systems.

1 Introduction

11 existe des EDL (Environnements de Developpement Linguistique) pour systemes de TAO,
plus ou moins complets. Ils sont tous construits autour d’une technologie spe'cif1que. On peut
citer Ariane-78 puis Ariane-G5 du GETA (Grenoble), Tapestry du CRDL (Singapour),
ETAP-3 de l’IPPI (Moscou), et ceux des fournisseurs de systeme de TAO commerciaux, non
disponibles pour la recherche.

Depuis 10 ans environ, on cherche a re'aliser des systemes de TAO he'te'rogenes, soit pour
combiner plusieurs systemes pour une nouvelle paire de langmes (approche « multimoteur »

133

Hong-Thai NGUYEN, Christian BOITET

de Pangloss (Nirenburg and Frederking, 1994), VerbMobil (Ney H, Och & Vogel, 2000),
etc.), soit pour construire un systeme de TAO fortement multilingue dont les composants
peuvent étre developpe's par diffe'rents groupes, avec des approches et des EDL diffe'rents,
comme dans le projet UNL (Projet UNL).

Pour permettre le de'veloppement cooperatif et distribue de ce type de systeme, une premiere
etape consiste a developper un « me'ta-EDL » fonctionnant comme une interface avec
plusieurs EDL distants, i.e. permettant d’editer et de synchroniser les composants lingmiciels
(dictionnaires, grammaires, automates) et de combiner diffe'rents modules distants pour
produire des traductions. Un probleme interessant est alors d’inte'grer le plus possible de
fonctions des EDL (navigation, aide a l’indexage des dictionnaires, etc.), sans devoir effectuer
une reingenierie de ces EDL. Enﬁn, comme cette approche est par nature limitee, un but plus
ambitieux est de construire un « EDL gene'rique » pour le de'veloppement distribue de
systemes de TAO he'te'rogenes.

Cet article est organise en trois parties. Nous detaillons d'abord les fonctionnalites des EDL et
des me'ta-EDL, et en donnons une illustration avec CASH et WICALE 1.0. Dans la deuxieme
partie, nous montrons les problemes poses par l’ajout a WICALE des fonctions d’e'dition et de
navigation en local, ainsi que les solutions retenues pour leur imple'mentation dans WICALE
2.0. Dans la troisieme partie, nous montrons la necessite et la difﬁculte d’integrer une base
lexicale dans un me'ta-EDL, et decrivons PIVAX, une base lexicale multilingme organisee
autour d’un « pivot lexical », en cours de construction. PIVAX pourra étre utilisee non
seulement pour la TAO, en particulier pour le projet UNL/U++, mais pour de'velopper
d’autres applications comme la recherche d’informations en contexte multilingme (CLIR).

2 EDL et méta-EDL pour la TAO

Un Environnement de Developpement Linguistique (EDL) est un environnement de
programmation linguistique qui connecte ou integre un ou plusieurs LSPL (Langages
Specialises pour la Programmation Linguistique). Un EDL permet aux developpeurs
lingmistes de realiser les operations necessaires (gestion, manipulation des linguiciels et des
donnees, compilation, test, production) de facon transparente.

Un «meta EDL» permet de piloter a distance un ou des EDL distants. Pour l’instant, nous
travaillons a la constmction d’un me'ta-ED pour la TAO le plus puissant possible. Dans le
futur, nous voulons developper un EDL « universel » perrnettant la reingenierie de tout EDL.

Les caracte'ristiques des EDL sont assez diffe'rentes de celles des IDE (environnement de
de'veloppement de logiciels). Nous l’illustrerons avec deux exemples de me'ta-EDL existants.
2.1 Fonctionnalités d’un EDL

Table I : comparaison des IDE et des EDL

IDE EDL

Utilisateur programmeur linguiste, lexicographe, gestionnaire, utilisateur 

Type de fonction’ procédure’ objet’ variables, modeles, grammaire, automate, dictionnaire...
composant module, paquetage. . .

Taille de . grande (100K-1G entrees pour un gros dictionnaire de
composant peme (quelques pages) TA, 100-400 pages pour une grammaire d’analyse)

Type d’evolution plutot stable en perpetuelle evolution

Un EDL de TAO complet doit offrir 4 « classes de fonctionnalites ».

134

Vers un meta-EDL complet, puis un EDL universel pour la TAO

Preparation des composants linguiciels: (1) visualisation, (2) edition, (3) tri, (4) aide a
l’indexage.

Organisation en etapes et phases : (1) gestion de versions de test pour mise au point, (2)
gestion de chaines d’execution (totale ou partielle), (3) generation de systemes de TAO
complet ou des parties de tels systemes.

Gestion de corpus d’essai: (1) creation ou modiﬁcation de corpus ou de textes, (2)
passage de tests, (3) traduction de (parties de) corpus, (4) revision humaine.

Actions globales: (1) extraction d’informations, (2) veriﬁcation de coherence, (3)
impressions avec ﬁltrage et tri.

2.2 Les EDL de TAO existants

Le plus complet semble toujours étre Ariane-G5 (Ariane-Y) du GETA (Figure 1), le seul qui
permet de « creer » un nouveau systeme de TAO en quelques commandes, sans intervention
d’informaticiens. Le processus de traduction se compose de trois etapes (analyse, transfert,
generation), chaque etape etant composee de phases (obligatoires ou facultatives).

En analyse, on trouve :

 
   

 
    

 

i Caﬂpinlalr HPAVS Imﬁm RDBRA AM analyse morphologique obllgatmre
‘ hxxai srw:tu:d , ,
‘ T AX analyse expansive facultative
TT
1: . . .
mm“ TRANS; 97%,,-,,-,,,,,,, : E_n:_4_;(.-3 AY analyse expansive facultative
ledral Eerie’ 5
mm AS analyse structurale obligatoire

  
   
 

musmr En transfert, on trouve :

     

TL transfert lexical obligatoire
TX transfert expansif facultative
0"’:-:::,"“' TS transfert structural obligatoire
. _ _ _ TY transfert expansif facultative
pa

 
    
 

E.EPA'J\"5

En generation, on trouve :

GX generation expansive facultative
GS generation syntaxique obligatoire
A3-ALY5 E GEXEEA-na_\; GY generation expansive facultative

ARJANE-G5

GM generation morpho lo gique obligatoire

Figure I : étapes, phases et LSPL de I 'EDL Ariane—G5

Pour generer un systeme de TAO, l’utilisateur (un developpeur linguiste) ecrit un linguiciel
pour chaque phase avec le LSPL adequat, le compile et genere une « chaine d’execution ».
Citons quelques EDL de TAO incomplets a notre sens.
ETAP-3 de l’IPPI a Moscou. L’EDL vu en demonstration est partiel, et nous n’avons pas
trouve de reference le decrivant.
Vermobil. Il n’y avait pas d’EDL pour preparer les linguiciels, mais au maximum
quelques script sous Linux. Par contre, il y avait un EDL pour l’integration et la mise au
point du systeme global, construit autour d’une structure commune («tableau noir»)
accedee par chaque module de facon distribuee.
Systran (Systran). La aussi, les developpeurs sont informaticiens-linguistes. Les parties
concernant les grammaires et les automates sont deﬁnies directement dans le code source.
Les « composants» ecrits dans les LSPL semblent n’étre que les dictionnaires et les

135

Hong-Thai NGUYEN, Christian BOITET

transducteurs ﬁnis utilises pour la morphologie. Le cycle de developpement est le meme
pour le « coeur » de TALN que pour les interfaces et la gestion du ﬂot de travaux, i.e. le
cycle de production en genie logiciel. La partie lexicale est separee et developpee avec des
outils internes : commandes, scripts pour l’indexage, ﬁltrage d’erreurs, etc. Le code
source lexical (sous plusieurs formats : texte, Excel, XML...) est compile et encrypte' par
l’outil ACMulti (J. Senellart 2003). La gestion de versions est faite sous le systeme CVS.

2.3 Exemples de Méta-EDL : CASH et WICALE 1.0
2.3.1 CASH, pour Ariane-G5

Le systeme Ariane-G5 est normalement utilisable depuis une «machine virtuelle » generee
par VM/ESA et accessible via http, smtp ou des sockets. Cette accessibilite' ne se limite pas a
l'exe'cution de traductions, mais s'e'tend a l'ensemble du de'veloppement des linguiciels, y
compris a la creation et a la maintenance de grammaires et de dictionnaires.

Pour faciliter cette exploitation a distance, E.Blanc a realise une interface hypertextuelle,
CASH (Commande d'Ariane Sous Hypertexte) (E. Blanc 1996). CASH integre plusieurs
fonctions qui en font plus qu’un me'ta-EDL, comme l’aide a l’indexation dans les
dictionnaires et l’edition graphique d’arbres et sche'mas d’arbres. CASH vient d’étre converti
de HyperCard (propre a Mac OS 9) vers une plate-forme portable (Revolution).

Dans l’exemple, ' " " W'-

      
    
     
 

         
   

On a clique SLII‘ la I-nncrnruzs
‘ my n;= ‘- Lazm
Va.n.al?1e SUBA 9.1-.‘ n: % é.JJ-UJ-5UE&-E-Ja.[F-DU-SL|'Bé-.E-.-DD£I-CI‘-IZl'-$'.|E£-£-A[W-£IL-
utlhsee dans la M: n~ ‘ »'\J-'«UZL'| D‘! EVER E LBW!‘ D?! tn; 1: Aim, :1: um I. n
, . . ,n,[.:}"'q j-i='r-m':.1'.-=1=r<_n‘r.

def1n1t1ondela W,-3., V .~ ,\. ,,

procedure ADJ,

d'0f'1  ii-‘  G*§J..‘T.ﬂ_ [L-?'Im'llTl]'l'E, ‘ICU?-\|l:,E,
d'une autre I1:-v.‘l|'Bi\—E an" _ “ ‘NE,

A _u:r,_E 0,, L.y._,_n_,l am, » 3.131311 n; ‘EREE EX L~]E'lI§E|JEl?]' —am3es
fenetre contenant ;._[L_”;'; n‘__,“.3hj[_A3. uni-:1, M 510137 DE [ZLTEUE
, .. '-._ ;_’,,.. ' urn uurnrmnzxn
13 deﬁmtlon dc '°‘I””""‘ '3' ("i""' ' 1.33.1‘, M sacnriu n .sLIEr:1:r

. 9.[CPj.‘J [I:=:ElIB¢—E—aLL , , , 1 ,
cette Val-lable. LILIV, ’* EJ-.EIIl1I L !uJ\']2E.BE ‘pr ‘hr

 

Figure 2: navigation sous CASH
2.3.2 WICALE version 1.0

Un me'ta-EDL minimal pour la TA, WICALE version 1.0 (V. Carpena 2004) a ete construit en
2005. Il offre aux linguistes les memes services d’echange de donnees que CASH, mais aucun
autre. En ce sens, il est « minimal ». Par contre, il est « generique » car il permet de travailler
avec plusieurs EDL. D’un autre cote, CASH est tres riche et tres utile pour travailler
speciﬁquement avec Ariane-G5. WICALE 1.0 a eté experimente avec les EDL d’Ariane-G5,
de PILAF et d’UNL (UNL-deco du GETA).
Table 2 : compamison entre CASH et WICALE 1.0

Echange de Edition de Navigation dans Généricité Aide aux

commandes et données données les données linguistes
CASH oui oui oui  é oui
WICALE 1.0 oui non non oui non

WICALE presente deux avantages principaux, la genericite et la portabilite.

136

Vers un me'ta-EDL complet, puis un EDL universel pour la TAO

généricité .' on peut etendre WICALE a un nouvel EDL sans ecrire de code Java, mais
simplement en de'criVant les commandes et les donnees de cet EDL

portabilité .' elle est simplement due au fait que Java existe dans pratiquement tous les
environnements logiciels actuels.

WICALE permet de de'ﬁnir l’architecture et les commandes d’exe'cution des systemes
connectes. (Des exemples pour Ariane-G5, PILAF et UNL-Deco sont donne's en annexe.)

§ lute de selveulslinguisliques _|El|1|
Fit: er Cnmmamle Aide

IEE EIEEIEIE
|j <Sé|ect\onner un senreur>
9 |:|Ar\ane

9 |j Les actions 91 Interrogations glubales
D Liste des name :19 corpus
D Liste des name :19 textas pour un nu plusieurs corpus
D Lisle du cnntenu dun nu BIUSVQUFB {axles pour un nu plusieurs corpus
D Liste des numérns de chaines crexécutinn pour une nu plusieurs chaTnes
D Lisle du cnntenu des chaTnes wexécutinn
D Liste des résultats de traitement
D Afﬁchage des couples the langues de traitement
D Etat général das compilations

9' |j LVSTQ des composants dune ou plusleurs phases

9' |:I Préparatlun ues cumpusants llngulstlques da chaque phase

9' |j Préparatlun ues Corpus et des Iexles

9' |:| Préparatlun pour |'exécu1IUn

9' |j L‘exéI:L.mnn puur Ia muse au paint mas nurnpnsants Ilngulstlques

D Pilaf

D um

Sélectiunnet un SEIVEIH puis Ie menu commands.

  

Figure 3 : représentation des commandes et sous-commandes d 'un EDL sous WI CALE

   

' 5|
V ‘ ’. at me VS U2 mu 2 2 an U25
WICALE genere 1 interface Mhgwm D EBTI 0 “ C V

       

correspondant aux parametres pm, Chamedbxécutiun
de'ﬁnis dans l’architecture de
chaque systeme. Exemple: en
Ariane-G5, l’architecture est
Machine>Disque>Langue>.

 

F Avﬁchev We vésultat dans un ﬁcmev

(Le code XML de'criVant cette 
architecture a été supprime' de

l'annexe, faute de place.)   

Figure 4 : inteiffkzce générée par WICALE 1.0

3 Enrichissement d’un méta-EDL générique: WICALE 2.0

Nous avons cherche' a enrichir WICALE 1.0 en utilisant la méme technique ge'ne'rique.

3.1 Edition en local

On utilise tout editeur disponible (choix parametrable), alors qu’Ariane-G5 utilise seulement
XEDIT, et on s’inspire aussi d’Ariane-G5 au niveau fonctionnel : par securite, l’utilisateur
edite toujours une copie du composant e'dite. 11 y a deux modes, V (Visualisation) et M
(Modiﬁcation) : dans le premier, les modiﬁcations effectuées n’ont aucune consequence (on
avertit cependant l'utilisateur !).

137

Hong-Thai NGUYEN, Christian BOITET

Cette extension de WICALE 1.0 a ete tres facile a realiser, grace a la modularite et a la
genericite du code.

3.2 Navigation

11 s’agit ici d’offrir une possibilite similaire a celle de CASH (irnplementee par des scripts ad
hoc). Nous avons propose et implemente une solution simple basee sur XML et inspiree de
Doxygen, un outil de generation de documentation (Doxygen).

Dans cette approche, un programme analyse et marque la liaison entre les occurrences et la
deﬁnition de chaque element. De plus, il prend en compte certains commentaires speciaux
(auteur, date, resume, ...). Finalement, un generateur produit des ﬁchiers HTML 0111 toutes les
occurrences dans le source deviennent des liens pointant Vers la page contenant la deﬁnition.
L’utilisateur navigme dans l’ensemble de ces ﬁchiers HTML en utilisant n'importe quel
navigateur Web.

Dans WICALE 2.0, la preparation des ﬁchiers de navigation se passe de la meme facon, en

trois etapes:
transformation en XAJL du code source des composants lingliciels, realisee dans notre cas
par le compilateur d’Ariane-Y ;
marquage : parcours de la structure intermediaire XML de chaque composant et insertion
de liens entre deﬁnitions et occurrences ;

génération d'un ﬁchier html pour chaque composant, avec ajout a chaque occurrence d’un
element d'un lien Vers la position de sa deﬁnition.

Voici un exemple tire d'un composant de "deﬁnition de Variables" (deﬁnition d'un jeu de
decorations linguistiques) :

 

** Commentaires entre 2 étoiles et point. —SNSI- MT(@S)~INC~SPR -ALORS-
** Transformation statique Jeu_1 --> Jeu_2. —SNSI- MT(@S)~INC~IPF -ALORS-
—DECVAR— dv . ** Nom du composant: DV. —SNSI- MT(@S)~INC~SPF‘ —ALORS—
-DECO- deco A ** Nom du jeu : deco. —SNSI- MT(@S)~INC-IPA -ALORS-
MT ** Temps morphologique. —SNSI- MT(@S)~INC-FUT -ALORS-
== (IMP,IPR,SPR,IPA,SPA,INF‘,PPR,PPA,F‘UT,CDL) . —SNSI- MT(@S) —INC—CDL —ALORS—
SEXE == (FEMININ, MASCULIN) . —SNSI- MT(@S)—INC-IMP —ALORS—
DGA == (SYN, ANA, NO), —SNSI- SUBV(@S)-E—INF‘ —ALORS—
 —SNSI- SUBV(@S)~E—PPR —ALORS—
—CVAR~ —SNSI- SUBV(@S)~E—PPA —ALORS—
** Transformation complémentaire (procedure). -FSI-.

CHGMT (C ; @S) == 

—SI- MT(@S) ~INC—IPR —ALORS~ MT(C) :=IPR; -FIN-

mm
3.

l‘i..| U11 Lw. (IVIIVIII

     

   

mI'I<‘r\\
w m w\ in um up» n ’H:x
l\ nu inn

\i v

 

\|-' \m Hm

 

ml ‘in 11‘. t.x-- .

   

w. mm. (IVVIIVIIII

   

Figure 5 : navigation sous WICALE 2.0

Apres la generation, on a des ﬁchiers HTML et on peut y navigler.

138

Vers un me'ta-EDL complet, puis un EDL universel pour la TAO

4 Intégration d'une base de données lexicales multilingue

4.1 Nécessité & difﬁculté

4.1.1 Nécessité

Si l'on veut de'velopper un systeme de TA heterogene grace a un EDL, il faut y centraliser de
traitement des parties multilingues. En approche transfert, cela implique de traiter les
grammaires et les dictionnaires de transfert, la partie lexicale etant la plus importante.

En approche par « pivot interlingme », il faut centraliser le developpement des dictionnaires
pivot-Li, pour chaque langue Li. G.Serasset a de'veloppe un premier exemple d’une telle base
lexicale dans le serveur UNL-deco pour traduire le site B@bel de l’UNESCO en francais,
espagnol, russe, et chinois (C. Boitet 2005).

4.1.2 Problémes rencontrés lors de travaux antérieurs

CICC. C’est un projet de l’ODA (Overseas Development Agency) pour la TAO «a
pivot» entre japonais, chinois, tha‘1‘, malais et indonesien, ﬁnance par de grosses societes
japonaises actives en TAO. On y tenta de de'velopper le vocabulaire IL comme un
ensemble de « concepts », identiﬁes uniquement a l’aide de deﬁnitions en anglais. Mais
cette contrainte etait trop forte (comment distinguer 2 poissons par 2 deﬁnitions ?), et il
n’y avait pas de base de données partagee en acces direct.

UWGate. Cette base de données lexicales centralise'e pour le projet UNL donne l’acces
par echange de ﬁchiers (gzip protege), meme pour un seul article de dictionnaire. De plus,
le de'lai d’attente est bien trop long (accuse de re'ception apres 2 ou 3 jours ou jamais, . .).

UNL-deco. Ce service web de de'conversion d’UNL vers le francais contient une base de
données lexicales accessible par le Web en temps reel, mais actuellement limite'e au
francais et a UNL. Elle n’a en fait pas e'te' utilisee pour de'velopper le systeme fra-UNL,
car elle n’offre aucun outil d’aide aux travaux lexicographiques (tri, ﬁltre, aide a
l’indexage. . .) et elle est inextensible a N langues, au contraire de CASH+PARAX.

4.1.3 Difﬁculté de principe

Les problemes decrits plus haut nous semblent provenir d'une difﬁculte de principe, a savoir
que le probleme tres general de construire une base de données lexicales « universelle » pour
la TAO, capable de gerer tous les aspects, de la construction des données jusqu’a l’extraction
automatique de dictionnaires des modules des diffe'rents systemes (ex. analyse morphologique
de Systran, transfert lexical de Neon), est quasiment insoluble.

Non seulement les difﬁcultes theoriques sont encore plus grandes que dans le cas d’une base
lexicale multilingue « d’usage », destinee aussi a la recherche en dictionnairique multilingue,
comme la base Papillon (Projet PAPILLON), mais les difﬁcultes pratiques sont quasiment
insurmontables (diversite des formats, et pire encore de la nature des informations, problemes
de droits de propriete intellectuelle (IPR)).

4.2 Une premiere approche, se limiter :21 des systemes de TAO a pivot

L’analyse re'sumee ci-dessus a cependant montre qu’il devrait étre possible de simpliﬁer ce
probleme et d’arriver a un probleme soluble en theorie, et a une realisation utile en pratique.
La simpliﬁcation dont il s’agit a deux aspects :
on considere une architecture lexicale «en etoile », ou «a pivot», ce qui revient a se
limiter a des systemes de TAO a « pivot lexical ».

139

Hong-Thai NGUYEN, Christian BOITET

on renonce a ce que le systeme controle totalement les donnees lexicales, jusqu’a leur
representation « code'e » dans les divers systemes de TAO considere's.

Cette approche a de'ja e'te re'alisee et validee par la base de données lexicales PARAX (Blanc
1999). Mais cet environnement de de'veloppement, tres adapte pour les manipulations
lexicales, ne permet pas le travail cooperatif a distance. PIVAX s’inspire donc de PARAX,
mais l’e'tend au niveau structurel, et vise un fonctionnement distribue de type Wiki.

4.3 Vers PIVAX, une base de données lexicales contributive pour
systemes a pivot lexical

I

I

I . IADI-L1 l

_  - Iy Languez
. WW I
sysxe-ne ﬁe mm »_ ' Enwmm *

ueéu

: ””””””””” ’ ’ I C

. _ ‘

Systnme as no 2 A —»L—— TAO2-L2 I Lgngua

I I , Plml
I _ “CH2 In enmdem . 4 mm} LEHQIAE a
I I
I I
I I ;_

Lzirgun 2

Erma

I .
I L
System: 65 TAC 3 I TAU3-L3 I
I ‘ |AI\gI.Ie 5
: TAONVLJ I
‘- -------  -------- --*

lnformations lexicales trait'es par PIVAX K

Figure 6: Schema de I ’irIfbrmation présentée dans PI VAX

Dans PIVAX, on considere que chaque systeme possede ses propres linguiciels prive's non
geres par PIVAX, et partage via PIVAX la partie « pivot» ainsi que sa partie « publique ».
Dans la partie prive'e, on mettra par exemple des inforrnations spe'ciﬁques re'servees pour ce
systeme comme les codes (morphologiques, syntaxiques et se'mantiques) lies aux LSPL, les
familles derivationnelles (UL du GETA), et les formules semantiques. La partie «pivot»
contient des unites conceptuelles (IF, CATALYST) ou des acceptions interlingmes (ATLAS-
II, ULTRA, PIVOT, UNL), et la partie «publique» contient des lemmes ou des lexies
(lemme avec indication de sens), entites par essence non proprietaires.

PIVAX sera accessible pour le travail lexicographique (humain) par une interface du type de
celle de PARAX. D’autre part, PIVAX offrira une API pour la synchronisation avec divers
systemes de TAO, realisee avec les modules existants de WICALE. Notons enﬁn que PIVAX
est de'veloppe sur la plate-forme Jibiki de G. Se'rasset, deja utilise'e pour de'velopper la base
lexicale PAPILLON, la terminologie multilingue de la Convention Alpine (Projet LexAlp), et
le Grand Dictionnaire Estonien-Francais GDEF (Projet GDEF).

Conclusion et perspectives

Nous avons expose la conception d'un me'ta-EDL ge'ne'rique et d'un EDL « inte'grateur », qui
ne seraient pas necessairement limites a la TAO comme WICALE. Dans un premier temps,
nous avons cherche a incorporer au me'ta-EDL WICALE 1.0 toutes les fonctions de CASH.
Concretement, nous y avons ajoute une possibilite d’edition des composants linguiciels, puis
une possibilite de navigation utilisant une compilation « legere » vers un format XML,

140

Vers un me'ta-EDL complet, puis un EDL universel pour la TAO

obtenant WICALE 1.1. D'autre part, nous avons decrit la construction en cours de PIVAX,
une base de donnees lexicales contributive a pivot interlingue destine'e a la TAO et aux autres
applications multilingues (RI, traitement de contenu. . .). Nous espe'rons pouvoir pre'senter lors
de TALN une premiere version de PIVAX, appliquee au de'veloppement de la base lexicale du
projet UNL/U++ (francais, anglais, espagnol, russe au moins).

Références

BLANC, E. (1996). Une maquette de base lexicale multilingme a pivot lexical ("acceptions
multilingues"): PARAX. Actes des quatriemes Journees scientifiques du Reseau ”Lexicologie,
Terminologie, Traduction” ale l'AUF, Lyon (France), 43-58.

BLANC, E. (1999). An interactive hypertextual environment for MT development. MT Summit
V111, Santiago ale Compostela, Galicia, Spain, EAMT, 67-81.

BOITET, C. (1988). Dictionnaires inte'gres multiusage et multicible, une premiere expre'rience.
Colloque sur l'histoire ale la terminologie, Inistitut Libre Marie Haps, Bruxelles, 6 p.

BOITET, C. (1989). Software and lingware engineering in modern M(A)T systems.
Computational Linguistics, an International Handbook on Computer-Oriented Language
Research and Applications, Niemeyer, 670-682.

BOITET, C. and NEDOBEJKINE, N. (1986). Towards integrated dictionary for M(a)T:
motivations and linguistic organization. Proc. COLING-86, Bonn, 1/1, 423-428.

CARPENA, V. (2004). Interface cliente ge'nerique pour le pilotage de serveurs linguistiques.
Memoire CNAM GETA, CLIPS, Grenoble, 86 p.

DOXYGEN. http://www.stack.nl/~dimitri/doxvgen/, accede en 2007.

LAFOURCADE, M. (1994). Ge'nie Logiciel pour le Ge'nie Lingmistique. These, UJF, Grenoble.

MANGEOT—LEREBOURS, M. (1999). Acces unique a des dictionnaires he'te'rogenes. V1e
journees scientifiques du reseau thematique LTT ale l'AUF (Lexicologie, Terminologie,
Traoluction), 311-316.

MANGEOT-LEREBOURS, M. (2001). Environnements centralise's et distribues pour
lexicographes et lexicologmes en contexte multilingme. These, UJF, Grenoble, 279 p.

MANGEOT-LEREBOURS, M., SERASSET, G. (2001). Projet Papillonz architecture du serveur
Web. JST'2001 Journees Science et T echnologie, National Olympic Memorial Youth Center,
Tokyo, Japon 1/1, 149-150.

NEY, H., OCH, F. J. AND VOGEL, S. (2000). Statistical Translation of Spoken Dialogmes in the
Vermobil System. Proc. MSC2000, 69-74.

NGUYEN, H.-T. (2005). Vers un "me'ta-EDL", puis un "EDL generique" pour la TAO.
Memoire de master recherche (M2R), UIF, Grenoble, 85 p.

NIRENBURG, S. AND FREDERKING, R. (1994). Toward multi-engine machine translation. Proc.
ofthe workshop on Human Language Technology, Plainsboro, New Jersey, USA, 147-151.

PROJET PAPILLON (2003). http://www.papillon-dictionarv.org/, accede en 2007.

PROJET ARIANE-Y (2004). http://www-clips.imag.fr/geta/User/iean-
philippe.gilbaud/DOCUMENTS/ARIANE-Y/ARIANE-Y-Index.html, accede en 2007.

PROJET C-STAR (2004). http://www.c-star.org/, accede en 2007.

141

Hong-Thai NGUYEN, Christian BOITET

PROJET UNL (1997). http://www.un1.ias.unu.edu/, accede en 2007.
PROJET GDEF (2005). htm://estfra.ee/Homepo, accede en 2007.
PROJET LEXALP (2004). http://217.199.4.152:8080/general/lexalp/index.php, accede en 2007.

SENELLART, J ., YANG, J. AND REBOLLO, A. (2003). Technologie “Intuitive Coding” de
SYSTRAN. MTSummit1X, 8p.

SERASSET, G. (1994). SUBLIM: un systeme universel de bases lexicales multilingues et
NADIA: sa specialisation aux bases lexicales iI1t€I'1iI1@.1CS par acceptions. Thése, UJF,
Grenoble, 194 p.

SYSTRAN (2006). httpsz//systran.fr, accede en 2007.

Annexe
Exemple de declaration des commandes d’Ar1ane-G5, de PILAF et d’UNL-deco :
< !—~Description des commandes Ariane—G5 ——>
<LST_SERVEUR>
<SERVEUR>
<nom_serveur>ARIANE—G5</nom_serveur> < !——Nom de serveur ——>
<classe>ServerAriane</classe> < !——Type de serveur ——>
<Communication>Socket</Communication> < !——Protocole de communication——>
<adresse>tupai.imag.fr</adresse> < !——Adresse du serveur ——>
<port>5768</port> < !——Port du serveur ——>
<codage>iso—8859—l</codage> < !——Encodage des données ——>
<entete ligne> &lt;&lt;&lt; 19283 &gt;&gt;&gt; ——— premier enregistrement ———
ARIANET —7— LIDIA20 ———. </entete_ligne>
<fin ligne> &lt;&lt;&lt; 19283 &gt;&gt;&gt; ——— premier enregistrement ——— ARIANET
——— LIBIA2o ——— </fin ligne>
</SERVEUR> _
<SERVEUR> <SERVEUR>

<nom_serveur>PILAF</nom_serveur>

<classe>ServerHttp</classe>
<communication>Http</communication>
<adresse>http://clips.imag.fr/cgi—

bin/pilaf/</adresse>

<port></port>
<codage>iso—8859—l</codage>
<entete_ligne></entete_ligne>
<fin_ligne></fin_ligne>

</SERVEUR>

Description de la commande d’Ariane-G5 qui demande la liste des noms des corpus. En natif,

<nom_serveur>UNL</nom_serveur>

<classe>ServerUnl</classe>
<communication>Socket</communication>
<adresse>tupai.imag.fr</adresse>
<port>5768</port>
<codage>iso—8859—l</codage>
<entete_ligne></entete_ligne>
<fin_ligne></fin_ligne>

</SERVEUR>
</LST_SERVEUR>

sa forme est LISNOMCORP (Terminal | Imprimante | TI).

< COMMANDE num_cde =" 1" >
<num_cde>l</num_cde>
<nom_cde>LISNOMCORP</nom_cde>
<intitule_cde>Liste des noms de
corpus</intitule_cde>
< PARAMETRE_SAI S IE > < / PARAMETRE_SAI S IE >
< SYNTAXE >
<ETAPE >
<mot_cle>TRAIT =
</mot_cle>
<num_param></num_param>
<expression></expression>

LISNOMCORP (*)

<separateur>&retour_chariot;</separateur
>...

<saisie_obligatoire>false</saisie_obliga
toire>
< /ETAPE>
</SYNTAXE>

142

<RESULTAT>
<resultat_OK>—> Tout est
O.K.</resultat_OK>
<resultat_type>—> Tout est

O.K.</resultat_type>

<ETAPE>

<nom_methode>find</nom_methode>

<expr_deb>Liste des noms de
corpus</expr_deb>

<expr_corps> [A—Za—z0—9]*
</expr_corps>

<expr_fin> —LISTE TERMINEE —
</expr_fin>

<expr_concat>&retour_chariot;</expr_c
oncat>

<expr_remplacement></expr_remplacemen
t>
</ETAPE>
</RESULTAT>
</COMMANDE>

