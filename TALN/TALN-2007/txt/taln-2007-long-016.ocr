TALN 2007, Toulouse, 5-8 juiu 2007

SemTAG, une architecture pour le developpement
et l’utilisation de grammaires d’arbres adjoints
£1 portée sémantique

Claire GARDENT1, Yannick PARMENTIER2
1 CNRS / LORIA, Campus scientiﬁque — BP 259
F-54 506 Vandoeuvre-Les-Nancy CEDEX
2 INRIA / LORIA — Nancy Universite, Campus scientiﬁque, BP 259
F-54 506 Vandoeuvre-Les-Nancy CEDEX
{gardent , parment i }@1oria . fr

Resume. Dans cet article, nous presentons une architecture logicielle libre et ouverte pour
le developpement de grammaires d’arbres adjoints a portee semantique. Cette architecture uti-
lise un compilate11r de metagrammaires aﬁn de faciliter l’extension et la maintenance de la
grammaire, et integre un module de construction semantique permettant de veriﬁer la couver-
ture aussi bien syntaxique que semantique de la grammaire. Ce module utilise un analyseur
syntaxique tabulaire genere automatiquement a partir de la grammaire par le systeme DyALog.
Nous presentons egalement les resultats de l’evaluation d’une grammaire du francais develop-
pee au moyen de cette architecture.

Abstract. In this paper, we introduce a free and open software architecture for the deve-
lopment of Tree Adjoining Grammars equipped with semantic information. This architecture
uses a metagrammar compiler to facilitate the grammar extension and maintnance, and includes
a semantic construction module allowing to check both the syntactic and semantic coverage
of the grammar. This module uses a tabular syntactic parser generated automatically from this
grammar using the DyALog system. We also give the results of the evaluation of a real-size
TAG for French developed using this architecture.

Mots-cles 2 analyseur syntaxique, grammaires d’arbres adjoints, construction seman-
tique, architecture logicielle.

Keywords: syntactic parser, tree adjoining grammars, semantic construction, software
architecture.

1 Introduction

Un objectif central du traitement automatique des langues est de construire une representa-
tion du sens des textes aﬁn de pouvoir raisonner sur leur contenu. Suivant la granularite de
sens desiree, plusieurs approches sont possibles. Typiquement, la recherche d’information s’ap-
puie s11r une representation « a gros grain » ou le sens d’un texte est un « sac de mots » (cf.

175

Claire GARDENT, Yannick PARMENTIER

1a) ; l’ext1action d’information demande une représentation plus ﬁne ou en particulier les rela-
tions sémantiques entre (sens de) constituants doivent étre spéciﬁées (cf. 1b) ; et les systemes
de dialogue, systemes questions-réponses ou systemes de détection d’implications textuelles,
s’appuient souvent s11r une représentation dite « profonde » ou des phénomenes tels que la
quantiﬁcation et les modalités pourront étre pris en compte (cf. 1c).

(1) L’homme regarde souvent la maison
a. { homme, regarde, maison }
b. h0mme( h), regarde(h,m), mais0n( m)
c. E|.z‘E|yE|e.h0mme(x) /\ s0uvent(e) /\ regarde(e,h,m) /\ mais0n(m)

Pour construire le troisieme type de représentation c.-a-d., une représentation profonde, une ap-
proche communément adoptée est de suivre Montague (Montague, 1974) et de développer des
grammaires et des lexiques permettant une sémantique compositionnelle c’est-a-dire, une sé-
mantique ou le sens d’un constituant est une fonction de la syntaxe de ce constituant et du sens
de ses sous-constituants. Ainsi, les grammaires syntagmatiques  par les tétes (HPSG,
(Copestake et al., 2005)) integrent une sémantique basée sur les structures a recursion mini-
male (MRS), les grammaires lexicales fonctionnelles (LFG, (Frank & Van Genabith, 2001))
couplent la construction syntaxique avec une construction sémantique basée s11r la sémantique
« colle » (glue semantics) et les grammaires catégorielles combinatoires (CCG, (Bos et al.,
2004)) utilisent l’isomorphisme de Curry-Howard pour associer de facon systématique, consti-
tuants syntaxiques et termes lambda. Pour chacune de ces grammaires, une implantation existe
qui démontre la faisabilité de l’approche théorique sous-jacente et en permet l’utilisation pra-
tique dans des systemes de TAL.

Une exception notoire conceme la construction sémantique dans les grammaires d’arbres ad-
joints (Joshi et al., 1975). Pour ces grammaires en effet, des propositions théoriques existent
mais aucune implantation. Dans cet article, nous reprenons la proposition théorique avancée
par (Gardent & Kallmeyer, 2003) et décrivons sa mise en oeuvre dans un systeme implanté.
Nous présentons les différentes composantes du systeme (grammaire, compilate11r de gram-
maire, module de construction sémantique) et donnons les résultats d’une premiere évaluation
s11r une grammaire noyau du francais. Utilisé po11r développer une grammaire d’arbres adjoints
a dimension sémantique pour le francais, ce systeme est a notre connaissance, le premier sys-
teme logiciel libre permettant la construction de représentations sémantiques profondes pour le
francais. En effet, il existe une grammaire HPSG po11r le francais (T seng, 2003) mais sa couver-
ture est limitée. Une grammaire LFG existe également mais étant développée par Xerox, elle
n’est pas disponible pour la recherche. Par contraste, SEMTAG est un logiciel libre et ouvert.
Le logiciel de développement est disponible al ’url http : //trac . loria. fr/~semtag
avec une grammaire jouet. La grammaire est accessible sur demande et sera rendue disponible
prochainement.

L’article est struct11ré de la facon suivante. Nous commencons (section 2) par présenter le mo-
dele linguistique utilisé c.-a-d., les grammaires d’arbres adjoints, la sémantique plate a trous et
l’interface syntaxe/sémantique. Nous présentons ensuite brievement (section 3) la grammaire
du francais utilisée et donnons quelques chiffres sur sa couverture act11elle. Dans la section 4,
nous présentons le module de construction sémantique. Enﬁn, la section 5 donne les résultats
d’une premiere évaluation du systeme en termes de couvert11re et d’ambiguité syntaxique et
sémantique.

176

Une architecture pour le developpement de grammaires TAG

2 Modéle linguistique

Le modele linguistique inclut une grammaire d’arbres adjoints, un langage de representation
semantique et une modelisation de l’interface syntaxe/semantique. Les restrictions d’espace
nous empéchant de decrire chacune de ces composantes en detail, nous renvoyons le lecteur
aux publications sources pour plus de details.

Formalisme syntaxique : les grammaires d’arbres adjoints (TAG) Les grammaires
d’arbres adjoints (Tree Adjoining Grammars, TAG) (Joshi et al., 1975) appartiennent a la fa-
mille des grammaires legerement sensibles au contexte. Une TAG est un systeme de reecrit11re
d’arbres compose de deux ensembles d’arbres (arbres initiaux et arbres auxiliaires) et de deux

operations de reecriture (substitution et adjonction).

Un arbre initial est un arbre dont les noeuds feuilles sont soit etiquetes par des mots, soit des
noeuds de substitution (marques i) c.-a-d., des noeuds ou une substitution doit prendre place.
Un arbre auxiliaire est un arbre contenant un noeud  (marque *) — ce noeud  doit étre
etiquete avec la méme categorie que le noeud racine.

Dans la version de TAG que nous utilisons, a savoir les grammaires d’arbres adjoints lexicalisees
a structures de traits (FLTAG, (Vijay-Shanker & J oshi, 1988)), les arbres elementaires sont
lexicalises, c’est-a-dire que po11r chaque arbre, au moins un terminal est un lemme ou une forme
ﬂechie. En outre, les noeuds des arbres sont etiquetes par deux structures de traits appelees TOP
et BOTTOM. En ﬁn de derivation, les traits TOP et BOTTOM de chaque noeud sont uniﬁes.

L’operation de substitution permet d’inserer un arbre elementaire ou derive 7;; a la frontiere d’un
arbre initial Ta : le noeud racine de 7,; est alors identiﬁe avec un noeud de substitution dans Ta
et les traits TOP des noeuds en question sont uniﬁes (Topm = Top”). L’operation d’adjonction
permet d’inserer un arbre auxiliaire 7'3 dans un arbre quelconque Ta a un noeud n : les traits
TOP” et BOTTOM” du noeud 71 oil se fait l’adjonction sont alors uniﬁes respectivement avec les
traits TOP du noeud racine de l’arbre auxiliaire et les traits BOTTOM de son noeud pied (Topn
= Topgootm et Bottom” = Bottompootm).

Formalisme semantique : la semantique plate 2‘: trous (Hole Semantics) Comme la MRS
mentionnee en section 1, le formalisme des semantiques plates 51 trous (Bos, 1995) se caracterise
par deux points importants. Premierement, le formalisme permet de sous-speciﬁer les ambigui-
tes de portee — ainsi les interpretations multiples dues a ces ambiguites peuvent étre representees
de facon compacte. Deuxiemement, (Copestake et al., 2005) ont montre que la structure non re-
cursive des formules plates facilite la realisation semantique c.-a-d., la procedure qui permet
de produire, a partir d’une representation semantique donnee, l’ensemble des phrases associees
par la grammaire a cette semantique. C’est la un point important puisque de fait, la grammaire
presentee ici est egalement utilisee po11r la realisation.

Tres brievement (cf. (Gardent & Kallmeyer, 2003) pour plus de details), le langage de repre-
sentation semantique LU utilise est une reformulation de la logique PLU (Bos, 1995) qui inclut
des variables d’uniﬁcation. Soit I W, un ensemble de variables d’uniﬁcation et I am un ensemble
de constantes. Soit H un ensemble de constantes « trous », Lam, un ensemble de constantes
« etiquettes » et L1,," un ensemble de variables d’etiquettes ; soit R un ensemble de relations
n-aires s11r Iv," U I m U H ; et soit 2 une relation sur H U Lam nommee « a-portee-s11r ». Alors,

177

Claire GARDENT, Yannick PARMENTIER

la syntaxe de LU est la suivante :

Etantdonnésl 6 L1,," UL,,,,,, h E H, 2'1, . . .,i,, E Iv," UICW UHetR" E R. Alors:
1. l : R"(i1, . . . ,i,,) est une formule de LU
2. h 2 l est une formule de LU
3. qb, 1b est une formule de LU si 1b est une formule de LU et qb est une formule de LU
4. Rien d’autre n’est une formule de LU

En d’autres termes : les formules de LU sont soit des prédications élémentaires, soit des
contraintes de portée, soit des conjonctions de formules. Sémantiquement, ces formules dé-
crivent (ont po11r modele) des formules de la logique du premier ordre.

Par exemple, la représentation sémantique de la phrase « Tout yogi a un guru » est :

 lo I V(.’L',h1,h2),h1 2 l1,l1 I YO(.’L'),h2 2 l2,l2 I A(.Z',y),l3 I h3,h4),h3 2 l4,l4I
Gu(y),h4 2 l2

Cette formule a deux modeles reﬂétant les deux interprétations possibles de la phrase d’entrée :
soit un méme guru existe po11r tous les yogis, soit plusie11rs.

(3) lo 1V(.’L‘, l1, l3), l1 IYO(.’L‘), l3 1 E|(.’L‘, Z4, l2), l4 1  l2 1 A(.’L‘, y)
l3 1E|(.’L‘,l4,l0),l4 I  lo IV(.’L‘, Z1, Z2), l1 1 Y0(.’L‘), l2 1 A(.’L‘, y)

Interface syntaxe / sémanﬁque. L’interface entre grammaire et sémantique spéciﬁe la cor-
respondance entre constituants syntaxiques et constituants sémantiques. Cette spéciﬁcation se
fait conformément a la proposition de (Gardent & Kallmeyer, 2003). Chaque arbre élémentaire
de la grammaire TAG est associé a une formule sémantique plate ou des variables d’uniﬁca-
tion sont utilisées po11r représenter les arguments sémantiques. Ces variables d’uniﬁcation sont
partagées avec des variables apparaissant dans les structures de traits étiquetant les noeuds de
l’arbre. Lors de la dérivation TAG, les structures de traits des arbres élémentaires sont uniﬁées
(cf. supra), ce qui indirectement, entraine l’uniﬁcation des arguments sémantiques. La compo-
sition sémantique est ainsi prise en charge par l’opération d’uniﬁcation inhérente au formalisme
TAG. A l’issue de la dérivation, la représentation sémantique de l’arbre dérivé est obtenue en
prenant la conjonction des formules élémentaires modulo les uniﬁcations ayant eu lieu.

P[lab:l1] ’ ______________  __________________ 
GN[id:‘»:::]\““(i§7E’fj”’l“b‘l‘] V[lab:l1] :’GN[“”"”’“""‘] ‘X V[iabz2] GN[m m]
Je|an ai1|ne  V[,,,,,,,,]* Adv Marie
 iiii  vraiinent
lo :jean(j) l1 : aimer(x, 3;) l2 : vrlaz':7,«;nt(h0), lg : marie(m)
s _ 0

FIG. 1 — Dérivation TAG po11r « Jean aime vraiment Marie »

178

Une architecture pour le developpement de grammaires TAG

Par exemple, pour la phrase « Jean aime vraiment Marie », la derivation TAG correspondante
est donnee dans la ﬁgure 11. Lors de la substitution de l’arbre associe 51 Jean (TJEW) s11r l’arbre
associe au predicat aimer (Tamer), le noeud racine de 775,", est uniﬁe avec le noeud GN de Tamer
representant la fonction grammaticale sujet. Le noeud GN de l’arbre resultant contient alors une
structure Top avec un trait idx de valeur x et une structure Bottom avec le méme trait idx ayant
la valeur j. A l’issue de la derivation, les structures Top et Bottom etant uniﬁees, la variable x
est liee a la constante j. De facon similaire, la variable y est liee a la constante m lors de la
substitution de l’arbre 7'M,m<e s11r Tamer. Enﬁn, l’adjonction de l’adverbe vraiment sur le noeud
de categorie V de Tamer entraine l’uniﬁcation de la structure Bottom du noeud  de Tm-wiment
avec la structure Bottom du noeud d’etiquette V en question, ce qui provoque l’uniﬁcation de
la variable ls avec la constante ll. Ainsi, apres derivation et uniﬁcations correspondantes, la
conjonction des formules semantiques elementaires nous donne le resultat escompte, a savoir la
representation semantique sous-speciﬁee suivante :

lo : jean(j), l1 : aime(j, m), l2 : 'uraz'ment(h0),l1 3 h0,l3 : marie(m)

3 Grammaire informatique

La grammaire SEMFRAG est une implantation du modele linguistique presente ci-dessus. Spe-
ciﬁee a l’aide du formalisme XMG (Duchier et al., 2005), cette grammaire est produite par com-
pilation a partir d’une speciﬁcation linguistique relativement abstraite et fortement factorisee.
La composante syntaxique de la grammaire a ete decrite dans (Crabbe, 2005) et la composante
semantique par (Gardent, 2006). Brievement, l’integration de l’information semantique dans
une grammaire TAG est facilitee par deux points.

Premierement, la decoration des arbres elementaires avec les variables necessaires a un traite-
ment a grande echelle de la semantique obeit a un ensemble de principes limites en nombre et
relativement rapides a implanter dans le formalisme XMG grace au haut degre de factorisation
permis par ce formalisme. Ces principes sont explicites dans (Gardent, 2007).

Deuxiemement, l’expressivite de XMG facilite la speciﬁcation de l’interface syntaxe/semantique
et plus speciﬁquement, du partage des variables d’uniﬁcation entre formules semantiques et
arbres elementaires. En effet, XMG permet de gerer de maniere ﬂexible la portee des variables
d’uniﬁcation manipulees au sein des classes speciﬁees par le linguiste. En particulier, ces classes
peuvent étre associees a des matrices de traits appelees interfaces qui sont uniﬁees lorsque deux
fragments sont combines conjonctivement ou par heritage. Indirectement, cela permet d’uni-
ﬁer des variables introduites dans differentes classes et en particulier, des variables introduites
dans des classes syntaxiques (fragments d’arbres) d’une part et dans des classes semantiques

(formules de semantique plate) d’autre part. Cette fonctionnalite du formalisme nous permet

d’encoder de maniere relativement aisee l’interface syntaxe / semantique au niveau metagram-

matical, en utilisant la methodologie suivante :

— chaque fragment d’arbre contenant un noeud lie 51 une fonction grammaticale representant un
argument semantique, se voit associe un trait idx dont la vale11r correspond a une variable
partagee avec un trait de l’interface, nomme F Gidx (ou F G correspond a la fonction gram-
maticale en question),

‘Les structures top sont notees en exposants et les structures bot en indices. Seuls les traits semantiques perti-
nents pour 1’exemp1e sont indiqués.

179

Claire GARDENT, Yannick PARMENTIER

— chaque foncte11r sémantique est associé avec une formule sémantique ou les arguments sont
des variables partagées avec des traits de l’interface. Ces traits sont nommés en fonction du
role thématique de l’argument (p. ex. arg0 . . .),

— enﬁn, dans la regle de combinaison de ces fragments (munie également d’une interface), on
ajoute dans l’interface une coindexation entre F Gidx et l’argument sémantique correspondant
(ce qui nous permet également de gérer le cas du passif).

Ce procédé est illustré ﬁgure 2, en prenant l’exemple d’un verbe intransitifz.

Intransitif : Subjet : Actif : Relation 1-aire :
S
S s
NiWz=X1 VP /\ l 10 :Rel (I1)
— [‘dw=I]
10 :Re1(X) — Nil VP A VP
ar90=X sujIdx=I arg0=I1
suj I dx=X

(Résultat) (Fonction grammaticale) (Morph. verbale) (Sémantique)

FIG. 2 — Interface syntaxe / sémantique au niveau métagrammatical.

Comme dans le systeme XTAG, la grammaire SEMFRAG se décompose en 3 sous-modules :
un module contenant des d’arbres non lexicalisés groupés en familles3 ; un lexique de lemmes
associant a chaque lemme un prédicat sémantique et une ou plusie11rs familles d’arbres ; et
un lexique de formes ﬂéchies associant a chaque forme ﬂéchie, un lemme et l’information
morpho-syntaxique appropriée. Lors de l’analyse, ces trois modules sont consultés pour as-
socier a chaque mot 777, de la phrase analysée un arbre lexicalisé (c.-a-d., ancré avec m) dont la
sémantique inclut le prédicat spéciﬁé pour m par le lexique de lemme.

4 Construction sémantique

La grammaire SEMFRAG décrit l’association entre constituants syntaxiques et représentations
sémantiques. Comme le montrent (Gardent & Parmentier, 2005), po11r calculer cette association
(c.-a-d., pour produire la (ou les) représentations sémantique(s) associée(s) par la grammaire a
une expression langagiere), deux options sont possibles : soit la construction sémantique est
intégrée dans l’analyse syntaxique (la construction sémantique se fait pendant la dérivation),
soit elle se fait apres la dérivation sur la base de cette dérivation et d’un lexique sémantique
produit a partir de la grammaire et d’un lexique.

SEMTAG implante la deuxieme option, ce qui permet a la fois de rester dans le formalisme TAG
(cf (Kallmeyer & Romero, 2004)) et de garder une approche modulaire ou analyse syntaxique

2On remarque que la fonction grammaticale pourrait trés bien correspondre 5 une disjonction des différentes
réalisations syntaxiques.

3En TAG, une famille d’arbres regroupe tous les arbres élémentaires correspondant 5 un cadre de sous catégo—
risation donné p. ax., intransitive.

180

Une architecture pour le développement de grammaires TAG

et construction sémantique restent indépendants l’un de l’autre4. Concretement, le procédé de
construction sémantique repose sur le schéma suivant.

Etape 1. Dans un premier temps, toute l’information sémantique incluse dans la grammaire
est extraite et stockée dans un lexique sémantique. Ce lexique est en quelque sorte le parallele
sémantique de la grammaire syntaxique TAG au sens ou il associe a chaque arbre élémen-
taire TAG un arbre sémantique correspondant. La ﬁgure 3 illustre ce procédé d’ext1action pour
l’arbre associé a la forme ﬂéchie « dort » (arbre pour une utilisation avec un sujet nominal ca-
nonique). L’arbre du haut est celui produit par la compilation de SEMFRAG (suivie de la phase
d’ancrage des schémas d’arbres par l’information contenue dans les lexiques de lemmes et de
formes ﬂéchies), l’arbre en bas a gauche est l’arbre purement syntaxique extrait de cet arbre et
l’arbre en bas a droite, l’arbre sémantique (entree du lexique sémantique)5.

/ AI'bI'e 7'n0V_do1-t \

  
 
  

     

/p\ [ldz dort( e,|§|X)]

i en I1
g“ top ﬁllm E: ” mp [1, 5:]
‘"1 EX bot [lab Ele]
I
dort
Arbre syntaxique Lexique sémantique
Pm) /0\
g11l<1>[mP   V(2)[mP   1|:top [ind EIXH 2[bot [lab meﬂ
l
dort

K [Id : dort e, X)] 1

FIG. 3 — Entrée du lexique sémantique.

Etape 2. La deuxieme étape consiste a faire une analyse syntaxique de la phrase d’entrée en
utilisant uniquement la partie syntaxique de SEMFRAG. Cette analyse est réalisée au moyen du
systeme DyALog (Villemonte de la Clergerie, 2005), un compilate11r de programmes logiques
avec tabulation des calculs intermédiaires qui permet en particulier de compiler un analyseur
syntaxique a partir d’une grammaire TAG donnée. L’analyseur résultant de cette compilation
prend en entree une chaine préalablement segmentée, et retoume une forét de derivation decri-
vant de facon compacte l’ensemble des derivations couvrant la chaine d’entrée. Par exemple,
la forét de dérivation po11r la phrase ambigué « Jean regarde Anne avec le télescope » est celle
donnée en ﬁgure 4. Cette forét représente les deux dérivations possibles de la facon suivante.
Les noeuds de l’arbres sont étiquetés avec les noms des arbres élémentaires mis en jeu dans la

4Cette implantation correspond 5 la proposition de (Kallmeyer & Romero, 2004), l’avantage étant que les
structures étiquetant les nmuds ne contiennent pas de traits 5 valeur en nombre théoriquement inﬁni (p. ax., les
variables de label de la sémantique plate).

5Le lexique sémantique est done calculé par rapport aux arbres ancrés lors de l’analyse syntaxique.

181

Claire GARDENT, Yannick PARMENTIER

dérivation tandis que les arcs indiquent soit une substitution (trait plein), soit une adjonction
(trait en pointillés). Plus précisément, une ﬂeche étiquetée avec l’infor1nation (O, 71) et allant
du noeud étiqueté X vers le noeud étiqueté Y, indique que l’arbre X a été combiné par l’opération
O (O E {s, a} avec 5 po11r substitution et a pour adjonction) avec l’arbre Y en son noeud n.

Tregarde
(av 2)‘/_,<3','i (37 3)
Taiiec TJezm TA1me T,,47me
.‘
pm mm,
Ttelefcope *7 T;/uec """" ﬁg’
la, 0)
Tam

FIG. 4 — Forét de dérivation de la phrase « Jean regarde Anne avec un télescope ».

Etape 3. Enﬁn la troisieme étape consiste a produire a partir de la forét de dérivation produite
par DYALOG et du lexique sémantique extrait de SEMFRAG, la représentation sémantique de
la phrase d’entrée. Po11r ce faire, nous avons déﬁni et implanté en Prolog un algorithme de
construction sémantique qui traverse la forét de dérivation dans un processus descendant, et
réalise les uniﬁcations entre indices sémantiques comme résumé ci-dessous.

On note LeJo(x) = (7,, ([5,) l’association spéciﬁée par le lexique sémantique entre un nom d’arbre
syntaxique x, l’arbre sémantique 7', et la représentation sémantique ([5, : Lex1(x) = 7', et Lex2(x)
=m

Etant donnée une forét de dérivation et un lexique sémantique Lex, pour construire la (ou les)
représentations sémantiques associées, FAIRE :

1. (Initialisation) Po11r chaque racine(s) a de la forét de dérivation, extraire Lex( a) = (Ta, ¢,,)
du lexique sémantique Lex. Initialiser la sémantique de a a qba.

2. (Parcours descendant de la forét) Po11r chaque arc de dérivation de la forme (11 M (1,-
(ou an aj sont des noeuds représentant des arbres élémentaires, o l’opération utilisée et 71
l’adresse de Gorn du noeud ou a lieu l’opération dans l’arbre désigné par (1,), FAIRE :

— ajouter qbaj (= Lex2 ((13)) a la représentation sémantique qbai de (11

— combiner Ta]. (= Lex1(aj)) avec TM (= Lexl ((11)) conformément a l’opération spéciﬁée
par 0, n (les uniﬁcations correspondantes prennent place cf. section 2 instanciant par
« ric hochet » les variables d’uniﬁcation présentes dans les representations séman-
tiques).

3. Lorsque toutes les dérivations ont été traitées, les structures Top et Bottom étiquetant
chacun des noeuds des arbres sémantiques impliqués dans la dérivation sont uniﬁées.

En résumé : l’algo1ithme parcourt chaque arbre de la forét de dérivation ; collecte la sémantique
associée par le lexique sémantique avec chaque noeud (c.-a-d., arbre élémentaire) de cet arbre
de dérivation; et utilise les arbres sémantiques associés par le lexique sémantique aux noms
d’arbres syntaxiques, pour retranscrire au niveau sémantique, les uniﬁcations correspondants
aux opérations d’adjonction et de substitution réalisées au niveau syntaxique. Par exemple, pour
la phrase « Jean court », l’algo1ithme procede comme suit :

— Initialisation : qb = { l0 :c0urir(X) }

182

Une architecture pour le développement de grammaires TAG

— Traitement de l’arc 775,", s’—1'>0 7'w,".t :
— Incrément de la sémantique : qb = { l0 :c0urir(X), ll :jean( j) }
— Effets des uniﬁcations dues a la substitution de l’arbre sémantique associé a 775,", dans
l’arbre sémantique associé a 7'w,,,.t : qb = { l0 :c0urir( j), ll :jean( j) }

5 Evaluation

L’évaluation de cette architecture repose sur une évaluation de la grammaire du francais qu’elle
a permis de développer, en l’occurence la grammaire SEMFRAG présentée précédemment.
Cette grammaire décrit 87 familles d’arbres (cadres de sous-catégorisation), les lexiques utilisés
contiennent 1 471 formes ﬂéchies, rattachées a 603 lemmes. L’évaluation consiste a vériﬁer les
caractéristiques suivantes :
— la couvert11re syntaxique et sémantique s11r une suite de tests combinant la Test Suite for

Natural Language Processing ( TSNLP) avec une suite de tests complémentaire (S EMTEST)6,
— le taux moyen d’ambiguité sémantique (nombre d’analyses sémantiques par phrase).
Développée dans les années 90s, la TSNLP (Lehmann et al., 1996) est une suite de tests visant
a permettre l’évaluation et la comparaison d’analyseurs syntaxiques s11r un ensemble controlé
et annoté de données. Sur un ensemble de 1 495 phrases tests, SEMTAG a actuellement une cou-
vert11re syntaxique de 62.88 % et une couvert11re sémantique de 61.27 %. Le taux d’ambiguité
sémantique moyen est de 2.46.

Bien qu’elle ait été pensée pour une évaluation systématique des constructions syntaxiques, la
TSNLP échoue a prendre en compte certains types de variations dont en particulier, les varia-
tions sur la réalisation des arguments (canonique, relatif, questionné, cliticisé, clivé, etc.), les
variations sur la sous-catégorisation des verbes, les variations s11r le type de verbe (verbes a
controle, a montée, semi-auxiliaire, etc). Po11r pallier ce manque, nous l’avons complémentée,
avec une suite de phrases illustrant ces variations. Pour cette suite complémentaire, la couver-
ture syntaxique est de 86.78 % et la couverture sémantique de 85.02 %. Le taux d’ambiguité
sémantique moyen est de 3.14.

6 Conclusion

SEMTAG permet d’associer a une phrase du francais une representation profonde de sa seman-
tique compositionnelle. Comme la section précédente l’a montré, la grammaire utilisée est in-
sufﬁsante po11r avoir une couvert11re large. Pour traiter du passage a échelle, il serait intéressant
d’intégrer dans SEMTAG les techniques de fouilles d’erreur et d’analyse a partir d’arbres facto-
risés utilisées par (Sagot & Villemonte de La Clergerie, 2006). Par aille11rs, il importe d’évaluer
la qualité et l’utilité des représentations sémantiques produites soit par le biais d’applications
telles que la reconnaissance d’implications textuelles, soit par le biais de la génération (la sé-
mantique produite permet elle de re-générer la phrase de départ ?).

6Par couverture, nous entendons la production d’une leplésenta ion syntaxiquel sémantique validée manue11e—
ment dans un premier temps.

183

Claire GARDENT, Yannick PARMENTIER

Références

BOS J. (1995). Predicate Logic Unplugged. In Proceedings of the tenth Amsterdam Collo-
quium, Amsterdam, p. 133-142.

Bos J ., CLARK S., STEEDMAN M., CURRAN J . R. & HOCKENMAIER J . (2004). Wide-
coverage semantic representations from a ccg parser. In Proceedings of the 20th International
Conference on Computational Linguistics (COLING ’04), p. 1240- 1246, Geneva, Switzerland.

COPESTAKE A., FLICKINGER D., POLLARD C. & SAG I. A. (2005). Minimal Rec11rsion
Semantics : An introduction. Research on Language and Computation, 3.4, 281-332.

CRABBE B. (2005). Représentation informatique de grammairesfortement lexicalisées : Ap-
plication a la grammaire d ’arbres adjoints. PhD thesis, Université Nancy 2.

DUCHIER D., LE ROUX J . & PARMENTIER Y. (2005). XMG : Un Compilateur de Meta-
grammaire Extensible. In Actes de TALN 2005, Dourdan, France, p. 13-22.

FRANK A. & VAN GENABITH J . (2001). GlueTag - Linear Logic based Semantics for LTAG
- and what it teaches us about LFG and LTAG -. In Proceedings of LF G01 , Hong Kong, p.
104-126.

GARDENT C. (2006). Integration d’une dimension sémantique dans les grammaires d’arbres
adjoints. In Actes de la conférence TALN 2006, p. 149-158.

GARDENT C. (2007). Tree Adjoining Grammar, Semantic Calculi and Labelling Invariants.
In Proceedings ofIWCS 7, p. 75-85.

GARDENT C. & KALLMEYER L. (2003). Semantic construction in FTAG. In Proceedings of
the European chapter of the Association for Computational Linguistics (EACL’03), Budapest,
p. 123-130.

GARDENT C. & PARMENTIER Y. (2005). Large scale semantic construction for tree adjoining
grammars. In Proceedings ofLACL05, Bordeaux, France, p. 131-146.

JOSHI A., LEVY L. & TAKAHASHI M. (1975). Tree adjunct grammars. p. 136-163. Journal
of Comput. Syst. Sci., Vol. 10-1.

KALLMEYER L. & ROMERO M. (2004). LTAG Semantics with Semantic Uniﬁcation. In
Proceedings of TAG+7. Vancouver, p. 155-162.

LEHMANN S., OEPEN S., REGNIER-PROST S., NETTER K. , LUX V. , KLEIN J ., FALKEDAL
K., FOUVRY F., ESTIVAL D., DAUPHIN E., COMPAGNION H., BAUR J ., BALKAN L. &
ARNOLD D. (1996). TSNLP — Test Suites for Natural Language Processing. In Proceedings
of COLING I 996, p. 711-716, Kopenhagen.

MONTAGUE R. (1974). English as a formal language. Formal Philosophy. Selected papers of
Richard Montague, pages 188-221.

SAGOT B. & VILLEMONTE DE LA CLERGERIE E. (2006). Error mining in parsing results.
In Proceedings of ACL 2006 , p. 329-336, Sydney, Australia.

TSENG J . (2003). Lkb grammar implementation : French and beyond. In E. B. ET AL,
Ed., Workshop on Ideas and Strategies for Multilingual Grammar Development, p. 91-97,
Technische Universitat Wien.

VIJAY-SHANKER K. & J OSHI A. K. (1988). Feature structures based tree adjoining gram-
mars. In COLING, p. 714-719.

VILLEMONTE DE LA CLERGERIE E. (2005). DyALog : a tabular logic programming based
environment for NLP. In Proceedings of CSLP ’05, p. 18-33, Barcelona.

184

