TALN 2007, Toulouse, 5-8 juin 2007

Ambigu'1'té de portée et approche fonctionnelle
des grammaires d’arbres adjoints

Sylvain POGODALLA
LORIA/INRIA Lorraine

sylvain . pogoda11a@1oria . fr

Resume. En s’appuyant sur la notion d’arbre de derivation des Grammaires d’Arbres Ad-
joints (TAG), cet article propose deux objectifs : d’une part rendre l’interface entre syntaxe et
semantique independante du langage de representation semantique utilise, et d’autre part offrir
un noyau qui permette le traitement semantique des ambiguites de portee de quantiﬁcateurs sans
utiliser de langage de representation sous-speciﬁee.

Abstract. Relying on the derivation tree of the Tree Adjoining Grammars (TAG), this pa-
per has to goals : on the one hand, to make the syntax/ semantics interface independant from the
semantic representation language, and on the other hand to propose an architecture that enables
the modeling of scope ambguities without using underspeciﬁed representation formalisms.

Mots-clés 2 interface syntaxe et semantique, semantique formelle, grammaires d’arbres
adjoints, grammaires categorielles.

Keywords: syntax/ semantics interface, formal semantics, tree adjoining grammars, ca-
tegorial grammars.

1 Introduction

La notion d’arbre de derivation dans les grammaires d’arbres adjoints (TAG) (J oshi & Schabes,
1997; Abeille, 1993) est censee representer les dependances entre les differents items lexicaux
d’une phrase. A ce titre, l’arbre de derivation apparait comme le candidat privilegie po11r reali-
ser le transfert structurel entre la syntaxe et la semantique de maniere compositionnelle. Or, sa
representation ne rendant pas explicite certains liens, il a ete propose, aﬁn de le rendre operation-
nel dans le cadre du calcul de la representation semantique, soit de l’etendre (Kallmeyer, 2002;
Joshi et al., 2003), soit de ne pas l’utiliser et de calculer la representation semantique directe-
ment s11r l’arbre derive (Frank & van Genabith, 2001; Gardent & Kallmeyer, 2003; Gardent,
2007).

Cet article propose d’utiliser la notion d’arbre de derivation telle qu’introduite dans (Pogodalla,
2004). En effet, cette notion, qui precise simplement la notion originale, y est montree comme
adequate po11r la representation des dependances longue distance. Neanmoins, le langage de
representation semantique qui est utilise est un formalisme sous-speciﬁe. Ces demiers posent
parfois probleme, comme dans le cas de la coordination de groupes nominaux quantiﬁes (Willis,
2007). De plus, nous voulons un cadre general qui laisse a l’utilisateur le choix d’utiliser ou

325

Sylvain POGODALLA

non de tels formalismes, tout en gardant la possibilité de modéliser les ambiguités. Ainsi, nous
utilisons un formalisme plus proche de celui proposé par Montague (Montague, 1974) et une
architecture qui permet de traiter des phénomenes d’ambiguité. Nous nous appuyons s11r les
Grammaires Catégorielles Abstraites (ACG) (de Groote, 2001), et, tout en gardant un seul arbre
dérive’, nous montrons comment le principe d’élévation de type des grammaires catégorielles
permet d’obtenir plusie11rs lectures sémantiques.

Dans les deux prochaines sections, nous présentons l’arbre de dérivation de (Pogodalla, 2004)
s11r des exemples. Puis nous déﬁnissons dans la section 4 la notion d’ACG et les architectures
qu’elle rend possible pour l’interface entre la syntaxe et la sémantique. La section 5 met ﬁnale-
ment en oeuvre une telle architecture pour modéliser l’ambiguité de portée des quantiﬁcateurs.

2 Lecture fonctionnelle de l’arbre dérivé

La présentation habituelle des arbres élémentaires des TAG en donne une vision relativement
statique, les opérations de substitution et d’adjonction se chargeant de donner la dynamique
du langage en combinant selon certaines regles les arbres entre eux. Dans cette section, nous
nous proposons d’intégrer cette notion de dynamique aux arbres élémentaires eux-mémes, en
décrivant comment chacun prend part aux opérations de substitution et d’adj onction. Cette des-
cription se fait sur base d’exemples.

Soit l’arbre auxiliaire suivant : N . Lorsqu’il est adjoint a un autre arbre a un noeud N0,
2
1.01 N*
cet arbre remplace son propre noeud N* par le sous-arbre de racine N0. Si l’on appelle x ce sous-
arbre, on peut donc considérer l’arbre auxiliaire comme une fonction qui transforme un arbre x

en un nouvel arbre N . Soit, avec la notation a l’aide du A-calcul, une representation
2
Im at

de cet arbre par le terme suivant :

cm, = )\x. N
JR
Im at

Considérons maintenant l’arbre initial suivant : N . Cet arbre peut se voir adjoindre un arbre
I
chat
auxiliaire au noeud N. Dans ce cas, il donnera comme argument a cet arbre auxiliaire (on a vu
que l’arbre auxiliaire peut étre décrit comme étant une fonction qui prend un arbre en argument

et retoume un arbre) le sous arbre N (dans le cas présent, le sous-arbre parametre est l’arbre
I
chat

tout entier car l’adjonction a lieu au noeud racine).

On peut donc représenter l’arbre initial comme une fonction qui prend comme parametre un
arbre auxiliaire, c’est-a-dire unefonction des arbres dans les arbres. Soit, avec la notation en
A-calcul :
)\a.a( N )
I

chat
326

Ambiguité de portée et approche f onctionnelle des TAG

On constate alors que l’opération d’adjonction qui permet d’obtenir l’arbre N est
S
1.01 N
I
chat

décrite par l’application de la fonction (du terme) ccha, au terme c,,,,. En effet :
cchatcun = ()\a.a( N  N ) —>,3 ()\x. N  N ) -53 N
I 2x 2x I 2x
Chat 101 x 1m x Chat 101 N

chat

On peut ﬁnalement avoir un arbre qui combine la possibilité de subir une adjonction et une

substitution. Prenons par exemple l’arbre initial suivant : S . Sa particularité est qu’il
S
Ni VP
I
dart

attend un arbre qui peut étre substitué au noeud N d’une part, et qu’il peut subir une adjonction
au noeud VP. On choisit donc de le représenter comme une fonction qui prend en premier
argument un arbre auxiliaire, c’est-a-dire une fonction, et en deuxieme argument un arbre x qui
est celui qui est substit11é au noeud N. On peut alors le représenter de la maniere suivante :

cda,, = Aux. S
S
as a( VP )
I
dort

Bien entendu, il est possible qu’aucune adjonction n’ait lieu s11r le noeud VP1. Dans l’optique
que nous avons choisie, cela signiﬁe que la fonction qui a été adjointe est l’identité I = )\.z‘..z‘.

L’arbre dérivé S est alors représenté par le terme cdm I (cchatcun).
S
N VP
2x I
1.01 N dort
I
chat
Avec une représentation adéquate de l’adverbe, par exemple cpa,-S,-b,e,,,e,,, =
)\x. VP , on peut également construire l’arbre dérivé représenté par le terme
S

.’L‘ paisiblement

Cdartcpaisiblement ( Cchatcun ) 1

S
. 
N VP
S S
1.01 N VP paisiblement
I I
chat dort

‘Pour des raisons de clarté dans la présentation, nous avons omis la possibilité d’une adjonction sur le nmud S,
et donc supprimé le paramétre correspondant. On voit également par la comment interdire des adjonctions.

327

Sylvain POGODALLA

Si l’on appelle 7 le type des arbres, on voit que l’on ales constantes et le typage suivants :

Cun 3'7—°'7
Cchat 1('7‘°'7) —°'7
cam 1(’7—°’7)—°’7—°’7

ou -0 désigne l’implication linéair 2.

Cpaisiblement 1 '7 —° '7
5 '7 _° '7

3 R6le de l’arbre de dérivation

En typant les constantes représentant les arbres auxiliaires et initiaux de cette maniere, nous
perdons toutefois une information importante : les arbres ont tous le méme type 7, et aucune
distinction n’est faire entre eux. Ainsi, la composition cchatcpa,-S,-b,e,,,e,,, serait tout a fait licite.
C’est pourquoi nous allons donner aux constantes un type plus abst1ait3, correspondant aux
non-terminaux qui étiquettent leur racine. Nous nous donnons donc les types de base suivants :
VP, S, V, N ainsi que les types qui correspondent aux racines des noeuds auxiliaires : VPA, SA,

VA, NA.

Ainsi, en reprenant les exemples ci-dessus et en introduisant de nouvelles constantes, nous
avons les typages suivants :

Cm :VPA -0 N —o s 0"" ‘ "A
C _ N _o N Cpaisiblement 1 VPA
chat - A IVP : VPA

On peut alors avoir le terme Cda,¢IVp(Ccha,C,,,,), de type S, tandis que le terme C¢ha,Cpa,-S,-b/amen,
n’est pas typable. I1 reste a établir le lien avec le terme cda,,(ccha,c,,,,) de la section précédente.
Cela se fait par une fonction de conversion :=swm, le lexique, qui convertit les types et les
constantes ainsi :

S 3=syntax '7 Cdart 3=syntax Cdan‘

VP :=syntax '7 Gun :=syntax Cdan‘

N :=syntax '7 Conan: :=syntax Cchar

NA :=syntax '7 —° '7 Cpaisiblement :=syntax Cpaisiblement

VPA :=swm 7 —o 7 IX :=swm )\.z‘..z‘ pour tout type X

TAB. 1 — Deﬁnition du lexique

On alors :
CdartIVP (cchatcun) :=syntax Cdan‘I(CchatCun)
et
Cdartcpaisiblement(cchatcun) 3=syntax Cdartcpaisiblement(Cchatcun)

Si l’on adopte une représentation arborescente des A-termes (il n’y a pas d’abst1action), on peut
1'CP1'éSC11tC1' Cdartcpaisiblement(ochatoun) Par 1

2Nous ne dirons rien du calcul logique sous—jacent, ni de la maniére d’introduire de la non—1inéarité avec 1’im—
plication intuitionniste habituelle —>. Nous renvoyons les lecteurs intéressés a (de Groote, 2001; Pogodalla, 2004).

3Car pouvant étre réalisé, ou instancié, de différentes maniéres : arbre (7) pour la syntaxe, mais aussi individu
(e), prédicat (e —o t), etc. pour la sémantique.

328

Ambiguite de portee et approche f onctionnelle des TAG

Cdart

Cpaisiblement Cchat
I

Cun

Cet arbre rappelle tres precisement l ’arbre de derivation tel qu’il est deﬁni classiquement dans

les TAG. En fait, il s’agit de la méme notion ou sont cependant explicites :

— l’ordre des arguments, qui doit étre le méme po11r la constante qui est representee dans l’arbre
de derivation et pour la constante qui lui est associee dans les arbres derives. Le choix est
libre, mais une fois qu’il est fait, il doit étre coherent ;

— l’ordre des adjonctions lors d’une derivation. Contrairement a la notion classique, ou cet
ordre n’est pas precise, le resultat etant le méme, ici l’ordre des operations est speciﬁe. Cela
ne change pas le pouvoir expressif, cela pennet par contre de doter les TAG d’une semantique
compositionnelle basee sur l’arbre de derivation.

Cette maniere de representer les arbres derives, les arbres de derivation, et les relations qu’il y

a entre eux, correspond en fait a la modelisation des TAG dans le formalisme des ACG.

4 Modélisation des TAG dans les ACG

Nous ne reprenons pas ici le detail la modelisation systematique des TAG dans les ACG, donne
dans (de Groote, 2002; Pogodalla, 2004). Nous allons simplement donner les deﬁnitions pre-
cises des ACG qui ont ete mises en oeuvre dans les exemples precedents, aﬁn d’en tirer l’ar-
chitect11re generale que nous utiliserons po11r modeliser les ambiguites de portee des quantiﬁca-
te11rs.

Une ACG deﬁnit deux langages : un langage abstrait, qui peut étre vu comme un ensemble
abstrait de structures grammaticales, et un langage objet, representant les formes realisees des
structures abstraites, qu’elle met en relation. Ici, le langage abstrait correspond a la structure
grammaticale que l’on veut manipuler : l’arbre de derivation. Dans l’exemple precedent, il est
mis en relation avec le langage objet des arbres derives grace au lexique.

Deﬁnition 1 (Signature d’ordre superieur). Une signature d’ordre superie11re est un triplet
E = (A,C,7') ou:

— A est un ensemble de types atomiques ;

— C est un ensemble ﬁni de constantes ;

— 7' : C —> T(A) qui assigne a chaque constante de C un type de T(A) ou T(A) ::=

A|T(A) —o T(A).
On appel A2 I ’ensemble des A-termes que l ’on peut construire avec la signature 2.

Ainsi, dans l’exemple precedent, nous avions deux signatures d’ordre superieur. La premiere
contenait les types atomiques S, N, VPA. . .et les constantes Cchat, Cu”. . .tandis que la deuxieme
signature d’ordre superieur contenait l’unique type atomique 7 et les constante cchat, c,,,,. . .

Deﬁnition 2 (Lexique). Etant donnees une signature d’0rdre superieur E1 = (A1, C1, 71) et
une signature d ’0rdre superieur E2 = (A2, C2, 72), un lexique := de 21 vers 22 est deﬁni par
la donnee de :; et zé tels que :

329

Sylvain POGODALLA

T

— := : A1 —> T(A2) est une fonction d ’interpretation des types atomiques de El comme
des t)pes implicatﬁ construits a partir de A2. On appellera :; egalement son extension
homomorphique a tous les types de T(A1) ;

zé : C1 —> A22 est unefonction d ’interpretation des constantes de 21 comme des A-termes

construits a partir de 22. On appellera zé egalement son extension homomorphique a tous
les termes de A21 ;

— les fonctions d’interpretation sont Compatibles avec la relation de typage, c’est-a-dire que
pour tout c 6 C1 ett : at 6 A22 tels que c z; t, alors T1(C) :; oz (le type de l’image de c est
l ’image du type de c).

Dans la suite, on utilisera sans ambiguite := pour :; ou zé.

Le tableau 1 deﬁnit bien un lexique. La colonne de gauche donne l’interpretation des types
atomiques (on remarquera avec l’interpretation du type VPA que l’inte1pretation d’un type
atomique peut étre un type non atomique). La colonne de droite donne l’interpretation des
constantes.

Deﬁnition 3 (Grammaire catégorielle abstraite). Une grammaire categorielle abstraite est un
quadrupletQ = (E1, E2, :=,s) ou :

— 21 est une signature d’ordre superieure, et 22 une signature d ’ordre superieure. Ils sont

appeles vocabulaire abstlait et vocabulaire objet ;
— := :21 —> 22 estun lexique;
— 5 est un type atomique du vocabulaire abstrait, appele le type distingue de la grammaire.

Deﬁnition 4 (Langages abstrait et objet). Soit Q = (E1, E2, :=, 5) une grammaire catego-
rielle abstraite.

I. Lelangage abstrait .A(Q) engendrepar Q est de’ﬁnipar .A(Q) = {t E Ag1|t : 5}

2. Le langage objet O(Q) engendre par Q est de’ﬁni par
O(Q) = {t E A22|E|u E .A(Q) avec u := t}

Ainsi, les termes pris en exemple appartiennent bien aux vocabulaires abstlait et objet. Il est
a noter que cette deﬁnition permet d’eviter que le terme cda,,(ccha,cpa;s;b;eme,,,), qui est bien un
arbre (de type 7), appartienne effectivement au langage objet des arbres derives. En effet, il
serait l’image de Cda,¢(Ccha,Cpa;s;b;eme,,,) qui n’est pas de type S (ce terme n’est méme pas
typable) et qui n’appartient donc pas au langage abstrait des arbres de derivation.

La deﬁnition des ACG permet de considerer differents types d’architecture. Par exemple, si
deux ACG partagent le méme vocabulaire abstlait, on aura le schema de composition de la
ﬁgure 1(a). C’est par exemple celui adopte dans (Pogodalla, 2004) pour doter les TAG d’une
representation semantique sous-speciﬁee.

On peut egalement composer deux ACG en faisant que le vocabulaire objet de l’une soit ega-
lement le vocabulaire abstrait de l’autre (ﬁgure 1(b)). C’est par exemple le cas si l’on veut
considerer le lien entre les arbres derives, cette fois vus comme un langage abstlait, et leur
production (yield en anglais) comme langage de chaine.

Bien entendu, on peut melanger ces deux types de composition. La modelisation que nous
proposons po11r les phenomenes d’ambiguite de portee des quantiﬁcateurs repose sur le schema
de la ﬁgure 1(c). Dans tous les cas, on retrouve un schema classique du TAL, méme si la relation
est decrite par un autre formalisme : celui de la composition de transducer.

330

Ambiguité de portée et approche f onctionnelle des TAG

 

(a) Composition par partage de vocabulaire abstrait (b) Composition par identiﬁcation de vocabulaires
abstrait et objet

 

(c) Composition par combinaison des deux modes

FIG. 1 — Exemples d’architectures possibles

5 Composition d’ACG et modélisation des ambigu'1'tés de
portée

Proposition. Notre objectif est de proposer pour les TAG un cadre dans lequel modéliser
les ambiguités de portée sans utiliser de formalisme sous-spéciﬁé (contrairement a (Pogodalla,
2004)), tout en gardant la contrainte d’avoir un unique arbre dérivé auquel peuvent étre asso-
ciées plusieurs representations sémantiques. Pour l’architecture que nous proposons, il nous faut
déﬁnir deux nouvelles ACG. La premiere, Qamb, permettra d’associer a un arbre de derivation
unique deux structures plus profondes. La seconde, Qsem, correspondra a la réalisation dans un
langage de formes logiques du type de Montague de ces structures plus profondes.

On po111ra penser que ces différents niveaux ajoutent de la complexité conceptuelle. Nous pen-
sons pour notre part que cela permet de modulariser les difﬁcultés (en ne traitant qu’a leurs
niveaux respectifs la syntaxe, avec Qsynm, et la sémantique, avec Qaml, et Qsem). Par aille11rs,
nous avons vu que cette notion de composition est déja présente en TAL avec l’utilisation de
transducer et de leur composition, pour le traitement de la morphologie par exemple. Si au ﬁnal
seule la relation entre les langages d’entrée et sortie nous intéresse, il est tout a fait possible de
compiler deux ACG, par exemple Qaml, et Qmm en une seule, le11r composée.

Supposons que la grammaire Qsynm contiennent également les arbres suivants :

cchasse = Aaxy. S , och,-9,, = )\a.a( N ) et cm, = )\x. N , ainsi que les
%$ I 2&
as a( VP ) chien tout as
N
chasse y

constantes Cm,-5,, : NA -0 N, Cchasse : VPA -0 N —o N —o S et Cm, : NA mis en relation par
le lexique de la maniere suivante : Cchasse:=swmcchasse, Cch,-e,,:=sym,,xcch,-5,, et Cm,:=swmcm,,,.

331

Sylvain POGODALLA

Alors l’arbre de derivation correspondant a l’arbre dérivé

Cchasse (cchienctaut) (cchatcun) 1 =syntax S

S‘ 2‘
tout N chasse N
chien 1.01 N

chat

est 750 = CchasseIVP (ochiencnaut) (CchatCun)-

Déﬁnissons maintenant Qamb, dont le vocabulaire objet est le vocabulaire abstrait de Qmm, et
dont le vocabulaire abstrait contient les mémes symboles de type que le vocabulaire objet mais
les constantes typées Dchasse : VPA -0 N —o N —o S, Dch,-5,, : NA -0 (N —o S) —o S,
Dcha, : NA -0 (N —o S) —o S, Dm, : NA, D,,,, : NA et If, : VPA. Lelexique :=am1, est tel que
pour tout type X, X :=am1,X et :

Dchasse 3=amb Cchasse D chien 1=amb NIP-P (Cchien 11)
D taut :=amb Cnaut D chat :=amb Aap-P (Cchat 11)
Dun 3=amb Cun I\1/jp 3=amb IVP

Soit alors les termes :

751 = (DchienDnaut) (X73-(DchatDun) ()\y-DchasseI\1/)p -75 
752 = (DchatDun) (Ag-(DchienDtaut) (X73-DchasseI\1/jp -75 

On pou1ra veriﬁer que 751 et t2 sont bien typés et que t1:=am1, to et t2:=am1, to. Ainsi, nous avons
désormais deux structures profondes (751 et t2) reliées a un seul arbre de dérivation (to).

Il nous reste a transformer ces structures en formules logiques a l’aide d’une nouvelle ACG
gm. Celle-ci partage son vocabulaire abstrait avec Qamb, et, au niveau objet, met en oeuvre les
types habit11els e et 75 po11r les représentations a la Montague. Avec le lexique :=m,4 suivant5 :

Dchasse :=m, Aaso. (a()\x.chasse as o) )3

S :=sem t Dm, :=sem )\PQ.\7’x.P ac => Q as

N :=m,e D,,,, :=m, )\PQ.E|x.Px /\ Qx

NA :=sem (e —> t) —> (e —> t) —> t Dcha, :=m, )\q.q()\x.chatx)

VPA :=m, (e —> t) —> (e —> t) Dch,-5,, :=sem )\q.q()\.z‘.chien x)
If, :=m, )\x.x

Nous laissons le lecteur veriﬁer que l’on obtient bien alors les deux lect11res :

t1 :=m Vx.chienx => (E|y.chaty /\ chassex y)
t2 :=,em E|y.chaty /\ (Vx.chien x => chassex y)

Faute de place, nous ne pouvons illustrer également la coordination de groupes nominaux
quantiﬁés avec les constantes Ce, : N —o N —o N, De, : ((N —o S) —o S) —o ((N —o

4On suppose présentes dans la signature objet les constantes chasse : e —o e —o t, chien : e —o t, chat :
e—ot,\7’: (e—>t)—otetE|: (e—>t)—ot.

5Notons que c’est la presence du parametre a dans la formule sémantique qui réalise Dchasse qui permet, en
intégrant la contribution des éventuels sous—arbres adjoints, la prise en compte des dépendances longue distance.

332

Ambiguité de portée et approche f onctionnelle des TAG

S) —o S) —o ((N —o S) —> S) et leur réalisation De,:=am1, )\PQr.P()\x.Q()\y.r(Ce, ac  et
De,-:=sem )\PQr.P 7" /\ Q 7". On aurait par exemple les deux termes

753 = Det(DchatDnaut) (DchienDun) ()\-7»'- (DsaurisDune) OW-DchasseI\1/jp -75 
754 = (DsaurisDune) (Ag-Det(DchatDmut) (DchienDun) ()\-7»'-DchasseI\1/)p -75 

qui donneraient les deux lect11res attendues pour tout chat et un chien chassent une souris.
Contrairement au probleme soulevé par les représentations sous-spéciﬁées dans (Willis, 2007),
on n’a pas la lect11re ou tout chat a une portée différente de un chien vis a vis de la portée de une
souris. On obtient ainsi une architecture dans laquelle modéliser les phénomenes d’ambiguité
de portée sans imposer l’utilisation de formalismes sous-spéciﬁés.

Limitations. Act11ellement, nous ne savons pas exprimer les contraintes de portée des quan-
tiﬁcate11rs, telles celles des ilots de portée. Ce probleme est comparable a celui rencontré par
les grammaires de types logiques. En effet, l’approche proposée ici repose sur le principe de
l’élévation de type, qui est a la base de la piise en compte des ambiguités de portée dans ces
grammaires. Ici, nous avons gardé la contrainte supplémentaire que, bien entendu, l’arbre dé-
Iivé et l’arbre de déiivation restent uniques. La solution que nous envisageons repose s11r une
extension du systeme de type des ACG, et va bien au-dela du s11jet de cet article6.

6 Conclusion

Nous avons montré comment, en se basant sur la déﬁnition précise de l’arbre de dérivation
de (Pogodalla, 2004), nous pouvons déﬁnir un calcul des représentations sémantiques po11r les
TAG qui ne nécessite pas l’usage de formalismes sous-spéciﬁés tout en permettant le traitement
de l’ambiguité. Cela nous permet d’une part de renforcer l’indépendance entre le formalisme
syntaxique des TAG et le formalisme choisi par l’utilisateur pour la représentation sémantique,
et d’autre par de conﬁrmer l’importance de cette notion d’arbre de déiivation. Par aille11rs,
notre approche a de forts liens avec les approches de Glue Semantics (Dalrymple, 2001), et
la proposition (Frank & van Genabith, 2001) (utilisant les piincipes de Glue Semantics depuis
l’arbre déiivé) pourrait sans doute étre reconsidérée avec cette notion d’arbre de dérivation.

Références

ABEILLE A. (1993). Les nouvelles syntaxes. Paris : Armand Colin Editeur.

DALRYMPLE M. (2001). Lexical Functional Grammar, volume 42 of Syntax and Semantics
series. Academic Press.

DE GROOTE P. (2001). Towards abstract categoiial grammars. In Association for Computa-
tional Linguistics, 39th Annual Meeting and 10th Conference of the European Chapter, Pro-
ceedings of the Conference, p. 148-155.

DE GROOTE P. (2002). Tree-adjoining grammars as abstract categoiial grammars. In TAG+6,

Proceedings of the sixth International Workshop on Tree Adjoining Grammars and Related
Frameworks, p. 145-150 : Universita di Venezia.

6Faute de place, nous ne pouvons pas exposer comment 1’architecture proposée ici permet également de dépas—
ser la limitation mentionnée dans (Pogodalla, 2004) pour les verbes 5 contréle.

333

Sylvain POGODALLA

FRANK A. & VAN GENABITH J. (2001). Glue tag : Linear logic based semantics construction
for LTAG - and what it teaches us about the relation between LFG and LTAG. In M. BUTT &
T. H. KING, Eds., Proceedings of the LF G ’0I Conference, Online Proceedings : CSLI Publi-
cations. http : //cslipublications . stanford . edu/LFG/6/lfgol .htm1.

GARDENT C. (2007). Tree adjoining grammar, semantic calculi and labelling invariants. In
(Getzen et al., 2007).

GARDENT C. & KALLMEYER L. (2003). Semantic construction in feat11re-based tag. In Pro-
ceedings of the I 0th Meeting of the European Chapter of the Association for Computational
Linguistics (EACL).

J. GETZEN, E. THIJSSE, H. BUNT & A. SCHIFFRIN, Eds. (2007). Proceedings of the Seventh
International Workshop on Computational Semantics, I WCS-7. Tilburg University.

J OSHI A. K., KALLMEYER L. & ROMERO M. (2003). Flexible composition in ltag : Quan-
tiﬁer scope and inverse linking. In H. BUNT, I. VAN DER SLUIS & R. MORANTE, Eds.,
Proceedings of the F iﬂh International Workshop on Computational Semantics I WCS-5.

JOSHI A. K. & SCHABES Y. (1997). Tree-adjoining grammars. In G. ROZENBERG & A.
SALOMAA, Eds., Handbook of formal languages, chapter 2. Springer.

KALLMEYER L. (2002). Using an enriched tag derivation structure as basis for semantics.
In Proceedings of the Sixth International Workshop on Tree Adjoining Grammar and Related
Frameworks (TAG+6).

MONTAGUE R. (1974). The proper treatment of quantiﬁcation in ordinary english. In P.
PORTNER & B. H. PARTEE, Eds., Formal Semantics : The Essential Readings, chapter 1.
Blackwell Publishers. 2002 edition.

POGODALLA S. (2004). Computing semantic representation : Towards ACG abstract terms
as derivation trees. In Proceedings of the Seventh International Workshop on Tree Adjoining
Grammar and Related Formalisms (TAG+7), p. 64-71.

WILLIS A. (2007). NP coordination in underspeciﬁed scope representations. In (Getzen et al.,
2007).

334

