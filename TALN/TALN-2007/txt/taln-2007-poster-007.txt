TALN 2007, Toulouse, 5-8 juin 2007

Une réalisateur de surface basé sur une grammaire réversible

Claire GARDENT1, Eric Kowz
1 CNRS/LORIA, Nancy

2 INRIA/LORIA, Nancy
{Claire.Gardent,Eric.Kow}@loria.fr

Resume. En generation, un realisateur de surface a pour fonction de produire, a partir
d’une representation conceptuelle donnee, une phrase grammaticale. Les realisateur existants
soit utilisent une grammaire reversible et des methodes statistiques pour determiner parmi l’en-
semble des sorties produites la plus plausible ; soit utilisent des grammaires specialisees pour la
generation et des methodes symboliques pour determiner la paraphrase la plus appropriee a un
contexte de generation donne. Dans cet article, nous presentons GENI, un realisateur de surface
base sur une grammaire d’arbres adjoints pour le frangais qui reconcilie les deux approches en
combinant une grammaire reversible avec une selection symbolique des paraphrases.

Abstract. In generation, a surface realiser takes as input a conceptual representation and
outputs a grammatical sentence. Existing realisers fall into two camps. Either they are based
on a reversible grammar and use statistical ﬁltering to determine among the several outputs the
most plausible one. Or they combine a grammar tailored for generation and a symbolic means of
choosing the paraphrase most appropriate to a given generation context. In this paper, we present
GENI, a surface realiser based on a Tree Adjoining Grammar for French which reconciles both
approaches in that (i) the grammar used is reversible and (ii) paraphrase selection is based on
symbolic means.

M0tS-CléS I realisation de surface, grammaire d’arbres adjoints, reversibilite.

Keywords: surface realisation, tree adjoining grammar, reversibility.

1 Introduction

En generation, le module de réalisation de surface a pour fonction de produire, a partir d’une
representation conceptuelle donnee, une phrase grammaticale. Par exemple, a partir de l’entree
donnee en (la), un realisateur de surface po11rra produire l’une des variantes listee en (lb-lk).

(1) a. 'ean(') aimer(e, ',m) marie(m)
J J_ _ (1) g. C’est Marie qui est aimee par Jean
b. Jean a1me Marie _ _ _ ,
_ _ , h. C’est Marie qui est almee de Jean
c. Marie est aimee par Jean _ _ _
_ _ , 1. Marie, Jean 1’a1me
d. Marie est aimee de Jean _ _ _ _
_ _ _]. Marie, C’est Jean qu11’a1me
e. C’est Marie que Jean aime _ _ _
_ _ _ k. Jean, C’est Marie qu’11a1me
f. C’est Jean qui aime Marie

Dans cet article, nous presentons un realisateur de surface (GENI) qui combine une methode

Claire GARDENT, Eric Kow

symbolique de sélection de paraphrases avec une grammaire réversible. En outre, le réalisateur
est paramétrable et peut étre utilisé soit en mode déterministe (une seule solution produite), soit
en mode non déterministe (toutes les paraphrases associées par la grammaire a la sémantique
d’entrée sont produites).

L’ utilisation de méthodes symboliques pour guider le choix de la paraphrase permet de prendre
en compte les facteurs contextuels imposés par un systeme de génération : la réalisation produite
est une réalisation appropriée pour un contexte donné plutot que la réalisation la plus fréquente
dans l’usage général représenté par un corpus d’apprentissage.

L’ utilisation d’une grammaire réversible a plusieurs avantages.

Premierement, elle permet d’utiliser le méme lexique et la méme grammaire pour l’analyse et
pour la réalisation. Etant donnée la difﬁculté de développer de telles ressources, la question de
la réutilisabilité est un point non trivial.

Deuxiemement, comme l’illustre la Redwood Lingo Treebank (Velldal & Oepen, 2006), la ré-
versibilité permet de créer rapidement de tres grandes suites de tests pour la réalisation : il sufﬁt
pour ce faire d’analyser des phrases, de sélectionner parmi les sorties produites l’analyse corres-
pondant a l’interprétation de l’entrée et d’utiliser la représentation sémantique associée comme
entrée pour le réalisateur. Par comparaison, les plus grandes suites de tests distribuées actuel-
lement avec les réalisateurs existants soit sont de taille restreinte (500 phrases distinces pour
SURGE, 210 pour KPML), soit exigent de développer un module de transformation permettant
de créer a partir d’un corpus arboré un format d’entrée adapté a la réalisation (Callaway, 2003).

T roisiemement, la réversibilité permet de mieux mesurer la couverture et le pouvoir paraphras-
tique du réalisateur. La couverture est testée par une analyse doublée d’une phase de réalisation
(la phrase d’entrée peut-elle étre a la fois analysée et réalisée par le systeme ?). Le pouvoir
paraphrastique po11rra étre mesuré en utilisant le réalisateur en mode non déterministe (toutes
les paraphrases possibles sont produites) et en identiﬁant les sorties correctes produites par le
réalisateur pour une entrée donnée.

Quatriemement, une grammaire réversible peut étre utilisée a la fois pour la réalisation et pour
son inverse a savoir, la construction sémantique (i.e., la construction pour une phrase de sa
ou ses représentations sémantique(s)). Si, comme nous cherchons a le garantir dans GENI, le
réalisateur a un bon pouvoir paraphrastique, cela a pour effet que la grammaire peut étre utilisée
a la fois pour générer et pour détecter les paraphrases.

L’ article est structuré de la facon suivante. Nous commencons par présenter la grammaire (sec-
tion 2) et l’algorithme de base (section 3.1). Ce premier algorithme est un algorithme non dé-
terministe qui produit l’ensemble des paraphrases associées par la grammaire a une represen-
tation sémantique donnée. Nous montrons ensuite comment une méthode de paramétrisation
des entrées permet de restreindre la réalisation aux seules paraphrases respectant les criteres
syntaxico-sémantiques spéciﬁés par les parametres donnés en entrée (section 3.2). La section
4 présente des résultats chiffrés donnant une indication de la couverture et du pouvoir para-
phrastique de GENI et la section 5 compare l’approche proposée avec les travaux connexes. La
section 6 conclut avec des pointeurs pour des recherches futures.

GenI, un réalisateur basé sur une grammaire réversible

2 La grammaire

Formalisme. La grammaire utilisée est une grammaire d’arbres adjoints lexicalisée basée sur
l’uniﬁcation (FLTAG, (Vijay-Shanker & Joshi, 1988)). Une FLTAG comprend un ensemble
d’arbres élémentaires et deux opérations permettant de combiner ces arbres entre eux, l’opé-
ration de substitution et l’opération d’adjonction. Les arbres résultant d’une de ces opérations
sont appelés «arbres dérivés».

Les arbres élémentaires sont lexicalisés, c’est-a-dire qu’ils sont explicitement associés avec un
lemme ou une forme ﬂéchie. Leurs noeuds sont étiquetés par deux structures de traits appelées
TOP et BOTTOM. Un arbre élémentaire est soit initial, soit auxiliaire. Un arbre initial est un
arbre dont les noeuds feuilles sont soit des noeuds terminaux, soit des noeuds dit de substitution
(marqués par 1). Un arbre auxiliaire est un arbre dont l’un des noeuds feuilles est un noeud
«pied» (marqué par *) étiqueté par la méme catégorie que le noeud racine.

L’ opération de substitution permet d’insérer un arbre élémentaire ou dérivé 7'5 dans un arbre
initial Ta : le noeud racine de 75 est alors identiﬁé avec un noeud de substitution dans Ta et
les traits TOP sont uniﬁés (Topm = Top”). L’ opération d’adjonction permet d’insérer un arbre
auxiliaire 7'5 dans un arbre quelconque Ta a un noeud n : les traits TOP“ et BOTTOM“ du
noeud n ou se fait l’adjonction sont alors uniﬁés avec les traits TOP du noeud racine de l’arbre
auxiliaire et les traits BOTTOM de son noeud pied respectivement (Topn = T0pR,,,,,; et Bottom“
= Bottom pootm ). En ﬁn de dérivation, les traits TOP et BOTTOM de chaque noeud de l’arbre
dérivé produit sont uniﬁés.

Grammaire et méta-grammaire. La grammaire TAG utilisée est une grammaire produite
par compilation a partir d’une spéciﬁcation plus abstraite appelée, metagrammaire. Dans cette
métagrammaire, un arbre élémentaire est déﬁni par la combinaison d’un ou de plusieurs frag-
ments d’arbres et chaque fragment d’arbre encapsule une caractérisque linguistique spéciﬁque.
Par exemple, tout arbre verbal dont le sujet est un sujet nominal canonique fera intervenir le
fragment d’arbre SUJETCANONIQUE. Plus généralement, chaque arbre élémentaire est associé
par le processus de compilation a un proﬁl listant l’ensemble des noms de fragments d’arbres
ayant participé a sa construction. Comme l’illustre le proﬁl de l’arbre donné en Figure 1, le
proﬁl de chaque arbre donne ainsi des informations sur ses caractéristiques linguistiques. Or les
réalisateurs TAG utilisent souvent ce type d’information pour guider la réalisation (cf. (Yang
et al., 1991; Danlos, 1998)) mais l’association est faite de maniere manuelle; Dans GENI, ces
informations sont automatiquement associés avec chaque arbre élémentaire par le compilateur
de métagrammaire.

S
Ni“ V SUJETCANONIQUE
don VERBEACTIF
dort(x1)

FIG. 1 — Proﬁl d’un arbre

Interface Syntaxe/Sémantique. Dans la grammaire d’arbres adjoints utilisée, le lien entre
structure syntaxique et représentation sémantique se fait de la facon illustrée par la ﬁgure 2.

Claire GARDENT, Eric Kow

Chaque arbre élémentaire est associé avec une représentation sémantique ou les arguments man-
quants sont des variables d’uniﬁcation. Ces variables apparaissent en outre sur certains noeuds
de l’arbre et sont instantiées par le biais des substitutions et des adjonctionsl. Ainsi, dans la
dérivation de Jean court souvent illustré ci-dessous, j uniﬁe avec 3 et r avec :13 si bien que la
représentation sémantique ﬁnale est nom( j, jean ), courir( r, j ), souvent(r).

s  ‘V90
2 5’, {\
Nj N13 V’ ’V* Adv
I  ,+ I  I
Jean  court souvent
nom( j, jean ) courir(r,s) souvent(x)

=> nom(j, jean), courir( 1; j), souvent(r)

FIG. 2 — “Jean court souvent”

Couverture. La graInInaire (Crabbé & Duchier, 2004) couvre la grammaire noyau du francais
décrite dans (Abeillé, 2002) c’est-a-dire, l’ensemble des cadres syntaxiques de base qui y sont
listés et pour chacun de ces cadres, l’ensemble des redistributions (actif, passif, moyen, neutre,
réﬂexivisation, impersonnel, passif-impersonnel) et des réalisations d’arguments perInises (cli-
ticisation, extraction, ommission, variations d’ordre).

3 Le réalisateur GEN I

Nous commencons par décrire l’algorithme de base utilisé par GENI. Cet algorithme est un
algorithme non déterministe permettant de générer l’ensemble des paraphrases associées par la
grammaire a une entrée sémantique telle que celle donnée en (la). Nous montrons ensuite com-
ment cet algorithme peut étre modiﬁé pour assurer le déterminisme et générer parIni l’ensemble
des paraphrases possibles, la paraphrase respectant les contraintes placées sur une verbalisation
par un contexte de génération donné.

3.1 Générer toutes les paraphrases

L’ algorithme de base est un algorithme tabulaire (Kay, 1996) ascendant optimisé pour les gram-
maires d’arbres adjoints. Une spéciﬁcation détaillée de l’algorithme et des optimisations dé-
ployées est donnée dans (Gardent & Kow, 2005). Par manque de place, nous nous contentons
ici d’illustrer son fonctionnement par un exemple.

Supposons que la sémantique donnée en entrée soit courir (r, j) , nom( j, jean) , souvent (r) .
L’ algorithme procede de la facon suivante. Dans un premier temps (phase de sélection lexi-
cale), les arbres élémentaires dont la sémantique subsume une partie de l’entrée sont sélection-
nés. Pour notre exemple, les arbres sélectionnés seront (entre autre) les arbres de Jean, court
et souvent (cf. Figure 2). La deuxieme étape (phase de substitution) consiste a explorer syste-
matiquement les possibilités de combinaisons par substitution. Pour l’eXemple considéré, cette

1Pour plus de details sur le calcul sémantique utilisé, cf. (Gardent & Kallmeyer, 2003).

GenI, un réalisateur basé sur une grammaire réversible

exploration permettra de substituer l’arbre pour Jean dans l’arbre pour court (cf. Figure 2). La
troisieme étape (phase d’adjonction) permet de combiner les arbres produits par adjonction.
C’est a ce stade que l’arbre pour souvent sera adjoint a l’arbre dérivé pour Jean court. En dernier
ressort (phase d’extraction), les chaines étiquettant les items couvrant la sémantique donnée
en entrée sont produites en l’occurrence : Jean court souvent.

3.2 Générer une seule paraphrase

L’ algorithme présenté dans la section précédente est non déterministe et produit, pour une en-
trée sémantique donnée, l’ensemble des paraphrases associées par la grammaire a cette entrée.
L’ entrée (la) par exemple, permet la réalisation de l’ensemble des paraphrases listées en (lb-
1k).

Pour une utilisation au sein d’un systeme de génération, il est nécessaire de pouvoir contraindre
l’algorithme de facon a pouvoir sélectionner, parmi l’ensemble des paraphrases possibles, la
paraphrase appropriée au contexte considéré. Nous montrons maintenant comment l’entrée sé-
mantique de GENI peut étre enrichie pour guider l’algorithme dans ses choix et assurer le de-
terminisme.

Au plus une verbalisation. Dans l’algorithme présenté en section 3, le non déterminisme
provient principalementz de l’ambiguité lexicale : pour chaque litéral l dans l’entrée, il y a
généralement plus d’un arbre élémentaire sélectionné par la phase de sélection lexicale. Ainsi
pour chaque entrée sémantique, la sortie de GENI est donnée par l’ensemble des combinaisons
d’arbres élémentaires couvrant la sémantique d’entrée et dont la combinaison par substitution
ou adjonction est permise par la grammaire.

Pour permettre le déterminisme, nous associons a chaque littéral un identiﬁant d ’arbre. Comme
nous l’avons vu en section 2, la grammaire utilisée est produite par un processus de compilation
qui associe a chaque arbre élémentaire un proﬁl résumant ses caractéristiques linguistiques.
Parce que ce proﬁl recense l’ensemble des fragments d’arbres utilisés pour construire un arbre
donné et parce que chaque arbre differe d’un autre par au moins un fragment d’arbre dans son
proﬁl, le proﬁl de chaque arbre élémentaire est un identiﬁant pour cet arbre3. Nous utilisons
cette caractéristique de la grammaire pour guider la réalisation et assurer son déterminisme de
la facon suivante :

1. Chaque litéral l,- dans l’entrée est associée avec un identiﬁant d’arbre A,-. Cet identiﬁant est un
proﬁl simpliﬁé ne prenant en compte que les informations utiles pour la génération et préservant
l’unicité de l’arbre identiﬁé.

2. Pendant la réalisation, pour chaque paire l,- : A, dans l’entrée enrichie, la sélection lexicale est
restreinte aux arbres dont la sémantique subsume l,- et dont le proﬁl simpliﬁe’ est A,-.

Puisque chaque litéral est associé avec un identiﬁant d’arbre et chaque identiﬁant d’arbre iden-
tiﬁe un arbre unique, le réalisateur produira au plus une phrase. Les exemples (2a-2c) illustrent

2Une seconde source de non déterminisme provient des modiﬁcateurs qui peuvent souvent s’adjoindre dans des
ordres différents (I ’hommejeune et grand, I ’homme grand etjeune). Ce type de non déterminisme est traité dans la
phase d’ adj onction en regroupant les modiﬁcateurs d’une meme entité et en imposant un ordre unique d’adjonction
en cas d’ambiguité.

311 s’agit la d’une simpliﬁcation. Dans certains cas (peu nombreux), deux arbres élémentaires distincts ont le
meme proﬁl. Nous revenons sur ce point en section 4.

Claire GARDENT, Eric Kow

le type de contraintes Inises en jeu par GENI.

(2) a. lj :jean(j)/NomPropre la :aimer(e, ',m)/[SujetCcmoniqueNominal, VerbeActiﬁ 0bjetCcmom'que-
Nominal] lm :marie( m )ﬂVomPropre
Jean aime Marie

b. lc :le(c)/Der lc :chien(c)ﬂVomCommun ld :dormir(eI,c)/SujetRelaty‘
Z, : ronﬂer( e2, c )/SujetCanom'queNominal
Le chien qui dort ronﬂe
I 1 . . g 1

c. lj :jecm(j)/ProperName lp :promettre(eI,j,m,e2)/[SujetCanoniqueNominal, VerbeActif 0bjet-
Completive] lm :marie(m)/ProperName Z52 :partir( e2, j)/Verbelnﬁnitif
Jean promet 51 Marie de partir

J ‘M ,.l .

Au moins une verbalisation. Si une entrée enrichie permet de limiter la réalisation a une
verbalisation maximum, elle ne garantit pas une solution au sens ou la combinaison d’identi-
ﬁants d’arbres choisie peut ne pas étre réalisable. Mais comment vériﬁer la satisﬁabilité d’une
entrée sans pour autant tenter de la réaliser ? Les systemes existants donnent trois grands types
de réponses a cette question.

Une premiere possibilité est de construire simultanément entrée enrichie et verbalisation. C’est
le cas en particulier, des réalisateurs basés sur les grammaires systémiques (KPML(Matthiessen
& Bateman, 1991)) ou la réalisation coincide avec la traversée d’un réseau systémique permet-
tant d’associer a un contenu sémantique (dimension idéationnelle dans la terminologie systé-
mique), une description syntaxique et fonctionnelle.

Une deuxieme possibilité consiste a vériﬁer la validité de l’entrée sur un critere partiel de bonne
formation. Par exemple, REALPRO (Lavoie & Rambow, 1997) prend pour entrée un structure
syntaxique profonde de la théorie Sens-Texte (Mel’cuk & Zolkovskij, 1970) et SURGE (E1ha-
dad & Robin, 1999) une description fonctionnelle des grammaires fonctionnelles d’uniﬁcation.
Dans les deux cas, l’entrée n’est pas nécessairement satisﬁable puisqu’elle doit étre validée par
l’ensemble de la théorie. Dans la théorie sens-texte, la structure syntaxique profonde doit, pour
étre réalisable, pouvoir étre projetée successivement en une structure syntactique de surface,
une structure morphologique et une structure phonétique. Dans SURGE, l’entrée n’est réalisable
que si elle permet une traversée complete de la grammaire du noeud racine aux noeuds lexicaux
instanciant la sémantique d’entrée.

Une troisieme possibilité consiste a procéder de facon incrémentale et a faire des choix locaux
(algorithme gourmand) guidés par les contraintes introduites par les choix faits. C’est le cas
en particulier de l’algorithme semi-récursif basé sur les grammaires d’arbres adjoints décrit
dans (Danlos, 1998) : a chaque étape de la réalisation, un arbre unique est sélectionné et les
contraintes introduites par cet arbre sont utilisées pour contraindre le choix des arbres restant a
sélectionner. En cas d’échec, l’algorithme fait un retour arriere.

Nous adoptons une stratégie Inixte ou la technique dite de ﬁltrage par polarités est utilisée
pour :

1. effectuer une vériﬁcation de la validité de l’entrée enrichie

2. proposer une alternative en cas d’échec de cette vériﬁcation

GenI, un réalisateur basé sur une grammaire réversible

3. proposer une entrée enrichie par défaut en cas d’échec de réalisation

Le ﬁltrage par polarités s’inspire des travaux de (Bonfante et al., 2003; Koller & Striegnitz,
2002) et vise a détecter les combinaisons d’arbres élémentaires ou besoins et ressources
syntaxico-sémantiques échouent a s’annuler. Plus spéciﬁquement, l’idée est de vériﬁer si pour
une entrée donnée, l’ensemble d’arbres sélectionnés est tel que chaque noeud de substitution et
chaque noeud pied peut étre associé avec exactement un arbre de la catégorie syntaxique et de
Z ’index sémantique appr0prie’.4

Nous utilisons le ﬁltrage par polarité pour ﬁltrer les entrées enrichies non satisﬁables (i.e., des
entrées dont la polarité est non nulle) mais également pour proposer une entrée alternative en
cas de détection d’entrée non satisﬁable. Dans ce cas, l’entrée enrichie est dépouillée de ses
identiﬁants d’arbre et l’algorithme non déterministe est utilisé avec additionellement une étape
de ﬁltrage par polarité (introduite entre la phase de sélection lexicale et celle de substitution).
Les combinaisons d’arbres a polarités neutres (i.e., les combinaisons d’arbres ou besoins et
ressources syntaxico-sémantiques s’annulent) sont ensuite comparées a l’entrée enrichie initiale
et la combinaison la plus similaire a cette entrée est alors proposée en alternative. La similarité
entre deux combinaisons d’arbres est mesurée par le nombre d’identiﬁant communs entre ces
deux combinaisons : plus le nombre d’identiﬁants commun aux deux sélections est grand, plus
les sélections sont similaires. Si plusieurs sélections sont également similaires, un choix non
déterministe est fait.

Enﬁn il est malgré tout possible qu’un ensemble d’arbres a polarité neutre soit non satisﬁable5.
Dans ce cas, l’algorithme utilise un enrichissement de la sémantique d’entrée par défaut qui
permet de générer une verbalisation «canonique» de cette sémantique.

4 Evaluation

Aﬁn d’évaluer d’une part, le pouvoir paraphrastique du réalisateur et d’autre part, l’impact des
annotations de controle sur le non-déterminisme, nous avons utilisé une suite de tests graduée.
Cette suite a été construite en (i) analysant un ensemble de phrases et (ii) sélectionnant pour
chaque phrase la représentation sémantique correcte6. Le résultat est une suite de 80 represen-
tations sémantiques choisies pour illustrer les différents types de paraphrases grammaticales
décrites par la grammaire utilisée c’est-a-dire,

— les variations grammaticales dans la réalisation des arguments (clivés, cliticisation, extrac-
tion, inversion du sujet, etc.) et la forme du verbe (passive/active, impersonnal, etc.)

— les variations dans la réalisation des modiﬁcateurs (anté- vs post-posés, adjectif vs subordon-
née relative, épithete vs. attribut, etc.)

— les variations permises par une équivalence morpho-dérivationnelle (Ex. arrivée/arriver)

Les 80 cas sélectionnés donnent lieu a la génération par GENI de 1 528 phrases distinctes soit
un taux de paraphrases moyen par entrée de 18 avec une variation allant de 1 a plus de 50

4Les restrictions d’espace nous empeche d’expliciter ici la méthode de ﬁltrage par polarité. Celle ci est cepen-
dant détaillée dans (Gardent & Kow, 2005).

5Le ﬁltrage par polarité permet de détecter la non satisﬁabilité d’une combinaisons d’arbres pas d’assurer sa
satisﬁabilité.

5L’analyseur peut donner plusieurs analyses et donc souvent plusieurs representations sémantiques dont cer-
taines représentent correctement le sens de la phrase analysée , d’autres non.

Claire GARDENT, Eric Kow

: x . y : y . x x . y : x . x u : u x x : : y . r x u : : y . y : : u w

20

mm cases

 

D
1 2 5 4 5 6 7 8 9101112131415161713152021222E242E26272ﬁ293[)E13233343536
numuavauhmses

FIG. 3 — Distribution du taux de variation paraphrastique

paraphrases par représentation sémantique. La Figure 3 donne une description plus détaillée de
la distribution du taux de variation paraphrastique. Plus généralement, 42% des phrases avec un
verbe ﬁni ont une a 3 paraphrases (cas des verbes intransitifs), 44% 4 a 28 paraphrases (verbes
prenant deux arguments) et 13% acceptent plus de 30 paraphrases (verbes a trois arguments).
Pour les phrases contenant deux verbes ﬁnis, le ratio est de 5% des cas ayant 1 a 3 paraphrases,
36% des cas ayant entre 4 et 14 paraphrases et 59% plus de 14 paraphrases. Enﬁn les phrases
contenant plus de 3 verbes ﬁnis acceptent toutes plus de 20 paraphrases.

Aﬁn de vériﬁer que l’utilisation des proﬁls sufﬁt a assurer le déterminisme (cf. section 3.2),
nous avons calculé le nombre de cas ou deux paraphrases d’un méme contenu partagent le
méme proﬁl. Pour ce faire, nous avons étiqueté de facon automatique les 1 528 paraphrases
produites par GENI a partir de la suite de test, avec leur proﬁls (le proﬁl d’une paraphrase est
l’ensemble des proﬁls associés aux arbres élémentaires utilisés pour construire l’arbre dérivé
de cette paraphrase). Nous avons ensuite comparé, pour chaque entrée de la suite de tests, les
proﬁls de toutes les paires de paraphrases correspondantes et compté le nombre de fois ou une
paire de paraphrases partage le méme proﬁl.

Cette manipulation montre que pour les 1 528 paraphrases considérées, le proﬁl échoue a reﬂéter
la différence entre deux paraphrases dans moins de 1% des cas. L’ analyse des données fautives
révele que les cas posant probleme sont les paires paraphrastiques impliquant uniquement (i)
une variation d’ordre des arguments (Ex. Jean donne une pomme a Marie / Jean donne a Marie
une pomme ) ou (2) une variation de position pour un modiﬁcateur (Ex. Jean donne ce soir une
pomme a Marie /Jean donne une pomme ce soir a Marie / Jean donne une pomme a Marie
ce soir). Le premier cas peut étre résolu en modiﬁant la grammaire de facon a expliciter la
différence dans le proﬁl des arbres élémentaires correspondant, le second en imposant un ordre
canonique sur l’adjonction des modiﬁcateurs.

5 Discussion et comparaison avec travaux connexes

GENI differe des réalisateurs existants en ce qu’il combine l’utilisation d’une grammaire réver-
sible avec un mécanisme symbolique de sélection des paraphrases.

Ainsi, les réalisateurs utilisant une grammaire réversible utilisent généralement des méthodes
statistiques pour choisir parmi l’ensemble des paraphrases associées a un sens par la grammaire,

GenI, un realisateur base sur une grammaire reversible

la paraphrase la plus frequente plutot que la paraphrase appropriee a un contexte de generation
donne. Ils sont de ce fait mal adaptes a une utilisation dans des scenarios de generation exigeant
un bon pouvoir paraphrastique et sont plutot mis en jeu soit dans des systemes de traduction
(Carroll & Oepen, 2005) soit dans des scenarios de generation ou les textes a produire sont for-
tement stereotypes et ou la paraphrase la plus frequente est aussi la paraphrase la plus appropriee
dans une majorite des cas (White, 2004).

Par ailleurs, les realisateurs utilisant un mecanisme symbolique de selection des paraphrases
(Danlos, 1998; Matthiessen & Bateman, 1991; Elhadad & Robin, 1999; Lavoie & Rambow,
1997) mettent habituellement en jeu des grammaires qui ne sont pas reversibles c’est-a-dire des
grammaires qui ne peuvent pas etre exploitees a la fois pour associer un sens a un texte (ana-
lyse) et pour verbaliser un sens donne (realisation). Or comme nous l’avons mentionne dans
l’introduction, l’utilisation de la grammaire en analyse comme en realisation est un point im-
portant. Outre qu’elle permet de minimiser l’effort de developpement sur la grammaire (chaque
modiﬁcation apportee a la grammaire ou au lexique beneﬁcie a la fois a l’analyse et a la genera-
tion), cette dualite permet un meilleur controle de la qualite et de la couverture de la graInInaire
puisque l’analyseur permet de detecter la sous-generation (i.e., la non generation de phrases
grammaticales) et le realisateur la sur-generation (i.e., la generation de phrases agrammaticales).
Enﬁn, l’utilisation en mode double de la grammaire permet de produire automatiquement des
quantites arbitraires d’entrees pour le realisateur et ainsi de mieux tester son pouvoir paraphras-
tique. Par comparaison, l’entree des realisateurs non reversibles est generalement produite soit
par un systeme de generation, soit manuellement ce qui rend difﬁcile une evaluation precise de
leur couverture et pouvoir paraphrastique.

6 Conclusion

En resume, GENI est un realisateur de surface base sur une grammaire d’arbres adjoints pour le
francais qui presente les proprietes suivantes :

GENI peut étre utilise en mode deterrniniste (une paraphrase) ou non-deterministe (toutes les para-
phrases)

GENI utilise une grammaire et un lexique reversible

GENI utilise une grammaire qui associe aux paraphrases grammaticales une meme semantique — ceci
permet, grace a la réversibilité, a la fois un bon pouvoir paraphrastique et la detection de paraphrases
GENI est disponible en libre source (http: / /trac . loria . fr/ ~geni).

Outre les phenomenes decrits en section 4, la grammaire utilisee par GENI est essentiellement la
grammaire speciﬁee par (Crabbe, 2005) augmentee avec une dimension semantique (Gardent,
2006). Elle couvre donc l’essentiel de la TSNLP et des phenomenes decrit dans (Abeille, 2002).
Le travail futur inclut (i) un passage a grande echelle par l’extension de la graInInaire et du
lexique et (ii) l’utilisation du realisateur pour reduire la sur-generation.

Références

ABEILLE A. (2002). Une grammaire e’le’ctr0nique dufrangais. CNRS Editions.

BONFANTE G., GUILLAUME B. & PERRIER G. (2003). Analyse syntaxique electrostatique.
Evolutions en analyse syntaxique, Revue TAL (Traitement Automatique des Langues), 44(3).

Claire GARDENT, Eric Kow

CALLAWAY C. B. (2003). Evaluating coverage for large symbolic NLG grammars. In 18th
IJCAI.

CARROLL J . & OEPEN S. (2005). High efﬁciency realization for a wide-coverage uniﬁcation
grammar. 2nd IJCNLP.

CRABBE B. (2005). Représentation informatique de grammairesfortement lexicalisées. PhD
thesis, Université Henri Poincaré, Nancy.

CRABBE B. & DUCHIER D. (2004). Metagrammar redux. In CSLP 2004, Copenhagen.

DANLOS L. (1998). G-TAG : un formalisme lexicalisé pour la génération de textes inspiré de
TAG. Traitement Automatique des Langues - TA.L., 2.

ELHADAD M. & ROBIN J. (1999). SURGE : a comprehensive plug-in syntactic realization
component for text generation. Computational Linguistics.

GARDENT C. (2006). Intégration d’une dimension sémantique dans les grammaires d’arbres
adjoints. In TALN 2006.

GARDENT C. & KALLMEYER L. (2003). Semantic construction in FTAG. In 10th EACL,
Budapest.

GARDENT C. & KOW E. (2005). Generating and selecting grammatical paraphrases. ENLG.
KAY M. (1996). Chart Generation. In 34th ACL, p. 200-204, Santa Cruz, California.
KOLLER A. & STRIEGNITZ K. (2002). Generation as dependency parsing. In 40th ACL,
Philadelphia.

LAVOIE B. & RAMBOW O. (1997). RealPro—a fast, portable sentence realizer. ANLP’97.

MATTHIESSEN C. & BATEMAN J. (1991). Text generation and systemic-functional linguis-
tics .' experiences from English and Japanese. Frances Pinter Publishers and St. Martin’s Press.

MEL’CUK I. & ZOLKOVSKIJ A. (1970). Towards a functioning meaning-text model of lan-
guage. Linguistics, 57, 10-47.

VELLDAL E. & OEPEN S. (2006). Statistical ranking in tactical generation. In EMNLP,
Sydney.

VIJAY-SHANKER K. & J OSHI A. (1988). Feature Structures Based Tree Adjoining Grammars.
12th Computational linguistics, 55, v2.

WHITE M. (2004). Reining in CCG chart realization. In INLG, p. 182-191.

YANG G., MCKOY K. & VIJAY-SHANKER K. (1991). From functional speciﬁcation to syn-
tactic structure. Computational Intelligence, 7, 207-219.

