TALN 2008, Avignon, 9-13 juin 2008

Calculs d’uniﬁcation sur les arbres de dérivation TAG

Sylvain Schmitzl Joseph Le Roux2
(1) LORIA, INRIA Nancy Grand Est, Nancy
(2) LORIA, Université Nancy 2, Nancy
Sylvain.Schrnitz @loria.fr, J oseph.LeRoux@loria.fr

Résumé. Nous déﬁnissons un formalisme, les grammaires rationnelles d’arbres avec traits,
et une traduction des grammaires d’arbres adjoints avec traits vers ce nouveau formalisme. Cette
traduction préserve les structures de dérivation de la grammaire d’origine en tenant compte de
l’uniﬁcation de traits. La construction peut étre appliquée aux réalisateurs de surface qui se
fondent sur les arbres de dérivation.

Abstract. The derivation trees of a tree adjoining grammar provide a ﬁrst insight into the
sentence semantics, and are thus prime targets for generation systems. We deﬁne a formalism,
feature based regular tree grammars, and a translation from feature based tree adjoining gram-
mars into this new formalism. The translation preserves the derivation structures of the original
grammar, and accounts for feature uniﬁcation.

M0tS-CléS I Uniﬁcation, grammaire d’arbres adjoints, arbre de dérivation, grammaire
rationnelle d’arbres.

Keywords: Uniﬁcation, tree adjoining grammar, derivation tree, regular tree grammar.

1 Introduction

Le processus de dérivation dans les grammaires d’arbres adjoints (J oshi & Schabes, 1997, TAG)
produit deux arbres : l’arbre dérive’ qui correspond a un arbre syntagmatique classique (voir
ﬁgure lb), et l’arbre de dérivation, qui présente par quelles opérations les arbres élémentaires
de la grammaire ont été combinés pour obtenir l’arbre dérivé (voir ﬁgure la). Selon la tache de
traitement de la langue, il sera plus adéquat de considérer l’un ou l’autre, l’arbre dérivé étant en
correspondance avec les lexemes d’une phrase, tandis que l’arbre de dérivation donne une vue
sémantique primitive de la phrase, comme le montrent par exemple Candito & Kahane (1998).

De fait, l’arbre de dérivation est privilégié dans plusieurs approches pour la réalisation de
surface (Koller & Striegnitz, 2002; Koller & Stone, 2007). Il sert aussi de pivot a partir du-
quel représentation sémantique et arbre dérivé peuvent étre générés dans les approches de de
Groote (2002), Pogodalla (2004) et Kanazawa (2007) a base de grammaires catégorielles abs-
traites.

Ces travaux ne sont cependant pas immédiatement applicables a des grammaires réalistes qui
emploient une variante des TAG a base de structures de traits (Vijay-Shanker, 1992, voir par
exemple la ﬁgure 2). Cette variante munit les noeuds des arbres élémentaires de structures de
traits, dont les uniﬁcations contraignent les opérations de substitution ou d’adjonction du noeud.

Sylvain Schmitz, Joseph Le Roux

S

[det:+ /\

W . 5.] N VP

/\

D [mfiiig] N [Wwg] V Adj

CI'€1lX
subst / z ’ ‘ x \ subst

radis est
adjl l |:det:—:| /\. l l
gris 1e numzsg 1? A|(l_] est creux
adj 1'6 radis gris
(a) Arbre de dérivation. (b) Arbre dérivé.

FIG. 1: Dérivation de la phrase « Le radis gris est creux. » avec la grammaire de la ﬁgure 2.

S bat:[det 1 *1 N0 bat: [mfg   NT but: ["23  jg] NT
|: det : +:| /\ i /\ /\
M" "W ‘ 3 Ni VP radis M: "Z:  ; N* Adj<> D<> but: "3:  5- N*
E
_ /\
taﬂ"[’»,um - “J   bat:["um : SE] \/F) gI'lS 18
creux est

FIG. 2: Exemple de grammaire d’arbres adjoints avec structures de traits.

Ces structures ne posent en théorie aucun probleme, car les domaines de valeur des différents
traits sont ﬁnis et il sufﬁt de démultiplier le nombre de symboles non-terminaux pour émuler les
différentes structures possibles. Mais le nombre de ces structures s’accommode mal de cette vi-
sion na'1've : par exemple, les vingt-huit traits syntaxiques utilisés dans la grammaire SEMFRAG
du francais (Gardent, 2006) décrivent un domaine, certes ﬁni, mais comprenant plus de 214 mil-
liards d’éléments. Enﬁn, l’argument du domaine ﬁni ne tient tout simplement pas pour certains
mécanismes de construction sémantique fondés sur l’uniﬁcation de traits d’index sémantiques
qui ont des domaines de valeur non ﬁnis (Gardent & Kallmeyer, 2003; Gardent, 2006).

Nous étudions dans cet article la traduction d’une grammaire d’arbres adjoints avec structures
de traits en une grammaire rationnelle d’arbres de dérivation qui en préserve les mécanismes
d’uniﬁcation de traits. Plus en détail,

— nous rappelons comment traduire une grammaire TAG en une grammaire rationnelle d’arbres
(RT G) qui en génere les arbres de dérivation (section 2.1),

— puis nous déﬁnissons un formalisme de grammaires rationnelles d’arbres enrichies par des
structures de traits et montrons comment traduire une grammaire TAG dans ce nouveau for-
malisme (section 2.2);

— enﬁn, nous proposons une seconde traduction qui améliore l’efﬁcacité de la génération des
arbres de dérivation TAG (section 3).

Nous supposons que le lecteur est familier avec les aspects théoriques des grammaires d’arbres

adjoints (Joshi & Schabes, 1997), des grammaires rationnelles d’arbres (Comon et al., 2007) et

de l’uniﬁcation (Robinson, 1965)1.

1Pour éviter toute confusion avec 1’opération de substitution dans les TAG, la notion de substitution que l’on
trouve associée a1’uniﬁcation sera appelée u—substitution dans la suite.

Calculs d’uniﬁcation sur les arbres de dérivation TAG

2 Arbres de dérivation et uniﬁcation

Un arbre de dérivation d’une grammaire d’arbres adjoints a des noeuds étiquetés par des arbres
élémentaires de la grammaire et en guise d’arétes les relations d’adjonctions et substitutions
perIr1ises par la grammaire entre arbres élémentaires. Dans un premier temps, nous reformulons
la description donnée par de Groote (2002) des arbres de dérivation qu’une grammaire d’arbres
adjoints peut engendrer, en utilisant explicitement une grammaire rationnelle d’arbres. Dans
un second temps, nous montrons comment les calculs d’uniﬁcation de l’arbre dérivé peuvent
s’intégrer simplement dans cette grammaire rationnelle.

2.1 Grammaire rationnelle des arbres de dérivation

Formellement, une grammaire d’arbres adjoints (E, N, I, A, S) est constituée d’un alphabet
terminal 2, d’un alphabet non-terminal N, d’un ensemble I d’arbres initiaux oz, d’un ensemble
A d’arbres auxiliaires B, et d’un non-terminal distingué S de N. Nous désignons par 7, le noeud
racine de l’arbre élémentaire 7 et par Bf le noeud pied de l’arbre auxiliaire 3.

Les noeuds d’un arbre élémentaire 7 de I U A qui nous intéressent sont étiquetés par des non-
terminaux, et permettent une operation de substitution ou d’adjonction; nous considérons en
particulier que le pied d’un arbre auxiliaire ne permet pas d’adjonction2. Nous numérotons ces
noeuds par un parcours arbitraire depuis la racine, de sorte que 71 = 7,. Nous notons |ab(7,-)
l’étiquette dans N du noeud 7,-.

Pour construire la grammaire rationnelle (S, N U N A,.7-" , R) des arbres de dérivation, nous

déﬁnissons :

— l’ensemble des arbres élémentaires comme notre alphabet ordonné .7-" = I U A U {5}, ou le
rang n = rg(7) d’un arbre élémentaire 7 est le nombre de ses noeuds ou une substitution ou
une adjonction est possible, et oh 5, de rang 0, représente une feuille vide;

— l’alphabet non-terminal N et un duplicata N A = {X A | X E N} comme alphabet de la
grammaire rationnelle ; a chaque noeud non terminal 7,- d’un arbre étiqueté par X = |ab(7,-),
on associe un non terminal nt(7,-) de forme X dans N s’il permet une substitution ou X A
dans N A s’il permet une adjonction;

— l’ensemble de regles R déﬁni comme l’union

{X —> o4(nt(0z1), . . . , nt(0z,,)) | oz 6 I,n = rg(a),X = |ab(0zT)}

U {XA —> ﬂ(nt(ﬂ1),...,nt(ﬂ,,)) |ﬂ E A,n = rg(ﬂ),X = |ab(ﬂ,)} (1)
U {XA—>E|XA€NA}

Les arbres initiaux de la grammaire TAG sont ainsi associés a des regles de la forme
X —> 0z(Y1, . . . ,Y,,) et les arbres auxiliaires a des regles XA —> ﬂ(Y1,...,Y,,), 011 X est le
non terminal qui etiquette la racine de l’arbre élémentaire TAG. Enﬁn, la possibilité d’une ad-
jonction non réalisée est simulée par les regles X A —> 5. On peut observer que la taille de la
grammaire RTG obtenue est équivalente a la taille de la grammaire TAG d’origine. La traduc-
tion elle-méme peut étre calculée en temps linéaire.

Puisque la grammaire TAG de la ﬁgure 2 ne propose pas d’arbre auxiliaire enraciné par S, VP,
Adj ou D, on peut simpliﬁer les regles en ignorant ces noeuds d’adjonction. La ﬁgure 3a montre

2Dans un souci de concision, nous ne traitons pas les contrajntes d’adjonction sélective, qui ne posent aucune
difﬁculté conceptuelle.

Sylvain Schmitz, Joseph Le Roux

<5, {g, V, VA, N, NA}, creux creux creux
{creux, est, radis, gris, le, 5}, /\ /\ /\

radis est radis est radis est
{S —> creuX(N, V), l l l l l l

V —> 6St(V/4), 5 5 1e 5 gris 5
VA —> E, l I
N —> radis(N A), 1'6
NA —> griS(NA), le gﬁs
NA —> le(NA), |
NA —> 5}) 5 5
(a) Grammaire rationnelle d’arbres. 0)) Exemples d’arbres générés.

FIG. 3: Grammaire rationnelle correspondant a la grammaire TAG de la ﬁgure 2.

la grammaire simpliﬁée pour les arbres de la ﬁgure 2. Il est aisé de vériﬁer que cette grammaire
rationnelle génere les arbres enracinés par « creux », avec « radis » et « est » pour deux ﬁls,
et une combinaison arbitraire de noeuds « le » et « gris » comme descendance de « radis »
(voir ﬁgure 3b) : la grammaire rationnelle génere les arbres de derivation d’une version sans
structures de traits de la grammaire TAG d’origine.

2.2 Calculs d’uniﬁcation

Grammaire rationnelle d’arbres avec traits Aﬁn de traduire les restrictions imposées par
les structures de traits de la grammaire TAG, nous considérons dans notre RTG non plus de
simples réécritures entre termes, mais des surréductions (Hanus, 1994), c’est-a-dire des réécri-
tures assorties d’uniﬁcations, avec des variables dans (N U N A) X D o1‘1 D désigne l’ensemble
des structures de traits possibles3.

Deﬁnition 1. Une grammaire rationnelle d ’arbres avec traits (S, N, .7-" , D, R) est composée
d’un axiome S, d’un ensemble de symboles non-terminaux N contenant S, d’un alphabet or-
donné de terminaux .7-', d’un ensemble de structures de traits D, et d’un ensemble de regles
de forme (A,d) —> a((B1,d’1),...,(B,,,d;,)) avec A,B1, . . .,B,, des non-terminaux de N,
d, d’1, . . . , d;, des structures de traits de D, eta un terminal d’arité n de .7-".

La relation de derivation => associée a G = (S, N, .7-", D, R) met en relation des paires asso-
ciant un terme4 de T(.7-", N X D) et une u-substitution, de telle sorte que (3, e) => (t, e’) si et
seulement s’il existe un contexte5 C, une regle (A, d) —> a((B1, d’1), . . . , (Bn,  dans R avec
des variables fraiches dans les structures d, d’1, . . . ,d;, et une u-substitution 0 tels que

3 = C'[(A, d’)], a = mgu(d, e(d’)), t= C'[a((B1, a(d’1)), . . . , (B,,, a(d;,)))] et e’ = a o e

3Etant données deux structures de traits d et d’ de D, on désigne par l’u—substitution 0 = mgu (d, d’ ) leur
umﬁcateur le plus général s’il existe. Nous notons T l’élément le plus general de D, et id l’u—substitution identité.

4L’ensemble des terines sur l’a1phabet .7-' et l’ensemble de Variables X est note T(.7-‘, X); en particulier
T(.7-‘, (2)) = T(.7-‘) est l’ensemble des arbres sur .7’.

5Un contexte C’ de T(.7-', X) est un terme de T(.7-‘, X U  :17 ¢ X, qui ne contient qu’une seule occurrence
de 2:, et le terine C’ [t] pour un tenne t de T(.7-‘, X) est obtenu en remplagant cette occurrence par t dans C’.

Calculs d’uniﬁcation sur les arbres de dérivation TAG

Le langage généré par G est L(G) = {t E T(.7-") | Ele, ((S, T), 2d) =>* (75, e)}. El

La propagation des uniﬁcations de traits se fait hiérarchiquement par la recherche de l’uniﬁ-
cateur le plus général mgu a chaque étape de dérivation. L’u-substitution e globale associée
comme environnement a notre terme sert a communiquer les résultats des uniﬁcations dans les
différentes branches du terme.

Traduction de TAG vers RTG avec traits Munis de cette déﬁnition opérationnelle d’une
RTG avec uniﬁcation, nous enrichissons notre traduction de TAG vers RTG pour tenir compte
des structures de traits des noeuds des arbres TAG. Nous déﬁnissons feats(7,-) comme la structure
de traits de D associée au noeud 7,- de l’arbre élémentaire 7. Cette structure est composée de deux
ensembles hauts et bas de traits atomiques top(7,-) et bot(7,-).

La traduction est établie sur la notion d’ interface in (7) offerte par chaque arbre élémentaire TAG
7, qui servira de structure de traits de la partie gauche des regles de la grammaire rationnelle
d’arbres avec traits. Dans le cas d’un arbre initial oz, la structure [top : top(oz,)] doit s’uniﬁer
avec celle du noeud de substitution. Dans le cas d’un arbre auxiliaire B, la structure [top :
top(ﬂ,), bot : bot(ﬂf)] doit s’uniﬁer avec celle du noeud d’adjonction. Il reste a coindexer ces
interfaces avec les structures de la partie droite de chaque regle; le seul cas a traiter est celui
de la racine de l’arbre élémentaire, pour laquelle nous déﬁnissons une fonction featsr. Nous
déﬁnissons ainsi pour tout oz dans I, B dans A et 7 dans I U A, a l’aide d’une variable fraiche t

 : Bi:  :op(a7-):| 
mm = [E2’€EE:::z;:] <3>
featsr(71) = [223 i :ot(71):| (4)

Pour un noeud 7,-, nous déﬁnissons tr(7,-) = (nt(7,-), feats(7,-)) et trT(71) = (nt(71), feats,(71)).
L’ ensemble de regles de notre grammaire rationnelle d’arbres avec traits pour une grammaire
TAG (2, N, I, A, S) est alors

{(X,in(a)) —> 0z(trT(0z1),tr(oz2), . . . ,tr(0z,,)) | oz 6 I,n = rg(a),X = |ab(0zT)}

U {(XA, MB» —> ﬂ(’Err(ﬂ1),’Er(ﬂ2), - - - ,’Er(ﬂn)) | 5 E A,” = Fg(ﬂ),X = 'ab(ﬂr)} (5)
U {XA [‘””‘”] —> 5 | XA E NA,xvariablede D}

botzz

Les regles dérivant la feuille vide 5 effectuent l’uniﬁcation ﬁnale entre traits hauts et bas des
noeuds de la grammaire TAG.

Nous obtenons alors l’ensemble de regles suivant pour la grammaire rationnelle enrichie de
structures de traits correspondant a la grammaire TAG de la ﬁgure 2 :

(s, T) A  (N  [.:::::n ,v  wmn)

V [*"P=*] —> est (VA [i:,'Z:fnum=sg]])
VA |:t0p:z:| _> E.

botzz

N[*"P=*] —> Fadis (NA [i:5:f.zet=_]])
tapzt

NA [batz [m‘f;fj;]] —> S113 (NA 
tapzt tapzt
NA [batz det:— :|:>le  [blitz det:+ 
|:num : sg:| |:num : sg:|

NA |:t0p:z:| _> E

botzz

(6)

Sylvain Schmitz, Joseph Le Roux

0 : ((S',T), id)

1: (creux(N [mu [m",’f,fj3;]] ,V[toz1= [mm»=ow]]),id)

d / \

2; (radis (NA [:5   ,{1tI—> [,:;::g,]}) 6: (est (VA [1331 :::j::]]) ,{2tI—> [m.mg]})

 
 

'MI/m:11w

3: (gas (NA [jjfgj  ,{m H [.:;::;r.]}) 7: <e,{21w H [~»«mg1}>

   

‘ ’Wll/In : sg

. det:-{-
_  ,{111t H [.::.‘:.T.] .112: H sg})

5: (5, {11111: »—>  ,01: »—> sg})

FIG. 4: Une dérivation dans la RTG enrichie pour la phrase « Le radis gris est creux. »

Exemple de dérivation Nous reprenons dans la ﬁgure 4 le cas de la phrase « Le radis gris
est creux. » en employant les regles enrichies de structures de traits de l’équation (6). Chaque
noeud de l’arbre de la ﬁgure est constitué d’une étiquette et d’un couple formé d’un terme de
T (.7-" , (N U N A) X D) et d’un environnement6. La création de variables fraiches utilise l’adresse
de Gorn du noeud ou la réécriture a lieu. Les étiquettes de chaque noeud indiquent l’ordre dans
lequel s’effectuent les surréductions. Enﬁn, l’on remplace les variables par leur valeur associée
dans l’environnement des que possible.

On ne peut pas dériver l’arbre correspondant a « * Le radis gris sont creux. ». La partie gauche
de la tentative de dérivation aurait été similaire. En revanche, dans la partie droite, le trait bot
associé au noeud VA de sont aurait eu pour valeur num : pl (pluriel). L’analyse aurait donc
échoué a l’étape suivante, puisqu’en atteignant la feuille 5 il aurait fallu uniﬁer des traits top et
bot avec respectivement sg et pl comme valeurs de num.

Bien sﬁr, pour une analyse qui visite d’abord le sous-arbre droit avant le sous-arbre gauche,
le résultat serait le méme, avec encore pour étape décisive du point de vue de l’uniﬁcation la
réécriture ﬁnale a 5.

3 Transformation par coin gauche

Comme nous venons de le voir, la génération d’un arbre de dérivation TAG a l’aide d’une
grammaire RTG avec traits n’est pas tres prédictive, dans le sens o1‘1 il est nécessaire de patienter
jusqu’a la réécriture a 5 pour vériﬁer si une substitution réussit. Dans l’exemple de la ﬁgure 4,
la substitution de « radis » dans « creux » n’est véritablement entérinée qu’au moment de la
réécriture a 5, et potentiellement toutes les opérations intermédiaires seraient a défaire si cette
réécriture n’avait pas été possible.

Le seul ﬁltrage immédiatement exercé par l’arbre « radis » lors de sa substitution au noeud N
de « creux » est l’uniﬁcation de sa structure top avec la structure top de N. Or, l’arbre « radis »

5Nous ne faisons apparaitre que les parties de l’environnement calculées :21 cc point de la dérivation.

Calculs d’uniﬁcation sur les arbres de dérivation TAG

suit l’usage dans les graInmaires TAG, qui est que sa structure top est vide, et il n’y a en fait
aucun ﬁltrage par ce biais.

Nous présentons dans cette section une transformation du langage d’arbres de dérivation qui
permet d’inverser l’ordre des réécritures, en commencant par 5, en opérant a toutes les adjonc-
tions a la racine, et en ﬁnissant par l’arbre initial. Comme nous avons convenu que la racine d’un
arbre élémentaire TAG apparaissait en ﬁls gauche dans nos arbres de dérivation, cette transfor-
mation revient a une transformation par coin gauche (Rosenkrantz & Lewis II, 1970) appliquée
a nos grammaires rationnelles d’arbres de dérivation. Cette transformation est simple, et nous
semble plus naturelle que la transformation correspondante sur les arbres dérivés.

3.1 Grammaire rationnelle transformée

Les regles que nous souhaitons transformer sont de la forme X —> 0z(XA, . . . ), X A —> ﬂ(XA, . . . )
ou X A —> 5. A l’issue de la transformation, un appel a X devra commencer par invoquer 5, puis
les adjonctions B en ordre inverse, et enﬁn 04 en demier lieu, dont l’arité est décrémentée. Pour
notre grammaire (ﬁgure 3a), cela revient simplement a utiliser de nouveaux non-terminaux N 3
et V3 et les regles
S —> creuX(N3, V3)
N 3 —> E(N)
N —> radis | gris(N) | le(N) (7)
V3 —> E
V —> est

I1 manque a ces regles la possibilité d’une adjonction ailleurs qu’a la racine d’un arbre initial;
il sufﬁt alors de conserver les regles X A —> ﬂ(XA, . . .) et X A —> 5 qui s’appliqueront comme
auparavant.

Nous pouvons ensuite éliminer les 5-termes ; la grammaire de la ﬁgure 3a transformée est alors :

S —> creux(N, V)
N —> radis | gris(N) | le(N) (8)
NA —> gris(NA) | le(NA) | 5
V —> est

Les regles de dérivation de N A sont cependant inutiles puisqu’il n’y a jamais d’adjonction sur
un noeud de catégorie N qui n’est pas une racine dans notre grammaire d’arbres adjoints.

Formellement, étant donnée une grammaire d’arbres adjoints (E, N, I, A, S), sa graInmaire ra-
tionnelle d’arbres de dérivation transformée par coin gauche G1,, = (S, N U N A, .7516, R16) utilise
un alphabet terminal .710 = I U A U {5} mais o1‘1l’arité d’un arbre initial 04 est rg(a) — 1, et un
ensemble de regles R1,, déﬁni comme l’union

{X —> oz(nt(0z2), . . . , nt(0zn)) | oz 6 Ln = rg(a),X = |ab(0zT)}
U {X —> ﬂ(Xa WW2) - - -a"’E(ﬂn)) lﬂ G A,” = rg(ﬂ)aX = '3b(ﬂr)} (9)
U {XA —> ﬂ(nt(ﬂ1),---,"’E(Bn)) | B E A,” = rg(ﬂ)aX = '3b(&)}

La taille de cette graInInaire est au pire doublée par rapport a la grammaire rationnelle d’arbres
de dérivation puisque chaque arbre auxiliaire apparait maintenant deux fois. En pratique, les
regles utiles dans la grammaire obtenue sont probablement moins nombreuses. Par exemple,

Sylvain Schmitz, Joseph Le Roux

dans la grammaire SEMFRAG et en se basant sur 1’existence de noeuds d’adjonction ailleurs
qu’a la racine pour chaque catégorie syntaxique, seuls un tiers des arbres auxiliaires, soit encore
un dixieme des arbres élémentaires, est concemé par cette duplication.

Notons enﬁn que la transformation est aisément réversible. Nous déﬁnissons pour cela la fonc-
tion |c‘1 de T(.7-'16) dans T(.7-') par

|c‘1(t) = rev|c(t, 5) (10)

rev|c(ﬂ(t1,t2, . . .,tn),t) = rev|c(t1,ﬂ(t, _fg2(t2), . . . , f5n(tn))) (11)
rev|c(oz(t1, . . .,tn),t) = a(t, fa2(t1), . . . , f%+1(tn)) (12)

_ recur(t) si 71- est un noeud d’adjonction
f%( ) _ {|c‘1(t) si 71- est un noeud de substitution (13)
reCUr(7(t1a - - - a?3n)) = 7(f71(t1)a - - - ,fv..(tn)) (14)

On peut ainsi procéder a la génération d’un arbre dérivé dans L(G1c) etretrouver1’arbre corres-
pondant de L(G) en lui appliquant |c_1.

3.2 Uniﬁcation dans la grammaire transformée

Nous procédons maintenant a la déﬁnition d’une grammaire rationnelle d’arbres de dérivation
transformée par coin gauche avec structures de traits. En reprenant les regles transformées (7)
de la section 3.1, nous obtenons dans un premier temps les regles transformées avec structures
de traits

(S,  —> creux (N3 |:t0P=|: det : 4-M ,V [tap = [num = 

Ns[‘”"‘*i —> e (N [‘:::::])

N [batz [det : —]J —> radis
N [:T[.:::;]] -> gris (N [737[.:::;]i) <15)

9..
(1:
ca-

1501) : t tap : t
NM :+i]~1e(N[ww])
num . sg num . sg
Vs [ww] —> 6 (V [Z:‘:::])
V [batz [Hum : sg:|] —) est
Comme la récursion au sein des arbres auxiliaires est inversée, les structures de traits de la

partie gauche de chaque regle sont les structures de son noeud racine dans la grammaire TAG,
et inversement (on observe ce changement pour la regle qui dérive « 1e »).

Nous pouvons comme auparavant éliminer les regles dérivant 5, ce qui a pour effet de copier la
structure de traits top des noeuds de substitution dans la structure bot. Nous obtenons1’ensemb1e
de regles suivant pour la grammaire TAG de la ﬁgure 2 :
(S, T) e creux (N  ] ,v [i:::: :::::]])
N [bat : [det : -1] —) radis

was (N[ii‘ii‘w=—i]> 

det :
num :
det :
' num :

top : :-
+
2:

     

W/lLW'Ll$ W/U.7TLl$

tapzt tapzt
N [M M] ~1e(N [Mi Mi)
num.sg num.sg
V[b0t:[num:sg]] —> est

Calculs d’uniﬁcation sur les arbres de dérivation TAG

Cette grammaire d’arbres avec traits est bien plus lisible que celle décrite dans l’équation (6) :
le premier ﬁls de « creux » ne peut étre que « le » de par la présence du trait det = + dans
la structure bot associée a N. Les seuls ﬁls de « le » possibles sont « gris » et « radis », seuls
compatibles avec le trait det = —. Le ﬁltrage dﬁ aux uniﬁcations est maintenant immédiat.

Construction de la grammaire rationnelle transformée Nous déﬁnissons les variantes sui-
vantes des fonctions de calcul de structures de traits, pour tout arbre auxiliaire B de A et pour
tout noeud 7, d’un arbre élémentaire 7 de I U A :

in1c(ﬂ) = [:13 E :ot(,6f):| (17)
[213 j ::;§;;:;] si 7, est un noeud de substitution,
to :t .
*eat51c(%> = [:22 : :::::E::§l 3‘ “W = 7“ (18)
feats(*y,-) sinon.

Pour un noeud 7,-, nous notons trlc  la paire (nt(*y,-), featslc 

Formellement, l’ensemble de regles de notre grammaire rationnelle d’arbres avec traits trans-
formée pour une grammaire TAG (E, N, I, A, S) est alors

{(X,feats(oz1)) —> 0z(tr1c(0z2), . . .,tr1c(oz,,)) | 04 6 Ln = rg(a),X = |ab(oz,)}
U {(X,f€3’ES1c(ﬂ1)) —> ﬂ((X, in1c(ﬂ)): ’E|’1c(ﬂ2), - - - 7tr1C(ﬂ71«))
iﬂ 6 Av” : rg(ﬂ)7X : 
U {(XA7 in(ﬂ)) —’ ﬂ(tr7'(B1)atrlc(B2)a - - - at|’1c(Bn)) l 3 E A," = "8(ﬂ)aX = |3b(ﬂr)} (19)

4 Conclusion

Les grammaires rationnelles d’arbres avec structures de traits permettent de générer aisément les
arbres de dérivation d’une grammaire TAG avec structures de traits. Les grammaires transfor-
mées par coin gauche permettent de plus de ﬁltrer plus efﬁcacement les operations d’adjonction
et de substitution possibles a partir d’un arbre élémentaire.

/-\ /

Si des calculs d’uniﬁcation sur arbres de dérivation ont deja eté considérés par le passé de ma-
niere spécialisée (Kallmeyer & Romero, 2004), les mécanismes que nous avons déﬁnis sont
sufﬁsamment généraux pour traduire ﬁdelement l’uniﬁcation dans les grammaires d’arbres ad-
joints.

Parmi les perspectives ouvertes par ce traitement des structures de traits dans les arbres de
dérivation, on po11rra mentionner des calculs d’accessibilité plus ﬁns entre les arbres élémen-
taires, utiles par exemple pour vériﬁer qu’une TAG est dans la classe restreinte des grammaires
d’arbres par insertion (Schabes & Waters, 1995, TIG) ou sous forme rationnelle (Rogers, 1994,
RFTAG). On pourrait par ailleurs imaginer étendre notre approche a l’analyse syntaxique, pour
peu que les informations topologiques d’ordre entre les ancres soient calculées dans nos arbres
de dérivation (Kuhlmann, 2007).

Sylvain Schmitz, Joseph Le Roux

Références

CANDITO M.-H. & KAHANE S. (1998). Une grammaire TAG vue comme une grammaire
Sens-Texte précompilée. In P. ZWEIGENBAUM, Ed., TALN’98, p. 102-111: ATALA.

CoMoN H., DAUCHET M., GILLERON R., LODING C., JACQUEMARD F., LUGIEZ D., TI-
SON S. & TOMMASI M. (2007). Tree Automata Techniques and Applications.

DE GROOTE P. (2002). Tree-adjoining grammars as abstract categorial grammars. In R.
FRANK, Ed., TAG+6, p. 145-150.

GARDENT C. (2006). Integration d’une dimension sémantique dans les grammaires d’arbres
adjoints. In P. MERTENS, C. FAIRoN, A. DISTER & P. WATRIN, Eds., TALN’06, p. 149-158:
Presses universitaires de Louvain.

GARDENT C. & KALLMEYER L. (2003). Semantic construction in feature-based TAG. In
EACL’03, p. 123-130: ACL Press.

HANUS M. (1994). The integration of functions into logic programming: From theory to
practice. Journal of Logic Programming, 19-20, 583-628.

JOSHI A. K. & SCHABES Y. (1997). Tree-adjoining grammars. In G. ROZENBERG & A.
SALOMAA, Eds., Handbook of Formal Languages, volume 3: Beyond Words, chapter 2, p.
69-124. Springer.

KALLMEYER L. & ROMERO M. (2004). LTAG semantics with semantic uniﬁcation. In 0.
RAMBOW & M. STONE, Eds., TAG+7, p. 155-162.

KANAZAWA M. (2007). Parsing and generation as Datalog queries. In ACL’07, p. 176-183:
ACL Press.

KOLLER A. & STONE M. (2007). Sentence generation as a planning problem. In ACL’07, p.
336-343: ACL Press.

KOLLER A. & STRIEGNITZ K. (2002). Generation as dependency parsing. In ACL’02, p.
17-24: ACL Press.

KUHLMANN M. (2007). Dependency Structures and Lexicalized Grammars. Doctoral disser-
tation, Saarland University, Saarbriicken, Germany.

POGODALLA S. (2004). Vers un statut de l’arbre de dérivation : exemples de construction
de representations sémantiques pour les grammaires d’arbres adjoints. In P. BLACHE, Ed.,
TALN’04, p. 377-386: LPL.

ROBINSON J . A. (1965). A machine-oriented logic based on the resolution principle. Journal
ofthe ACM, 12(1), 23-41.

ROGERS J . (1994). Capturing CFLs with tree adjoining grammars. In ACL’94, p. 155-162:
ACL Press.

ROSENKRANTZ D. J . & LEWIS II P. M. (1970). Deterministic left comer parsing. In 11th
Annual Symposium on Switching and Automata Theory, p. 139-152: IEEE Computer Society.

SCHABES Y. & WATERS R. C. (1995). Tree insertion grammar: a cubic-time parsable forma-
lism that lexicalizes context-free grammar without changing the trees produced. Computatio-
nal Linguistics, 21(4), 479-513.

VIJAY-SHANKER K. (1992). Using descriptions of trees in a tree adjoining grammar. Com-
putational Linguistics, 18(4), 481-517.

