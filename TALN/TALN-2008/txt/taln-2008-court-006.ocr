TALN 2008, Avignon, 9-13 juin 2008

Sylva : plate-forme de validation multi-niveaux de lexiques

Karen Fort Bruno Guillaume
LORIA / INRIA Nancy Grand-Est
Karen.Fort@loria.fr, Bruno.Guillaume@loria.fr

Résumé. La production de lexiques est une activité indispensable mais complexe, qui né-
cessite, quelle que soit la méthode de création utilisée (acquisition automatique ou manuelle),
une validation humaine. Nous proposons dans ce but une plate-forme Web librement dispo-
nible, appelée Sylva (Systematic lexicon validator). Cette plate-forme a pour caractéristiques
principales de permettre une validation multi-niveaux (par des validateurs, puis un expert) et
une tracabilité de la ressource. La tache de l’expert(e) linguiste en est allégée puisqu’il ne lui
reste a considérer que les données sur lesquelles il n’y a pas d’accord inter-validateurs.

Abstract. Lexicon production is essential but complex and all creation methods (auto-
matic acquisition or manual creation) require human validation. For this purpose, we propose a
freely available Web-based framework, named Sylva (Systematic lexicon validator). The main
point of our framework is that it handles multi-level validations and keeps track of the resour-
ce’s history. The expert linguist task is made easier : (s)he has only to consider data on which
validators disagree.

M0tS-CléS I Lexiques, plate-forme de validation, cadres de sous-catégorisation.

Keywords: Lexicons, validation framework, subcategorization frames.

Karen Fort, Bruno Guillaume

1 Introduction

De nombreux outils de traitement automatique des langues (TAL) nécessitent des ressources
linguistiques et notamment des lexiques. La construction de ce type de ressources présente de
nombreuses difﬁcultés :

— différents types de lexiques sont nécessaires en fonction des applications;

— le nombre d’entrées a décrire est souvent important (de l’ordre de 500 000 pour les formes

ﬂéchies du frangais par exemple) ;
— suivant la tache visée, des informations plus ou moins détaillées sont nécessaires ;
— la fagon de coder le contenu linguistique doit parfois étre adaptée aux outils ou au moins aux
théories Inises en jeu dans ces outils.

Pour la langue frangaise, les lexiques morphologiques sont moins problématiques : ce type de
lexique ne pose pas de probleme majeur quant au contenu linguistique qu’il doit contenir. On
dispose ainsi de lexiques morphologiques de bonne qualité avec une couverture satisfaisante
(Morphalou (Romary et al., 2004), partie morphologie du Leﬁj‘ (Sagot et al., 2006), ...). Le
probleme est plus aigu pour les lexiques syntaxiques sur lesquels nous nous concentrons ici.
Des acteurs du TAL francophones travaillent ensemble régulierement depuis deux ans sur le
développement de ressources syntaxiques du frangais (projet LexSynt1), le travail présenté ici
pour la validation est en partie issu des reﬂexions menées dans le cadre de ce projet. Il est im-
portant de noter que la plate-forme présentée n’est pas spéciﬁque a ces lexiques et pourrait étre
utilisée avec des lexiques sémantiques pour lesquels les problemes sont encore plus marqués.

La construction manuelle de ressources par des experts linguistes est a priori la plus satisfai-
sante, mais la quantité de travail nécessaire rend cette méthode irréaliste dans la plupart des cas.
Quelques exemples de ressources manuelles existent néammoins : pour le frangais, on peut citer
DICOVALENCE (van den Eynde & Mertens, 2003), les tables du lexique-grammaire (Gross,
1975) ou la base lexicale de Dubois (Dubois & Dubois-Charlier, 1997). A l’opposé, des mé-
thodes de construction automatique de lexiques a partir de corpus ont été proposées : acqui-
sition de cadres de sous-categorisation a partir de corpus (Preiss et al., 2007) ou de corpus
arborés (Kupsc, 2007). L’inconvénient de cette derniere méthode est évidemment la qualité du
lexique produit. En effet, la pertinence de chacune des entrées ne peut étre qu’estimée et la cou-
verture dépend de la taille des corpus utilisés et de leur représentativité pour l’aspect considéré
dans le lexique.

Dans la pratique, le plus souvent, la production de lexique utilise des méthodes mixtes qui
automatisent une partie du travail et qui minimisent l’intervention humaine. L’ acquisition au-
tomatique se fait sur des ressources existantes : des corpus bruts ou arborés, des dictionnaires
électroniques (construction de Morphalou a partir du TLFi (Pierrel et al., 2004)), ou d’autres
ressources informatisées mais qu’il faut adapter (contruction de SynLex (Gardent et al., 2006)
a partir des tables du lexique-grammaire). La ressource produite dépend alors de la qualité de
la ressource de départ et de la méthode de conversion. Dans le cas de SynLex, la ressource
produite souffre de nombreuses imperfections (Falk et al., 2007) et l’intervention humaine est
nécessaire pour valider a posteriori toute ou partie de la ressource.

La validation multi-niveaux permet de reporter une partie du travail humain vers des linguistes
moins expérimentés. Le premier niveau de validation est ainsi réalisé par plusieurs validateurs
non-experts, le deuxieme niveau permet ensuite au linguiste expert de ne considérer que les cas
ou les différents validateurs ont des avis divergents.

lhttpz//lexsynt.inria.fr

Sylva : plate-forme de validation multi-niveaux de lexiques

Nous proposons ici une plate-forme pour gerer la validation multi-niveaux de lexiques. Cette
plate-forme permet la gestion des deux types d’utilisateurs et automatise le passage par les deux
niveaux de validation. Apres avoir decrit les fonctionnalites et l’implantation de la plate-forme,
nous montrons comment elle peut s’instancier avec un lexique syntaxique (SynLex) produit
automatiquement a partir des tables du lexique-grammaire.

2 Choix méthodologiques

Notre objectif premier est de permettre la validation rapide et complete d’une ressource a large
couverture. C’est cet objectif qui a guide certains choix pour cette premiere version de l’outil.

2.1 Interface simpliﬁée

Pour chaque entree du lexique, le validateur a le choix entre trois jugements : accepte’, refuse’,
ne sait pas. Il n’a donc pas la possibilite d’editer une entree pour la modiﬁer. En effet, le but
de cette interface est de permettre au validateur de se prononcer rapidement sur chacune des
entrees. Nous sommes bien conscients que cela n’est pas toujours satisfaisant et que certaines
entrees devraient etre corrigees plutot que rej etees. C’est pourquoi, il est demande au validateur
de motiver ses choix par des commentaires guides. 11 sera ainsi possible d’envisager une phase
ulterieure de correction des entrees qui posent probleme, guidee par les commentaires de la
premiere phase.

Une autre consequence de cette interface simpliﬁee sans possibilite d’edition est que chaque
entree doit contenir une information sufﬁsamment atomique. Par exemple, il n’est pas possible
de presenter des valences (ou cadres de sous-categorisation, CSC) differentes avec une notation
factorisee en une seule entree.

2.2 Ajout d’entrées a posteriori

I1 n’est pas prevu pour l’instant d’ajouter des informations dans la ressource. En effet, la notion
de paquet (decrite en section 4.2), qui permet d’obtenir une serie de vues transversales sur la
ressource, interdit le regroupement des entrees par lemme. Par consequent, le validateur ne
peut se faire une idee sur l’ensemble des cadres d’un lemme et il ne peut donc pas juger de la
couverture du lexique pour un lemme donne. Ainsi, si l’ajout d’entrees existait, il ne pourrait
pas etre systematique et ne serait pas homogene.

Le probleme de completion par des entrees manquantes necessite selon nous d’autres methodes
comme l’integration d’autres ressources (Dicovalence, Leﬁj‘, ...) ou l’etude sur corpus (even-
tuellement guidee par un ou plusieurs analyseurs syntaxiques).

2.3 Lien facultatif vers des exemples

Dans la version actuelle de l’outil, l’ajout d’un exemple est facultatif lorsque l’on accepte un
cadre. Des experiences sont prevues pour comparer la vitesse de validation avec ou sans ajout
d’exemple.

Karen Fort, Bruno Guillaume

Quoi qu’il en soit, nous pensons qu’une validation, méme sans exemple, produira une ressource
avec une forte valeur ajoutée et qu’il est possible dans une deuxieme phase de combiner l’amé-
lioration de la couverture et l’ajout d’exemples.

Dans cette seconde phase, il sera sans doute plus efﬁcace de proposer des exemples et de deman-
der au validateur de choisir le CSC qui correspond (éventuellement guidé par un ou plusieurs
analyseur(s) syntaxique(s)), plutot que de lui demander de fournir lui-méme un exemple.

3 La plate-forme Sylva

3.1 Fonctionnalités

La plate-forme Sylva est batie autour d’une base de données, concue pour gérer a la fois les
informations linguistiques du lexique et les informations périphériques (source, historique de
validation, gestion des paquets (décrits en section 4.2)).

Nous donnons ci-dessous, par ordre d’importance décroissant, les principales fonctionnalités de
Sylvaz :

Validation multi-niveaux. Come on l’a vu, il est difﬁcile de demander a des experts lin-
guistes de valider un lexique dans son intégralité. Nous proposons donc d’utiliser comme
validateurs de premier niveau des linguistes non-experts (des étudiant(e)s en Master Sciences
du Langage, par exemple). Ainsi, dans la version actuelle de Sylva, chaque entrée est va-
lidée par deux validateurs différents. Lorsque les deux rendent le meme verdict (positif
ou négatif), le jugement est automatiquement appliqué a l’entrée. Lorsque les jugements
different ou lorsque les validateurs hésitent, Sylva demande a l’expert linguiste de tran-
cher3.

Tragabilité. Nous avons également décidé de conserver le plus d’information possible pour
chaque entrée. Outre la description linguistique, nous conservons dans la base de don-
nées les informations concemant la source de la ressource initiale (d’o1‘1 proviennent les
données utilisées pour peupler la base) ainsi que celles concernant les processus de vali-
dation (le nom des validateurs, leur jugement, le jugement de l’expert s’il y a lieu, . . .).

Vue transversale. Le nombre d’entrées a valider peut étre relativement important : le premier
lexique que nous allons valider avec Sylva contient par exemple pres de 30 000 entrées.
Une validation globale de la ressource serait problématique : par exemple, il serait dif-
ﬁcile pour l’expert de répartir les taches aux différents validateurs. Il est donc possible
de décomposer la ressource en ensembles plus petits, linguistiquement cohérents. Dans
Sylva, ces ensembles correspondent a la notion de paquet (voir section 4.2).

3.2 Acteurs

L’ interface utilisateur est accessible sur le Web. Trois types d’acteurs existent : l’invite’, le vali-
dateur et l’expert. Pour ces deux derniers, la connexion se fait par identiﬁant et mot de passe.

2la version en cours de développement est disponible ici : http : / / sylva . loria . f r/
3SylVa est prévu pour pennettre la Validation par plus de deux validateurs, il faut dans ce cas paramétrer les
régles de décisions pour l’accord (unanimité, majorité, .. .)

Sylva : plate-forme de validation multi-niveaux de lexiques

3.2.1 L’utilisateur invité

L’ invité peut :

— voir la ressource dans son état actuel. Plusieurs types de vues sont disponibles, par lemme
ou par initiale, par exemple. Il sera également possible a terme de ﬁltrer les entrées selon des
criteres plus ﬁns (verbes possédant tel type de valence, verbes dont le lemme correspond a
une expression rationnelle donnée, etc.).

— exporter le lexique dans un format texte ou )ﬂV[L respectant la norme Lexical Markup Fra-
mework (Francopoulo et al., 2006).

— poster des questions, des suggestions via une interface d’envoi de courriers électroniques.

3.2.2 Le validateur

Le role du validateur est de juger toutes les entrées des paquets qui lui sont assignés. Pour
chaque paquet, une page Web s’afﬁche. Les informations concernant une entrée sont présentées
de maniere condensée sur une seule ligne. Le validateur peut :

— accepter l’entrée et éventuellement en donner un exemple d’utilisation,

— rejeter l’entrée en donnant une explication pour ce rejet (l’interface de validation suggere

certaines explications aﬁn d’aider le validateur a formuler plus rapidement son jugement),

— exprimer un doute (Ne sait pas).

En outre, quelle que soit sa décision, le validateur peut toujours ajouter un commentaire.

3.2.3 L’expert

Les principaux roles de l’expert sont de :

— créer et gérer les comptes des validateurs, et ce aﬁn d’assurer la souplesse de validation,

— assigner les paquets aux validateurs,

— ﬁnaliser la validation d’un paquet une fois les validations de premier niveau terminées, c’est-

a-dire trancher les cas pour lesquels il n’y a pas d’accord inter-validateurs.

Il est important de noter que l’expert peut également valider directement les entrées, court-
circuitant ainsi les validateurs. Cette fonctionnalité a été prévue pour faire face a des cas ex-
ceptionnels, comme par exemple l’incapacité pour un validateur de terminer sa tache ou pour
accélérer la validation.

3.3 Qualité

Sylva a été concue et développée dans le respect des techniques de développement les plus re-
centes. En particulier, cette plate-forme a fait l’objet de spéciﬁcations UML (Uniﬁed Modeling
Language) détaillées, validées par les utilisateurs. Nous avons par ailleurs utilisé un framework
de développement PHP robuste, bien documenté et tres utilisé, symfony (Potencier & Zaninotto,
2007), qui offre :

séparation modele/objet et ModeleNue/Controleur (Gamma et al., 1995),
indépendance a l’implémentation de la base de données (Object Relational Mapping),
le support du multilinguisme (encodage UTF-8) et de l’intemationalisation,

une couche sécurité performante, permettant de protéger la base contre les intrusions,

Karen Fort, Bruno Guillaume

— des performances accrues grace a l’utilisation d’AJAX (Asynchronous J avaScript And XML).

Cela facilite une conception propre et l’écriture d’un code lisible, rendant de ce fait la mainte-
nance, les modiﬁcations et la localisation plus faciles.

Par ailleurs, une documentation utilisateur détaillée et adaptée au statut de l’utilisateur est dis-
ponible en ligne, aﬁn de permettre a la fois a l’expert linguiste et aux validateurs de bénéﬁcier
au mieux des fonctionnalités de Sylva. Une documentation développeur sera également fournie
pour permettre d’adapter l’outil a d’autres types de ressources.

4 Un exemple de mise en aeuvre de Sylva

Une instanciation de la plate-forme est une description précise des informations associées aux
entrées du lexique. A partir de cette description, nous devons adapter l’interface utilisateur
correspondante pour la validation. Il faut notamment adapter la partie de l’interface qui permet
au validateur de motiver son jugement en cas de refus.

4.1 La ressource utilisée

La validation a grande échelle d’une premiere ressource est en cours. Nous avons choisi de com-
mencer par le lexique syntaxique SynLex (Gardent et al., 2006). En effet, malgré des défauts
identiﬁés (Falk et al., 2007), SynLex est construit a partir d’une ressource de qualité (les tables
du lexique-grammaire francais (Gross, 1975)) qui est l’une des seules a concilier couverture
large et informations détaillées. Il est a noter que SynLex ne fait pas de distinction de sens pour
un méme lemme car il a été construit uniquement par extraction des informations syntaxiques
contenues dans les tables du lexique-grammaire.

La validation de SynLex va permettre d’en améliorer la précision ; l’amélioration de la couver-
ture se fera a l’aide d’autres méthodes (cf. section suivante).

Dans Synlex, une entrée se compose d’un verbe, d’une liste d’arguments syntaxiques ayant
un role sémantique (a0, a1, ...), d’une liste optionnelle d’associés (arguments régis par le verbe
mais ne remplissant pas de role sémantique, Ilimp pour « il impersonnel », par exemple) et d’une
liste de macros (informations supplémentaires sur les propriétés syntaxiques du verbe comme
l’auxiliaire ou la passivisation). Les associés et les macros sont des listes ﬁnies d’atomes.
Chaque argument est décrit par : fonction grammaticale (suj, objde, ...), marqueur optionnel
(de, pour, ...), catégorie syntaxique (scompl, sn, ...), restrictions morphologiques (pluriel obli-
gatoire, par exemple), restrictions sémantiques (humain, non humain, abstrait).

Construit a partir de 60% des tables, la version de SynLex utilisée pour peupler la base décrit
3 494 verbes différents et 26 714 entrées. La ﬁgure ci-dessous décrit quelques entrées associées
au lemme « abuser » (celles qui apparaissent dans l’interface de la ﬁgure 2), ainsi que quelques
entrées associées au lemme « épater » qui font apparaitre d’autres éléments (marqueur de, macro
étre).

Sylva : plate—forme de Validation multi—niVeaux de lexiques

abuser <aO:suj:sinf:::>

abuser <aO:suj:sn:::humain>

abuser <aO:suj:sn:::non_humain>

abuser <aO:suj:scompl:::>

abuser <aO:suj:sn:::non_humain,a1:obj:sn:::humain>
abuser <aO:suj:sinf:::,a1:obj:sn:::humain>

abuser <aO:suj:sn:::humain,a1:obj:sn:::humain>
abuser <aO:suj:scomp1:::,a1:obj:sn:::humain>

epater <a1:suj:sn::zhumain,aO:objde:de-scompl:::>; etre, participe—passe
epater <a1:suj:sn:::humain,aO:objde:de—sn:::abstrait>; etre, participe—passe

FIG. 1 — Exemples d’entrées de SynLex.

Id : 7
Nom : paquetiabuser
Destription :
Statut : valldatlonstarted

Id Table Verbe Arguments I Associésl Macros lcornmentairel {Example} tnaccourcisl Décision

    

i

6449 T4 abuser a0 suj 5n non_humaln + Cornmentaire + Exemple P35 d-E.x_ |' Vb inmnm, |'

'§

V ?

6450 T4 abuser a0 suj scumbl + -‘|'1tE||TE‘ LE P35 d'ex_ I_ vb inco.-mu I‘ W 7
6451 T4 abuser ao suj sn non_huma\n a1 ob] sn hL|lTIBH'I   ﬁaemlﬂ Pas d'ex. |_ Vb inronnu |_ V 7
5452 T4 abuser a0 suj sinfal obj sn humain +( ‘|'1tEl|TE‘ ‘ifilﬂi P35 d'ex_ I_ Vb incgnnu I‘ V’ 7
6453 T4 abuser ao suj sn humain ail. obj sn humain   ﬁeemﬁ Pas d'ex. |_ Vb inronnu |_ V 7
V’ 7

6454 T4 abuser an suj 5CL]lTIpl a1 obj 5n humain + Commentalre + Exemgle P35 d-em |‘ Vb incannu |‘

retour a la bane El'ECCLlE|| fin de ma session esuace de travail de karen .Va|\dateur

FIG. 2 — Interface du Validateur pour SynLex (Version beta).

4.2 Les paquets

Aﬁn de rendre la phase de Validation la plus efﬁcace possible, la ressource est décomposée
en ensembles, linguistiquement cohérents et de taille raisonnable (entre 50 et 210 entrees), les
paquets. Etant donnée la taille de SynLex, ceux—ci ont été construits de maniere automatique,
avant le peuplement de la base, notre but étant de réunir les entrees ayant un comportement
semblable, aﬁn d’en simpliﬁer la Validation.

Une premiere étape de tri consiste a regrouper les entrees possédant le meme CSC. Les groupes
sufﬁsamment gros forment directement des paquets : 109 paquets sont produits ainsi. Les en-
trees restantes sont regroupées par table d’oIigine : 110 paquets. Enﬁn, le reste est arbitrairement
réparti dans les 9 demiers paquets. Au ﬁnal, 228 paquets peuplent la base.

4.3 Des interfaces adaptées

La Validation de SynLex a donné lieu au développement d’interfaces spéciﬁques, qui, grace a la
separation Modele/Vue/Contréleur sont facilement adaptables a d’autres lexiques. Des captures
d’écrans des interfaces de Validation des Validateurs et de l’expert pour la ressource actuelle
sont présentées respectivement en ﬁgures 2 et 3. L’interface de gestion de l’expert est quant a
elle présentée en ﬁgure 4.

 

Karen Fort, Bruno Guillaume

|d : 7
Mom : paquet_abuser
Description :
Starul : luFinaIize
Id Tahln Vnrbn Arguments.‘ ‘ its I Macros ; , Ir ’ -F (E _ ' \ 1 Liz} Déclslon
CEF.
;"1
6450 T4 abuser III suj scornpl uc V anti: +_Eum2Le pas d'ex, I‘ vb inconnu I‘ V
laO}{a0:scomp\} x
6451 T4 abuser all suj sn non_hurnain I1 obj sn humain NC ?   1'|  pas d-e,¢_ I_ Vb inmnnu I_ V
NC ?

retour é Ia Dane d‘accuei| ﬁn de ma session esaace de travad de expert. superv '

FIG. 3 — Interface de 1’expert pour SynLex (Version béta).

supervalidateu r: expert

Statistiques générales :

Faq nets créés 7
Paquets assignés 1
Paquets en cours de validation 4
Paquats validés 1
Validateurs 2

Statistiques personnelles :

Paquets tranchés D
Paquets en CDLIFS D

Paquets é trancher 1

Paquets Ea trancherjen cours :

1 paquet_abu5er taFina|ize (62.5%d‘a.ccordJ

Activités de gestion :

Validateurs :
Créer vaﬁdateur
Voir[M ocliﬁer validateu rs

Paquets :
Créer gaguet
Voirfh-ﬂodiﬁer gaguets
Assigner gaguets ‘a vaﬁdareurs

retuur '3 Va Dane d‘ac:uei| ﬁn de ma sessxon esga(e de travaﬂ de exnert . supervaﬁdateur

FIG. 4 — Interface générale de 1’expert pour SynLex (Version béta).

Sylva : plate-forme de validation multi-niveaux de lexiques

5 Développements futurs

5.1 Integration d’autres ressources

SynLex a ete contruit a partir d’une ressource de grande qualite, produite manuellement, mais il
reste limite a une partie des verbes (seules 60% des tables de lexique-grammaire des verbes sont
disponibles librement). Il est par consequent necessaire de le fusionner avec d’autres ressources
pour obtenir un lexique syntaxique du francais generique.

Le Leﬁj‘ (lexique des formes ﬂechies du francais) est un lexique du francais a large couverture
qui foumit des informations morphologiques et syntaxiques, non seulement pour les verbes,
mais aussi pour toutes les autres categories morphosyntaxiques. Le Leﬁj‘ surgenere souvent :
par defaut, a tout nom sont affectes tous les CSC possibles pour les noms. Cette ressource
est donc une bonne candidate pour une validation par ﬁltrage des entrees. Le format du Leﬁj‘
etant tres proche de celui de SynLex, il peut etre entre facilement dans la plate-forme actuelle.
Cependant, les informations de sous-categorisation sont tres factorisees dans le Leﬁj‘, il faudra
en tenir compte lors de son integration soit en depliant les cadres factorises, soit en permettant
au validateur de decrire plus ﬁnement les motivations de son choix.

Bien que necessitant un travail linguistique consequent, la traduction des informations de DICO-
VALENCE (van den Eynde & Mertens, 2003), lexique de grande qualite des valences verbales
du francais, permettrait d’ameliorer signiﬁcativement la qualite du lexique envisage.

5.2 Integration d’autres fonctionnalités

Comme nous l’avons deja evoque, la premiere fonctionnalite que nous souhaitons ajouter a
Sylva est une interface Web permettant de relier des usages de verbes a des exemples. En-
core une fois, il s’agit la d’une tache longue et penible. Nous envisageons d’utiliser pour cela
des exemples extraits de corpus arbores, de corpus de textes ou de dictionnaires. Pour chaque
exemple, l’utilisateur devra selectionner l’une des entrees du lexique. Grace aux informations
foumies par le corpus arbore ou par le resultat d’une analyse syntaxique, on po11rra reduire le
nombre de possibilites proposees au validateur et ainsi lui faciliter la tache.

Une autre fonctionnalite importante serait la possibilite de modiﬁer les entrees. En utilisant les
commentaires accompagnant les refus de la premiere phase, on po11rra proposer au validateur
des hypotheses de corrections de l’entree parmi lesquelles il po11rra choisir.

On peut imaginer que des entrees manquantes pourraient etre detectees, y compris apres l’inte-
gration d’autres ressources, par exemple dans la phase de liage des exemples a partir de corpus.
Il faudrait donc prevoir une interface pour aj outer de nouvelles entrees, au moins pour l’utilisa-
teur expert.

Le developpement de ces fonctionnalites necessite un travail non negligeable, mais nous pen-
sons que notre plate-forme est sufﬁsamment generique et adaptable pour en faciliter et en acce-
lerer l’implementation.

Karen Fort, Bruno Guillaume

Remerciements

Ce travail a été réalisé grace a des fonds provenant du CPER MISN de la Région Lorraine.
Les auteurs souhaitent remercier les autres membres du projet pour leur participation active aux
spéciﬁcations : Claire Gardent, Guy Perrier et Ingrid Falk. Nous remercions également Mathieu
Morey et Francois-Régis Chaumartin pour leur aide lors de la phase de développement.

Références

DUBOIS J. & DUBOIS-CHARLIER F. (1997). Les Verbes Francais. Paris, France : Larousse-
Bordas.

FALK 1., FRANCOPOULO G. & GARDENT C. (2007). I-/Evaluer SynLex. In Actes de TALN 07,
p. 335-344, Toulouse.

FRANCOPOULO G., GEORGE M., CALZOLARI N., MONACHINI M., BEL N., PET M. &
SORIA C. (2006). Lexical Markup Framework (LMF). In Actes de LREC 06, Gene, Italie.

GAMMA E., HELM R., JOHNSON R. & VLISSIDES J. (1995). Design Patterns .' Elements
of Reusable Object-Oriented Software. Boston, MA, USA : Addison-Wesley Longman Publi-
shing Co., Inc.

GARDENT C., GUILLAUME B., PERRIER G. & FALK I. (2006). Extraction d’information de
sous-catégorisation a partir des tables du LADL. In Actes de TALN 06, p. 139-148, Louvain.

GROSS M. (1975). Méthodes en syntaxe. Hermann.

KUPSC A. (2007). Extraction automatique de cadres de sous-catégorisation verbale pour le
francais a partir d’un corpus arboré. In Actes de TALN 07, Toulouse, France.

PIERREL J ., DENDIEN J . & BERNARD P. (2004). Le TLFi ou Trésor de la Langue Francaise
informatisé. In Actes de E URALEX 04, Lorient, France.

POTENCIER F. & ZANINOTTO F. (2007). The Deﬁnitive Guide to symfony. Berkeley, CA,
USA : Apress.

PREISS J ., BRISCOE T. & KORHONEN A. (2007). A system for large-scale acquisition of
verbal, nominal and adjectival subcategorization frames from corpora. In Actes de ACL 07,
Prague, République tcheque.

ROMARY L., SALMON-ALT S. & FRANCOPOULO G. (2004). Standards going concrete :
from LMF to Morphalou. In M. ZOCK, Ed., COLING 2004 Enhancing and using electronic
dictionaries, p. 22-28, Geneve, Suisse.

SAGOT B., CLEMENT L., VILLEMONTE DE LA CLERGERIE E. & BOULLIER P. (2006). The
Lefff 2 syntactic lexicon for French : architecture, acquisition, use. In Actes de LREC 06,
Gene, Italie.

VAN DEN EYNDE K. & MERTENS P. (2003). La valence : l’approche pronominale et son
application au lexique verbal. Journal of French Language Studies, 13, 63-104.

