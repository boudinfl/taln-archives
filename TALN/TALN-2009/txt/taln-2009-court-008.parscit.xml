<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>R Allan</author>
<author>M Hanady</author>
</authors>
<title>Towards including prosody in a text-to-speech system for modern standard Arabic.&amp;quot;</title>
<date>2008</date>
<journal>Comput. Speech Lang.</journal>
<volume>22</volume>
<issue>1</issue>
<pages>84--103</pages>
<contexts>
<context position="12930" citStr="Allan and Hanady 2008" startWordPosition="1962" endWordPosition="1965">ssary to disambiguate syntactic structures. Thus, the pipeline model (where morphology is performed first and syntactic processing follows) will not suffice. In this model, a morphological analyzer provides all possible solutions to the syntactic parsing which leads to high magnitude of computational complexity of parsing. To demonstrate this, a word form in the Penn Arabic Treebank (ATB) has, on average, two morphological solutions (Nizar and Owen 2005). The complexity of any parsing algorithm will have a term order of: ∏Ni=1ai where ai is the number of alternative solutions of the ith word (Allan and Hanady 2008). Therefore, the average complexity of parsing a 20 words Arabic sentence using the pipeline model can reach up to 1048576 (2^20). Thus, linguistic information tend to be more effective at selecting between alternative solutions at the lower levels of the analysis and less effective at doing so at the higher levels (Macdonald, Pearlmutter et al. 1994). Different systems that process Arabic with some degree of disambiguation are described in the literature (Othman, Shaalan et al. 2004; Allan and Hanady 2008; Attia 2008). All of them are rule-based systems adapting the pipeline model. Attia (Att</context>
</contexts>
<marker>Allan, Hanady, 2008</marker>
<rawString>Allan, R. and M. Hanady (2008). &amp;quot;Towards including prosody in a text-to-speech system for modern standard Arabic.&amp;quot; Comput. Speech Lang. 22(1): 84-103.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M A Attia</author>
</authors>
<title>Handling Arabic Morphological and Syntactic Ambiguity within the LFG Framework with a View to Machine Translation School of Languages, Linguistics and Cultures,</title>
<date>2008</date>
<institution>University of Manchester. Doctor of Philosophy.</institution>
<contexts>
<context position="13454" citStr="Attia 2008" startWordPosition="2046" endWordPosition="2047">where ai is the number of alternative solutions of the ith word (Allan and Hanady 2008). Therefore, the average complexity of parsing a 20 words Arabic sentence using the pipeline model can reach up to 1048576 (2^20). Thus, linguistic information tend to be more effective at selecting between alternative solutions at the lower levels of the analysis and less effective at doing so at the higher levels (Macdonald, Pearlmutter et al. 1994). Different systems that process Arabic with some degree of disambiguation are described in the literature (Othman, Shaalan et al. 2004; Allan and Hanady 2008; Attia 2008). All of them are rule-based systems adapting the pipeline model. Attia (Attia 2008) tried to reduce ambiguity by putting restriction on the lexical items during the morphological analysis phase. He Daoud Daoud, Mohammad Daoud reported that his system took 141 minutes (CPU time) to parse a test suite of 229 sentences. The system described in (Allan and Hanady 2008) took a more restricted approach by selecting one solution during the morphological phase without having any syntactic information. Unfortunately, we could not use any of the above systems directly for comparisons. On the other hand,</context>
</contexts>
<marker>Attia, 2008</marker>
<rawString>Attia, M. A. (2008). Handling Arabic Morphological and Syntactic Ambiguity within the LFG Framework with a View to Machine Translation School of Languages, Linguistics and Cultures, University of Manchester. Doctor of Philosophy.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Boguslavskij</author>
</authors>
<title>UNL from the linguistic point of view.</title>
<date>2001</date>
<booktitle>MMA&apos;01, SigMatics &amp; NII,</booktitle>
<location>Tokyo.</location>
<contexts>
<context position="16887" citStr="Boguslavskij 2001" startWordPosition="2572" endWordPosition="2573">section, we will describe our synchronized model, which is able to perform morphological and syntactic processing of Arabic in as single, integrated and synchronized framework, thus allowing shared information to support disambiguation in multiple levels. 4 The Computational Model Our system is coded using EnCo (Uchida 1999) which we used previously in developing the first Arabic-UNL enconverter. EnCo is a rule-based programming language specialized for the writing of enconverters (translators from a NL into UNL), and provided by the UNL center. 4.1 The UNL Universal networking language (UNL)(Boguslavskij 2001; Uchida and Zhu 2001; Uchida and Zhu 2003; Boitet 2005) is a semantic, language independent representation of a sentence that mediates between the enconversion (analysis) and deconversion (generation). The pivot Arabic Disambiguation Using Dependency Grammar paradigm is used: the representation of an utterance in the UNL interlingua is a hypergraph where normal nodes bear UWs (&amp;quot;Universal Words&amp;quot;, or interlingual acceptions) with semantic attributes, and arcs bear semantic relations [13]. The sentence &amp;quot;Khaled bought a new car&amp;quot; can be expressed in UNL as: agt(buy(icl&gt;do(obj&gt;thing),icl&gt;purchase).</context>
</contexts>
<marker>Boguslavskij, 2001</marker>
<rawString>Boguslavskij, I. (2001). UNL from the linguistic point of view. MMA&apos;01, SigMatics &amp; NII, Tokyo.</rawString>
</citation>
<citation valid="true">
<authors>
<author>C Boitet</author>
</authors>
<title>Gradable quality translations through mutualization of human translation and revision, and UNL-based MT and coedition. Universal Networking Language, advances in theory and applications.</title>
<date>2005</date>
<volume>12</volume>
<pages>393--410</pages>
<contexts>
<context position="16943" citStr="Boitet 2005" startWordPosition="2582" endWordPosition="2583">le to perform morphological and syntactic processing of Arabic in as single, integrated and synchronized framework, thus allowing shared information to support disambiguation in multiple levels. 4 The Computational Model Our system is coded using EnCo (Uchida 1999) which we used previously in developing the first Arabic-UNL enconverter. EnCo is a rule-based programming language specialized for the writing of enconverters (translators from a NL into UNL), and provided by the UNL center. 4.1 The UNL Universal networking language (UNL)(Boguslavskij 2001; Uchida and Zhu 2001; Uchida and Zhu 2003; Boitet 2005) is a semantic, language independent representation of a sentence that mediates between the enconversion (analysis) and deconversion (generation). The pivot Arabic Disambiguation Using Dependency Grammar paradigm is used: the representation of an utterance in the UNL interlingua is a hypergraph where normal nodes bear UWs (&amp;quot;Universal Words&amp;quot;, or interlingual acceptions) with semantic attributes, and arcs bear semantic relations [13]. The sentence &amp;quot;Khaled bought a new car&amp;quot; can be expressed in UNL as: agt(buy(icl&gt;do(obj&gt;thing),icl&gt;purchase).@past.@entry, Khaled) obj(buy(icl&gt;do(obj&gt;thing),icl&gt;purc</context>
</contexts>
<marker>Boitet, 2005</marker>
<rawString>Boitet, C. (2005). Gradable quality translations through mutualization of human translation and revision, and UNL-based MT and coedition. Universal Networking Language, advances in theory and applications. J. Cardeٌosa, A. Gelbukh and E. Tovar. Mexico. 12: 393—410.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Daoud Daoud</author>
<author>Mohammad Daoud Buckwalter</author>
<author>T</author>
</authors>
<title>Buckwalter Arabic Morphological Analyzer Version 1.0.&amp;quot; Linguistic Data Consortium (LDC).</title>
<date>2002</date>
<marker>Daoud, Buckwalter, T, 2002</marker>
<rawString>Daoud Daoud, Mohammad Daoud Buckwalter, T. (2002). &amp;quot;Buckwalter Arabic Morphological Analyzer Version 1.0.&amp;quot; Linguistic Data Consortium (LDC).</rawString>
</citation>
<citation valid="true">
<authors>
<author>M A Covington</author>
</authors>
<title>A dependency parser for variable–word–order languages. Computer assisted modeling on the IBM 3090: Papers from the</title>
<date>1992</date>
<journal>IBM Supercomputing</journal>
<volume>2</volume>
<pages>799--845</pages>
<publisher>Press.</publisher>
<location>Athens, Greece, Baldwin</location>
<contexts>
<context position="2828" citStr="Covington 1992" startWordPosition="411" endWordPosition="412"> which is conceptualized by using dependency grammar, in which linguistic structure is described in terms of dependency relations among the words of a sentence; it does so without resorting to units of analysis smaller or larger than the word. Although dependency grammar has its roots Daoud Daoud, Mohammad Daoud to the work of early Arabic Grammarians, all of the existing (rule-based) Arabic processing systems are built on phrase structure theory. Processing text using phrase structure framework may suit languages like English, but not a nearly free order language like Arabic (Mel’tchuk 1988; Covington 1992). We suggest performing morphological and syntactic processing of Arabic text in a single and joint framework; thereby facilitating the disambiguation process. We will first discuss the sources of ambiguity in Arabic. Then, we discuss methods of disambiguation based on the dependency grammar and the necessity of having an integrated model. Finally, we present the architecture and implementation of our system. 2 Properties of Arabic Language Compared to French or English, Arabic is an agglutinative and highly inflected language shows its proper types of difficulties in morphological disambiguat</context>
</contexts>
<marker>Covington, 1992</marker>
<rawString>Covington, M. A. (1992). A dependency parser for variable–word–order languages. Computer assisted modeling on the IBM 3090: Papers from the 1989 IBM Supercomputing Competition. K. R. Billingsley, H. U. Brown III and E. Derohanes. Athens, Greece, Baldwin Press. 2: 799– 845.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M Diab</author>
<author>K Hacioglu</author>
</authors>
<title>Automatic Tagging of Arabic Text: From raw text to Base Phrase Chunks.</title>
<date>2004</date>
<publisher>HLT-NAACL.</publisher>
<marker>Diab, Hacioglu, 2004</marker>
<rawString>Diab, M., K. Hacioglu, et al. (2004). Automatic Tagging of Arabic Text: From raw text to Base Phrase Chunks. HLT-NAACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>S C Dik</author>
</authors>
<title>The Theory of Functional Grammar,</title>
<date>1989</date>
<location>Foris.</location>
<contexts>
<context position="11328" citStr="Dik 1989" startWordPosition="1720" endWordPosition="1721">econd part of the IDAFA construction. Arabic Disambiguation Using Dependency Grammar manner en t object gr ee m mod ad jec tiv e a ثراو ك subje ct inheritor lik e ?  &amp;quot;#أ  ! ل ا D tookl aoudegit imate mone y ثرا آ catastrophes Figure 3: An example of syntactic dependencies disambiguation In the sentence shown in figure 3, disambiguation is driven by syntactic dependencies. The verb (took) is the head of two dependents which are the subject and the object of (took). This is considered a NUCLEAR PROCESS that contains two participants in association with a ‘process’ element. Following (Dik 1989), any additional constituent is either: • Indirect participant in a process. • Additional information about a condition or circumstances pertaining to a process. In Modern Standard Arabic, both indirect participants and circumstances are realized by two basic types of grammatical structure: • Accusative nominals. • Prepositional phrases of various kinds. This is left us with one solution to “ثرا آ”; it is a prepositional phrase, meaning “like/such as + inheritor”. Thus, it should be segmented correctly by recognizing the first character as a preposition (ka) and the rest of the morpheme as the</context>
</contexts>
<marker>Dik, 1989</marker>
<rawString>Dik, S. C. (1989). The Theory of Functional Grammar, Foris.</rawString>
</citation>
<citation valid="true">
<authors>
<author>A Goweder</author>
<author>A De</author>
</authors>
<title>Roeck</title>
<date>2001</date>
<booktitle>Arabic NLP Workshop at ACL/EACL</booktitle>
<location>Toulouse, France.</location>
<marker>Goweder, De, 2001</marker>
<rawString>Goweder, A. and A. De Roeck (2001). Assessment of a significant Arabic corpus. Arabic NLP Workshop at ACL/EACL 2001, Toulouse, France.</rawString>
</citation>
<citation valid="true">
<authors>
<author>G-j M Kruijff</author>
</authors>
<title>Formal and computational aspects of dependency grammar: History and development of DG,</title>
<date>2002</date>
<journal>SSLLI Course Notes, FoLLI, the Association of Logic, Language and Information.</journal>
<contexts>
<context position="1214" citStr="Kruijff 2002" startWordPosition="164" endWordPosition="165"> semantic net like structure expressed by means of Universal Networking Language (UNL) - a recently proposed interlingua. Extremely varied and complex phenomena of Arabic language have been addressed. Keywords: Dependency Grammar, Arabic Language, Disambiguation, EnCo, UNL 1 Introduction The Arabic grammarians (1200 years ago, Iraq) recognized government and syntactic dependency structure. Many researchers believe that the theoretical framework of ancient Arabic grammar and more specifically its theory of case assignment (nazariyyat al’amal), can be considered a dependency grammar(Owens 1988; Kruijff 2002). Dependency grammar (DG) is a class of syntactic theories developed by Lucien Tesnière. It is distinct from phrase structure grammars, as it lacks phrasal nodes. Structure is determined by the relation between a word (a head) and its dependents. Dependency grammars are not defined by a specific word order, and are thus well suited to languages with free word order, such as Arabic. Specifically, Arabic reveals strong interaction between morphological and syntactic processing, which challenges the validity of NLP models that are based on different phases (layers). The available Arabic rule-base</context>
</contexts>
<marker>Kruijff, 2002</marker>
<rawString>Kruijff, G.-j. M. (2002). Formal and computational aspects of dependency grammar: History and development of DG, SSLLI Course Notes, FoLLI, the Association of Logic, Language and Information.</rawString>
</citation>
<citation valid="true">
<authors>
<author>L S Larkey</author>
<author>L Ballesteros</author>
</authors>
<title>Light Stemming for Arabic Information Retrieval Arabic Computational Morphology.</title>
<date>2007</date>
<publisher>Springer</publisher>
<marker>Larkey, Ballesteros, 2007</marker>
<rawString>Larkey, L. S., L. Ballesteros, et al. (2007). Light Stemming for Arabic Information Retrieval Arabic Computational Morphology. A. Soudi, A. v. d. Bosch and G. Neumann, Springer Netherlands.</rawString>
</citation>
<citation valid="true">
<authors>
<author>M C Macdonald</author>
<author>N J Pearlmutter</author>
</authors>
<title>The lexical nature of syntactic ambiguity resolution.&amp;quot;</title>
<date>1994</date>
<journal>Psychological view</journal>
<volume>101</volume>
<issue>4</issue>
<pages>467--703</pages>
<marker>Macdonald, Pearlmutter, 1994</marker>
<rawString>Macdonald, M. C., N. J. Pearlmutter, et al. (1994). &amp;quot;The lexical nature of syntactic ambiguity resolution.&amp;quot; Psychological view 101(4): 467-703.</rawString>
</citation>
<citation valid="true">
<authors>
<author>I Mel’tchuk</author>
</authors>
<title>Dependency Syntax: Theory and Practice,</title>
<date>1988</date>
<publisher>Press.</publisher>
<institution>State University of New York</institution>
<marker>Mel’tchuk, 1988</marker>
<rawString>Mel’tchuk, I. (1988). Dependency Syntax: Theory and Practice, State University of New York Press.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Nizar</author>
<author>R Owen</author>
</authors>
<title>Arabic tokenization, part-of-speech tagging and morphological disambiguation in one fell swoop.</title>
<date>2005</date>
<booktitle>Proceedings of the 43rd Annual Meeting on Association for Computational</booktitle>
<institution>Linguistics. Ann Arbor, Michigan, Association for Computational Linguistics.</institution>
<contexts>
<context position="12766" citStr="Nizar and Owen 2005" startWordPosition="1933" endWordPosition="1936">ntactic dependencies provide cues to perform segmentation and morphological analysis. On the other hand, morphological analysis and adjacency constraints are necessary to disambiguate syntactic structures. Thus, the pipeline model (where morphology is performed first and syntactic processing follows) will not suffice. In this model, a morphological analyzer provides all possible solutions to the syntactic parsing which leads to high magnitude of computational complexity of parsing. To demonstrate this, a word form in the Penn Arabic Treebank (ATB) has, on average, two morphological solutions (Nizar and Owen 2005). The complexity of any parsing algorithm will have a term order of: ∏Ni=1ai where ai is the number of alternative solutions of the ith word (Allan and Hanady 2008). Therefore, the average complexity of parsing a 20 words Arabic sentence using the pipeline model can reach up to 1048576 (2^20). Thus, linguistic information tend to be more effective at selecting between alternative solutions at the lower levels of the analysis and less effective at doing so at the higher levels (Macdonald, Pearlmutter et al. 1994). Different systems that process Arabic with some degree of disambiguation are desc</context>
<context position="15241" citStr="Nizar and Owen 2005" startWordPosition="2327" endWordPosition="2330">b, Hacioglu, and Jurafsky (Diab, Hacioglu et al. 2004) reported a remarkable performance for Arabic morphological Analysis using Support Vector Machines (SVMs). They claim above 99% accuracy on tokenization and 95.49 accuracy on POS tagging. Their tools are trained on a sample of 4519 sentence of ATB. For the same size of English dataset, they reported a 94.97 accuracy on POS tagging, a result that contradict the fact that the token to type ratio is smaller for Arabic texts than for comparably sized English texts (Goweder and De Roeck 2001; Larkey, Ballesteros et al. 2007). Habash and Rambow (Nizar and Owen 2005) also reported high accuracy rates in their system for tokenizing and morphologically tagging Arabic words. They used similar approach reported in (Diab, Hacioglu et al. 2004), but by incorporating the Buckwalter morphological analyzer (Buckwalter 2002) into their system. However, Larkly, Ballesteros and Conner (Larkey, Ballesteros et al. 2007) reported that their simple light stemmer outperformed Diab’s morphological analyzer. One of their explanations to this result is: “Arabic text contains so many definite articles that one could obtain the claimed &gt;99% tokenization accuracy simply by remo</context>
</contexts>
<marker>Nizar, Owen, 2005</marker>
<rawString>Nizar, H. and R. Owen (2005). Arabic tokenization, part-of-speech tagging and morphological disambiguation in one fell swoop. Proceedings of the 43rd Annual Meeting on Association for Computational Linguistics. Ann Arbor, Michigan, Association for Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>E Othman</author>
<author>K Shaalan</author>
</authors>
<title>Towards Resolving Ambiguity in Understanding Arabic Sentence.</title>
<date>2004</date>
<booktitle>the International Conference on Arabic Language Resources</booktitle>
<marker>Othman, Shaalan, 2004</marker>
<rawString>Othman, E., K. Shaalan, et al. (2004). Towards Resolving Ambiguity in Understanding Arabic Sentence. the International Conference on Arabic Language Resources and Tools, NEMLAR, Egypt.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Owens</author>
</authors>
<title>The foundations of grammar : an introduction to medieval Arabic grammatical theory.</title>
<date>1988</date>
<journal>Amsterdam J. Benjamins Pub. Co.</journal>
<contexts>
<context position="1199" citStr="Owens 1988" startWordPosition="162" endWordPosition="163">s produces a semantic net like structure expressed by means of Universal Networking Language (UNL) - a recently proposed interlingua. Extremely varied and complex phenomena of Arabic language have been addressed. Keywords: Dependency Grammar, Arabic Language, Disambiguation, EnCo, UNL 1 Introduction The Arabic grammarians (1200 years ago, Iraq) recognized government and syntactic dependency structure. Many researchers believe that the theoretical framework of ancient Arabic grammar and more specifically its theory of case assignment (nazariyyat al’amal), can be considered a dependency grammar(Owens 1988; Kruijff 2002). Dependency grammar (DG) is a class of syntactic theories developed by Lucien Tesnière. It is distinct from phrase structure grammars, as it lacks phrasal nodes. Structure is determined by the relation between a word (a head) and its dependents. Dependency grammars are not defined by a specific word order, and are thus well suited to languages with free word order, such as Arabic. Specifically, Arabic reveals strong interaction between morphological and syntactic processing, which challenges the validity of NLP models that are based on different phases (layers). The available A</context>
</contexts>
<marker>Owens, 1988</marker>
<rawString>Owens, J. (1988). The foundations of grammar : an introduction to medieval Arabic grammatical theory. Amsterdam J. Benjamins Pub. Co.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Uchida</author>
</authors>
<title>Enconverter Specifications.&amp;quot; from http://www.undl.org.</title>
<date>1999</date>
<contexts>
<context position="16596" citStr="Uchida 1999" startWordPosition="2530" endWordPosition="2531">, which is conceptualized by using dependency grammar. Although dependency grammar has its roots to the work of early Arabic Grammarians (Kitab al-Usul of Ibn alSarraj,d. 928), all of the existing (rule-based) Arabic processing systems are built on phrase structure theory. In the next section, we will describe our synchronized model, which is able to perform morphological and syntactic processing of Arabic in as single, integrated and synchronized framework, thus allowing shared information to support disambiguation in multiple levels. 4 The Computational Model Our system is coded using EnCo (Uchida 1999) which we used previously in developing the first Arabic-UNL enconverter. EnCo is a rule-based programming language specialized for the writing of enconverters (translators from a NL into UNL), and provided by the UNL center. 4.1 The UNL Universal networking language (UNL)(Boguslavskij 2001; Uchida and Zhu 2001; Uchida and Zhu 2003; Boitet 2005) is a semantic, language independent representation of a sentence that mediates between the enconversion (analysis) and deconversion (generation). The pivot Arabic Disambiguation Using Dependency Grammar paradigm is used: the representation of an uttera</context>
</contexts>
<marker>Uchida, 1999</marker>
<rawString>Uchida, H. (1999, 1999). &amp;quot;Enconverter Specifications.&amp;quot; from http://www.undl.org.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Uchida</author>
<author>M Zhu</author>
</authors>
<title>The Universal Networking Language Beyond Machine Translation.&amp;quot; from http://www.undl.org.</title>
<date>2001</date>
<contexts>
<context position="16908" citStr="Uchida and Zhu 2001" startWordPosition="2574" endWordPosition="2577">scribe our synchronized model, which is able to perform morphological and syntactic processing of Arabic in as single, integrated and synchronized framework, thus allowing shared information to support disambiguation in multiple levels. 4 The Computational Model Our system is coded using EnCo (Uchida 1999) which we used previously in developing the first Arabic-UNL enconverter. EnCo is a rule-based programming language specialized for the writing of enconverters (translators from a NL into UNL), and provided by the UNL center. 4.1 The UNL Universal networking language (UNL)(Boguslavskij 2001; Uchida and Zhu 2001; Uchida and Zhu 2003; Boitet 2005) is a semantic, language independent representation of a sentence that mediates between the enconversion (analysis) and deconversion (generation). The pivot Arabic Disambiguation Using Dependency Grammar paradigm is used: the representation of an utterance in the UNL interlingua is a hypergraph where normal nodes bear UWs (&amp;quot;Universal Words&amp;quot;, or interlingual acceptions) with semantic attributes, and arcs bear semantic relations [13]. The sentence &amp;quot;Khaled bought a new car&amp;quot; can be expressed in UNL as: agt(buy(icl&gt;do(obj&gt;thing),icl&gt;purchase).@past.@entry, Khaled)</context>
</contexts>
<marker>Uchida, Zhu, 2001</marker>
<rawString>Uchida, H. and M. Zhu. (2001). &amp;quot;The Universal Networking Language Beyond Machine Translation.&amp;quot; from http://www.undl.org.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Uchida</author>
<author>M Zhu</author>
</authors>
<title>The Universal Networking Language specification, version 3.0.&amp;quot; from http://www.undl.org.</title>
<date>2003</date>
<contexts>
<context position="16929" citStr="Uchida and Zhu 2003" startWordPosition="2578" endWordPosition="2581">ed model, which is able to perform morphological and syntactic processing of Arabic in as single, integrated and synchronized framework, thus allowing shared information to support disambiguation in multiple levels. 4 The Computational Model Our system is coded using EnCo (Uchida 1999) which we used previously in developing the first Arabic-UNL enconverter. EnCo is a rule-based programming language specialized for the writing of enconverters (translators from a NL into UNL), and provided by the UNL center. 4.1 The UNL Universal networking language (UNL)(Boguslavskij 2001; Uchida and Zhu 2001; Uchida and Zhu 2003; Boitet 2005) is a semantic, language independent representation of a sentence that mediates between the enconversion (analysis) and deconversion (generation). The pivot Arabic Disambiguation Using Dependency Grammar paradigm is used: the representation of an utterance in the UNL interlingua is a hypergraph where normal nodes bear UWs (&amp;quot;Universal Words&amp;quot;, or interlingual acceptions) with semantic attributes, and arcs bear semantic relations [13]. The sentence &amp;quot;Khaled bought a new car&amp;quot; can be expressed in UNL as: agt(buy(icl&gt;do(obj&gt;thing),icl&gt;purchase).@past.@entry, Khaled) obj(buy(icl&gt;do(obj&gt;t</context>
</contexts>
<marker>Uchida, Zhu, 2003</marker>
<rawString>Uchida, H. and M. Zhu. (2003, 2003). &amp;quot;The Universal Networking Language specification, version 3.0.&amp;quot; from http://www.undl.org.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>