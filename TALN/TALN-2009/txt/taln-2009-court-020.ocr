TALN 2009 — Session posters , Senlis, 24-26 juin 2009

Intégrer les tables du Lexique-Grammaire
in un analyseur syntaxique robuste a grande échelle

Benoit Sagotl Elsa Tolonez
(1) Alpage, INRIA / Paris 7, 30 rue du Ch. des rentiers, 75013 Paris, France
(2) IGM, Université Paris-Est, 77454 Marne-la-Vallée Cedex, France
benoit.sagot@inria.fr, elsa.tolone@univ-paris-est.fr

Résumé. Dans cet article, nous montrons comment nous avons converti les tables du
Lexique-Grammaire en un format TAL, celui du lexique Leﬁj‘, permettant ainsi son intégration
dans l’analyseur syntaxique FRMG. Nous présentons les fondements linguistiques de ce proces-
sus de conversion et le lexique obtenu. Nous validons le lexique obtenu en évaluant l’analyseur
syntaxique FRMG sur le corpus de référence de la campagne EASy selon qu’il utilise les entrées
verbales du Leﬁj‘ ou celles des tables des verbes du Lexique-Grammaire ainsi converties.

Abstract. In this paper, we describe how we converted the lexicon-grammar tables into
an NLP format, that of the Leﬁj‘ lexicon, which allowed us to integrate it into the FRMG parser.
We decribe the linguistic basis of this conversion process, and the resulting lexicon. We validate
the resulting lexicon by evaluating the FRMG parser on the EASy reference corpus depending
on the set of verbal entries it relies on, namely those of the Leﬁj‘ or those of the converted
lexicon-grammar verb tables.

M0tS-CléS I Lexiques syntaxiques, Lexique-Grammaire, analyse syntaxique.

Keywords: Syntactic lexica, Lexicon-Grammar, parsing.

1 Introduction

Les tables du Lexique-Grammaire constituent aujourd’hui une des principales sources d’infor-
mations lexicales syntaxiques pour le francais. Leur développement a été initié des les années
1970 par Maurice Gross, au sein du LADL puis de l’IGM (Université Paris-Est) (Gross, 1975;
Boons et al., 1976; Guillet & Leclere, 1992). Ces informations se présentent sous la forme de
tables. Chaque table regroupe les éléments d’une catégorie donnée partageant certaines pro-
priétés déﬁnitoires, qui relevent généralement de la sous-catégorisation. Ces éléments forment
une classe. Une table se présente sous forme de matrice : en lignes, les éléments lexicaux de
la classe correspondante; en colonnes, les propriétés qui ne sont pas forcément respectées par
tous les éléments de la classe; a la croisée d’une ligne et d’une colonne le signe + ou — selon
que l’entrée lexicale décrite par la ligne accepte ou non la propriété décrite par la colonne.

Les tables actuelles souffrent de diverses formes d’incohérence et d’incomplétude. En particu-
lier, les propriétés déﬁnitoires ne sont pas représentées dans les tablesl. Pour y remédier, des

1Ceci a également motivé les travaux de (Gardent et al., 2005). Nous renvoyons a (Constant & Tolone, 2008)
pour une comparaison entre la version texte des tables, utilisée ici, et le travail présente par (Gardent et al., 2005).

Benoit Sagot, Elsa Tolone

tables des classes sont en développement a l’IGM pour chaque catégorie, qui associent a chaque
classe l’ensemble de ses propriétés déﬁnitoires (Paumier, 2003). C’est en particulier le cas des
verbes simples, pour lesquels une table des classes est développée actuellement, en complément
des 61 tables correspondantes.

Les résultats préliminaires de ce travail de fond nous ont permis d’envisager l’utilisation des
tables du Lexique-Grammaire des verbes simples dans un analyseur syntaxique a grande échelle,
l’analyseur FRMG (Thomasset & de la Clergerie, 2005). Mais une telle intégration suppose
d’interpréter et de convertir les concepts linguistiques et les données lexicales des tables du
Lexique-Grammaire dans le formalisme lexical utilisé par FRMG, celui du lexique syntaxique
Leﬁj‘ (Sagot et al., 2006). C’est ce travail que nous décrivons dans cet article. Le résultat en est
un lexique au format Leﬁj‘ encodant aussi bien que possible les données lexicales des tables.
Nous validons notre processus de conversion par l’évaluation préliminaire des performances de
FRMG lorsqu’il est couple a ce lexique.

L’ article est organisé comme suit. La section 2 décrit le lexique 1g1eX construit grace a la table
des classes des verbes a partir des différentes tables. La section 3 décrit le format du lexique syn-
taxique Leﬁj‘. La section 4 présente les fondements linguistiques et la méthodologie pratique de
conversion de 1g1eX au format Leﬁj‘ et le lexique obtenu. La section 5 compare les performances
de l’analyseur FRMG selon qu’il utilise les entrées verbales du Leﬁj‘ ou de 1g1eX.

2 Le lexique verbal lglex

Une table des classes regroupe en colonnes l’ensemble de toutes les propriétés syntaxiques
répertoriées pour la catégorie concernée, et liste en lignes l’ensemble des classes déﬁnies pour
cette meme catégorie. A l’intersection d’une ligne et d’une colonne, le symbole + (resp. —)
indique que la propriété correspondante est vériﬁée (resp. non vériﬁée) par tous les éléments de
la classe (c’est-a-dire par toutes les entrées de la table correspondante). Le symbole 0 indique
que la propriété est explicitement codée dans la table concernée, car elle est vériﬁée par certaines
de ses entrées mais pas toutes. Enﬁn, le symbole ? indique une cellule non encore renseignée.

Le développement de la table des classes des verbes est bien avancé (Constant & Tolone, 2008).
Toutes les propriétés déﬁnitoires des classes de verbes y ont été codées, par des + et des —,
rendant ainsi explicites les informations sous-entendues dans les tables elles-mémes. Toutes les
cellules correspondant aux propriétés codées dans les tables sont codées 0. Seules les propriétés
encore non étudiées pour certaines classes de verbes peuvent faire l’objet d’un codage par ?.

Grace a ces travaux de mise en cohérence et d’eXplicitation des propriétés syntaxiques des
verbes dans les tables du Lexique-Grammaire, il a été possible de construire une version struc-
turée des tables du Lexique-Grammaire, disponible en un format textuel et en un format XML,
et appelé lexique 1g1eX (Constant & Tolone, 2008)2. La sous-partie de ce lexique qui reproduit
les entrées verbales des tables librement distribuées est elle-meme librement distribuée3.

La construction de 1g1eX repose sur l’outil LGEXtract, qui prend en entrée les tables d’une
catégorie donnée, la table des classes de cette catégorie, et un ﬁchier de conﬁguration. Ce ﬁchier

2Certains des problémes ainsi résolus ont d’ailleurs été détectés grace a l’exploitation de Iglex au cours du
travail décrit ici.

3Distribution partielle sous license LGPL—LR a l’adresse http : / / inf olingu . univ—mlv . fr, Données
Linguistiques > Lexique—Grammaire > Visualisation

Intégrer les tables du Lexique-Grammaire a un analyseur syntaxique

déﬁnit comment chaque propriété (issue de la table des classes ou, dans le cas de propriétés qui
y sont codées 0, de la table correspondante) contribue a la construction de l’entrée 1g1eX.

Dans le lexique 1g1eX, les informations syntaxiques sont représentées de facon partiellement

formalisée. Dans sa version textuelle, une entrée de1g1eX se présente comme suit :
— l’entrée commence par un identiﬁant indiquant sa catégorie, la table dont il provient et le
numéro de l’entrée dans cette table ;
— la section lexical-info indique les informations lexicales liées a l’entrée : lemme, mais égale-
ment auXiliaire(s) et prépositions associées a certains arguments; les prépositions possibles
a la place de l’indication Prép (resp. Loc) sont dans la partie prépositions (resp. locs);
— la section args décrit les distributions des différents arguments (suj et et compléments, répartis
en sous-sections const dont la position est repérée par l’élément pos) ; une distribution donnée
(élément comp) indique sa catégorie grammaticale (comp pour une complétive, NP pour
un syntagme nominal, etc.), son introducteur (élément introd-prep ou introd-loc), des traits
sémantiques (hum, nothum, et d’autres), des traits complémentaires (mood dans le cas d’une
complétive, etc), et l’intitulé complet des colonnes ayant contribué a déﬁnir cette distribution,
qui sont toutes de la forme argument = : réalisation ; cette section est donc bien formalisée ;
— la section all-constructions liste différentes constructions dans lesquelles l’entrée peut prendre
part; ces constructions sont réparties en constructions absolues (élément absolute), qui sont
nommées de facon complete (p.ex. NO V N1), et constructions relatives (élément relative)
qui sont des noms de redistributions (p.ex. [passif par]); les constructions codées + dans la
table des classes sont précédées de la mention true::, les autres sont précédées de la mention
0:: ; cette section est donc bien moins bien formalisée que la précédente, et les informations
qu’elle contient ne sont pas directement exploitables informatiquement.
— la section eXemp1eillustrel’entrée.
A titre d’exemple, voici au format 1g1eX l’entrée du verbe ruisseler dans la table 35L.
ID=V_35L_242
lexical-1'nfo=[1ocs=(1oc=[id="1 ",1ist=()],1oc=[id= "2 ",1ist=()]),cat= "Verb ", Verb=[1e1n1na= "ruisse1er"],
aux-1ist=(),prepositions=()]
args=(
const=[dist=(co1np=[cat='NP",source="true",introd—prep=(),o1igine=(o1ig='I,oc N1 =: de N1 source"),
1'ntrod—1oc=(prep= "de ")]),pos= "1 "],

const=[dist=(comp=[cat='NP",introd—prep=(),o1igine=(o1ig='I,oc N2 =: Vers N2 destination",
on'g="Loc N2 =: dans N2 destination "),introd—1oc=(prep="Vers ",prep="dans "),destination= "true "]),pos="2 "],

const=[pos="0",dist=(co1np=[cat='NP",introd—prep=(),not11u1n="true",o1igine=(o1ig='N0 =: N—11u1n"),
introd—1oc=()])])

a11—constructions=[abso1ute=(construction="o::N0 VLoc N1 source Loc N2 destination ",construction="o::N0 V",
construction: "o::N0 étre V—ant",construction="true::N0 VLoc N1 "),
re1atiVe=(construction=" V =: y",constn1ction=" V =: en ",construction="[eXtrap] ")]

exa1np1e=[exa1np1e="L’eau ruisselle de la gouttiére sur les passants"]

3 Le Leﬁj‘ et le format Alexina

Le Lejjﬁ" (Lexique des formes ﬂéchies du francais) est un lexique syntaxique a large couverture
pour le francais librement distribué (Sagot et al., 2006; Sagot & Danlos, 2007)".

4Distribution sous license LGPL—LR a l’adresse http: //gforge . inria . fr/projects/alexina/

Benoit Sagot, Elsa Tolone

I1 repose sur 1’ architecture Alexina d’acquisition et de modélisation de lexiques morphologiques
et syntaxiques. Un lexique intensionnel associe a chaque entrée un cadre de sous-categorisation
canonique et liste les redistributions possibles a partir de ce cadre. La compilation du lexique in-
tensionnel en lexique extensionnel construit alors différentes entrées pour chaque forme ﬂéchie
du lemme et chaque redistribution possible. Soit l’entrée intensionnelle simpliﬁée suivante :
clariﬁerl Lemma;V;<arg0 :Suj:c1nIscomp1Is1'nfIsn,argl :Obj:(c1aIscomp1Isn)>;
% ppp_emp1oyé_comme_ad j, %act1'f, %se_moyen_1'1npersonne1,
%pass1'f_1'1npersonne1, %pass1'f
Elle décrit une entrée du lemme verbal clariﬁer, qui est transitive directe (deux arguments réa-
lisés canoniquement par les fonctions syntaxiques Suj et Obj décrites entre les chevrons), et qui
admet les redistributions fonctionnelles (préﬁxées par le symbole %) participe passe’ employe’
comme adjectif, actif (la distribution par défaut), se moyen impersonnel (il s’est clariﬁe’ de nom-
breuses choses £1 cette reunion), passif impersonnel (il a e’te’ clariﬁe’ par Pierre que Luc était le
coupable), et passif. A titre d’exemple, l’entrée extensionnelle pour la forme ﬂéchie clariﬁes et
la redistribution passif a la forme (simpliﬁée) suivante :
clariﬁés V [pred=’c1an'ﬁer1<arg1:Suj:c1nIscomp1Isn,arg0:Ob12:(par-sn)>’,
@ passive, @pers, @KII1p]; %pass1'f

Les fonctions syntaxiques sont déﬁnies dans le Leﬁf par des criteres proches de ceux de DI-
COVALENCE (Van den Eynde & Mertens, 2006). L’inventaire des fonctions syntaxiques est le
suivant : Suj (sujet), Obj (objet direct), Obja (objet indirect introduit canoniquement par la pre-
position 61), Objde (objet indirect introduit canoniquement par la préposition de), Loc (locatif),
Dloc (délocatif), Att (attribut), Obl ou Obl2 (autres arguments obliques). Les criteres déﬁni-
toires de ces fonctions sont décrits dans (Sagot & Danlos, 2007).

Chaque fonction syntaxique peut étre réalisée par trois types de réalisations : pronoms clitiques,
syntagme direct (syntagme nominal (sn), adjectival (sa), inﬁnitif (sinf), phrastique ﬁni (scompl),
interrogative indirecte (qcompl)) et syntagme prépositionnel (syntagme direct précédé d’une
préposition, comme de-sn, a-sinf ou pour-sa5. Enﬁn, une fonction dont la réalisation est facul-
tative voit sa liste de réalisations possibles mise entre parentheses.

Des informations syntaxiques complémentaires (controle, mode des complétives, etc.) sont no-
tées par des macros (@CtrlSujObj, @ComplSubj, etc.) dont l’interprétation formalisée dépend
du contexte d’utilisation. Une modélisation de ces macros en LFG est fournie avec le Leﬁj".

4 Conversion des tables de verbes simples au format Leﬁj‘

4.1 Découpage en entrées : la construction de base et ses variantes

Chaque entrée de 1g1eX est associée a des constructions dont on peut distinguer plusieurs types :

1. la (ou les) construction(s) dites « de base », c’est-a-dire déﬁnitoires de la classe d’origine
de l’entrée ; elles sont identiﬁées dans le format 1g1eX par la mention true:: ;

2. les constructions « de base étendues », obtenues par adjonction d’arguments a la construc-
tion de base6 ; nous faisons l’hypothese (vériﬁée en pratique) que ces constructions sont

5a—scompl et de—scompl représentent les réalisations en ti/de ce que P.

5La situation est en réalité plus complexe. En effet, certains de ces arguments supplémentaires ne prennent part
a aucune des constructions, et ne sont connues que par leur description dans la section args de l’entrée. Nous les

Integrer les tables du Lexique-Grammaire a un analyseur syntaxique

toutes des intermediaires entre la construction de base et une construction dite « de base
maximalement etendue » ou CBME; par exemple, l’entree de rassembler dans la table
32PL (Max a rassemble’ ses articles (dans un 0uvrage)) a pour construction de base la
construction transitive simple NO V N1, mais la possibilite d’ajouter un complement en
Loc N2 conduit a une CBME de la forme N0 V N1 Loc N2;

3. les constructions qui sont des variantes de la construction de base, obtenues par efface-
ment d’un ou de plusieurs arguments ou par changement de type de realisation (Qu P
devenant Viinf W, par exemple);

4. les constructions qui sont en realite des redistributions (constructions relatives telles que
[passif de], constructions absolues de type N1 est Vpp de ce Qu P);

5. les constructions dont il semble qu’elles auraient dﬁ conduire a des entrees distinctes,
dites « entrees secondaires », telles que les constructions neutres ou les transformations
de type N1 se V de ce Qu P (cf. Luc se félicite d ’av0ir réussi £1 séduire Léa vs. Max
félicite Luc qu’il ait réussi £1 séduire Léa).

De par leur origine, les informations presentes dans la section args d’une entree 1g1eX participent
a la deﬁnition de constructions qui sont des variantes de la construction de base, etendue ou non
(cas 2 et 3). Pour identiﬁer les entrees au format Leﬁj‘ a creer a partir d’une entree 1g1eX, il faut
donc identiﬁer, parmi les constructions listees dans la section all-constructions, la construction
de base maximalement etendue (CBME), ainsi que les constructions qui relevent du cas 5.

Nous avons developpe une methode permettant d’aligner deux constructions, c’est-a-dire de
construire des correspondances entre arguments, malgre leurs differences de surface7 et leur
possible effacement. Cette methode nous permet d’identiﬁer et d’aligner la CBME et ses va-
riantes, rassemblees pour former une entree unique du lexique ﬁnal, dite entree canoniques.
Pour chaque variante, nous construisons une sequence d’operations elementaires permettant de
la reconstituer a partir de la CBME. Ces operations permettront de construire, pour chaque
argument, la liste de ses realisations possibles, et de determiner si elles sont effacables.

Parmi les autres constructions (qui ne sont donc pas des variantes de la CBME), celles qui
correspondent a des redistributions standard ([passifpar], [eXtrap]. . .) induisent l’ajout a l’entree
ﬁnale de la redistribution correspondante. Les autres induisent la creation d’entrees distinctes
dites secondaires, qu’elles relevent du cas 5 ou qu’elles correspondent a des redistributions non
encore repertoriees par le format Alexina.

Reprenons l’exemple ci-dessus. L’ entree indique les constructions suivantes :

a11—constructions=[abso1ute=(construction="o::N0 V Loc N1 source Loc N2 destination ",construction="o::N0 V",
construction: "o::N0 étre V—ant",construction="true::N0 VLoc N1 "),
re1ative=(construction=" V =: y",const1uction=" V =: en ",construct1'on="[extrap]'9]

La construction de base est donc N0 V Loc N1 (cas 1). La construction N0 V Loc N1 source
Loc N2 destination en etant l’unique extension, il s’agit de la CBME (cas 2). Les indications
semantiques de type source et destination etant ignorees, la construction de base devient une
variante de la CBME, par effacement de l’argument 2. La construction N0 V est egalement
identiﬁee comme une variante de la CBME, par double effacement (cas 3). La construction

prenons en compte correctement.

7Par exemple, QU P vs. N1, ou encore 51 N1 vs. Prép N1 si l’on sait par ailleurs, grace a la section 1eX1'caI-info
ou a la distribution concemee, que la Prép peut etre :2.

SA l’exception de certaines constructions relatives, telles que Ppv = : y, pour lesquelles la description de la
variante correspondante est obtenue directement.

Benoit Sagot, Elsa Tolone

N0 étre V—ant est laissée de cote pour l’instant. Du cote des constructions relatives, on trouve
la construction Ppv = : y (resp. Ppv = : en) qui permettra d’ajouter y (resp. en) a la liste des
réalisations de l’argument locatif (resp. délocatif) (cas 3). Enﬁn, la construction [extrap] induira
l’adjonction d’une redistribution impersonnelle (%actif_impersonnel) a l’entrée (cas 4).

4.2 Construction des cadres de sous-catégorisation

Une fois répertoriées les entrées a produire, les cadres de sous-catégorisation sont construits.
Pour cela, on calcule d’abord le cadre correspondant a la construction maximale de chaque
entrée (la CBME pour l’entrée canonique, ou l’unique construction des entrées secondaires).

La fonction syntaxique de chaque argument est déterminée au moyen d’heuristiques, ainsi que
sa réalisation canonique. Les fonctions syntaxiques sont obtenues de la facon suivante. Tout
d’abord, le premier argument recoit touj ours la fonction Suj9. Le premier argument post-verbal,
s’il est direct, se voit attribuer la fonction Obj, sauf pour les entrées de la table 32NM1°. Ensuite,
un argument introduit par 61 (resp. de) recoit la fonction syntaxique Obja (resp. Objde), sauf si un
indice complémentaire vient contredire ce choix (par exemple, pour un argument N1 introduit
par 61, la propriété é N1 = Ppv = : Ie lui conferera fonction syntaxique Obj, ex. : Il apprend £1
conduire / II I ’apprend). Les arguments introduits par Loc ont la fonction syntaxique Loc, sauf
ceux de la forme LOC Ni source ou vériﬁant LOC Ni = : de Ni source, qui ont la fonction
syntaxique Dloc. Enﬁn, les autres arguments sont considérés comme des Att s’ils sont directs,
et comme des Obl s’ils sont introduits par une préposition (Obl2 si un Obl existe déja).

Les réalisations de ces fonctions sont construites en deux temps. Tout d’abord, le type de syn-
tagme (nominal, inﬁnitif, phrastique,. . .) est déterminé. Par exemple, la réalisation scompl cor-
respond aux distributions de catégorie comp et ceComp et aux arguments dans les constructions
en Qu P. Ceci étant fait, il reste a lister les introducteurs possibles“. Nous ne rentrerons pas
dans les détails, mais l’ensemble des prépositions et autres introducteurs (p.ex. et) sont pris en
compte. Le résulat de ces heuristiques est le cadre de sous-catégorisation au format Leﬁj‘ pour
la construction maximale de l’entrée. Ainsi, la CBME de l’exemple précédent devient

<Suj:snIc1n,D1oc:sn,Loc:sn>.

L’ entrée canonique doit alors étre complétée pour inclure les variantes de la CBME. Pour cela,
nous ajoutons tout d’abord les réalisations issues de constructions telles que LOC N1 = Ppv
= : y. Nous répercutons ensuite pour chaque variante de la CBME la séquence d’opérations ele-
mentaires permettant de la dériver de la CBME : tout effacement d’un argument rend l’ argument
facultatif ; tout changement de réalisation induit une nouvelle réalisation possible de la fonction
syntaxique concernée”. Le résultat de ce processus est un cadre de sous-catégorisation avec

9Les constructions impersonnelles sont toutes obtenues sous forme de redistributions, puisque la table 381 n’est
pas prise en compte dans le lexique Iglex.
1°Elle rassemble les Verbes a pseudo—obj et de type peser (Le sac pése 10 kg) ou sentir (Cette piéce sent lafumée).
“De plus, la realisation cln (clitique nominatii) est ajoutée systématiquement a la fonction syntaxique Suj.
12Les dépendances entre ces operations (par exemple, tel argument est effagable seulement si tel autre l’est
aussi) sont perdues : tout effacement est considéré comme possible sans condition, alors meme qu’il peut ne Ve-
nir que d’une seule construction. De meme, toute realisation d’un argument autorisée par une construction devient
possible quelles que soient les réalisations des autres arguments. ll s’agit d’une approximation des données linguis-
tiques présentes dans les tables. Cette approximation, qui n’a pas de consequences importantes pour l’utilisation
du lexique produit, a le mérite de permettre de diminuer au maximum le nombre d’entrées. De plus, elle est lin-
guistiquement acceptable, puisqu’elle est par exemple également adoptée par le modele de la Valence mis en oeuvre
par le lexique DICOVALENCE (Van den Eynde & Mertens, 2006).

Intégrer les tables du Lexique-Grammaire a un analyseur syntaxique

alternatives et arguments optionnels. Le cadre construit pour l’entrée canonique de l’exemple
précédent est alors

<Suj:c1nIsn,D1oc:(de-snIen),Loc:(Vers-snIdans-snIy)>.

4.3 Identiﬁcation des redistributions admissibles

Le cadre de sous-categorisation de base constr11it a la section précédente est le cadre dit pro-
fond, car il releve de la syntaxe profonde. Néanmoins, la table 381 des verbes impersonnels
intrinseques et autonomes ayant été écartée du lexique Iglex, ce cadre profond correspond tou-
jours a un cadre de surface, celui de la (re)distribution active (%actif). Toutes les entrées se
voient donc attribuer au moins cette (re)distribution.

Les autres redistributions admissibles sont identiﬁées parmi les constructions répertoriées dans
la section all-constructions de l’entrée Iglex. Ainsi, [passif par] et [passif de] correspondent
aux redistributions %passif et %passif_de, alors que [extrap] et [extrap][passif] correspondent
aux redistributions %actif_impersonnel et %passif_impersonnel13. Comme étudié par (Danlos
& Sagot, 2008), les redistributions pronominales (de type se moyennes et se neutres) étant
mal codées dans le Lexique-Grammaire, nous ne les avons pas prises en compte en tant que
redistributions. Le résultat de cette extraction pour l’exemple précédent est ainsi

<Suj:c1nIsn,D1oc:(de-snIen),Loc:(Vers-snIdans-snly)>;; %actif.
Un exemple plus riche, tel que celui de l’entrée de bénéﬁcier dans la table 8 (Max bénéﬁcie de
ce que Luc est parti), devient quant a lui”

<Suj:c1nIscomp1Isinﬂsn, Objde:de-scompllde-sinﬂde-snIen>; ;
%actif, %passif_impersonne1, %actif_impersonne1.

4.4 Prise en compte des informations complémentaires

D’autres types d’informations sont alors ajoutées, pour former l’entrée ﬁnale. Tout d’abord,
le prédicat sémantique correspondant a l’entrée, qui est le plus souvent Lemma (c’est-a-dire
identique au lemme verbal), peut étre complété (par exemple en se Lemma, ne pas Lemma, etc)
en fonction d’informations présentes dans la section lexical-info de l’entrée Iglex (ppVse="true",
neg: "true ", etc). Le lemme verbal lui-méme, en-téte de l’entrée, est extrait du champ lemma,
et complété par le numéro de la table dont est issue l’entrée, ainsi que du numéro d’entrée
dans cette table. Ainsi, méme lorsqu’une entrée Iglex donne lieu a plusieurs entrées au format
Leﬁf, ces entrées partagent un meme identiﬁant. Par ailleurs, la classe de fréquence de l’entrée
est récupérée dans le DELA, et est traduite en un poids de la facon suivante : les entrées z1
recoivent un poids standard de 100, les entrées z2 (resp. z3) recoivent un poids de 70 (resp. 50).

Les informations syntaxiques complémentaires les plus intéressantes sont représentées sous

forme de macros. Il s’agit des informations suivantes :

— auxiliaire de conjugaison, récupéré dans le champ aux-list, qui induit l’ajout de la macro
@aVo1'rou de la macro @étre;

13Rappelons que la table des classes explicite toutes les propriétés Vériﬁées par toutes les entrées d’une table.
Ainsi, le fait que toute entrée a complement direct ne faisant pas partie de la table 32NM (c’est—a—dire toute entrée
recevant une fonction syntaxique Obj) soit passivable est codé dans la table des classes par un + a l’intersection
des lignes concemées et de la colonne [extrap].

“On note que la Validité des redistributions impersonnelles est discutable.

Benoit Sagot, Elsa Tolone

— caractere (essentiellement) pronominal (ppvse= "true ", macro @pron);

— caractere obligatoirement négatif (neg="true ", macro @neg);

— mode des complétives possibles (champ mood de la distribution correspondante), indiquée
sous la forme de macros de type @ f M , o1‘1 f vaut respectivement SComp, Comp, AComp et
DeComp pour les complétives de fonction syntaxique Suj, Obj, Obja et Objde, et ou M est
Ind ou Subj (ex. : @CompInd);

— informations de controle, extraites des champs contr des distributions ou du nombre i dans
les arguments de type Viinf au sein des constructions, et qui sont représentées par des macros
de la forme @Ctr1f1f2, ou fl est la fonction syntaxique du controleur et f2 celle du controlé
(exemple : @Ctr1Suj0bj).

Enﬁn, la table de conjugaison a associer a l’entrée est récupérée dans le Leﬁj‘, permettant ainsi

la compilation du lexique obtenu avec la description morphologique du francais du Leﬁj".

Pour l’entrée de misseler dans la table 35L, que nous suivons depuis le début de cet article, le
résultat ﬁnal est alors le suivant :

ruisselergig V-er:std 100;Lemma;V;<Suj:c1nIsn,D1oc:(de-snIen),Loc:(vers-snldans-snIy)>;cat=v;%actif

Pour l’entrée de bénéﬁcier dans la table 8, mentionnée ci-dessus, le résultat est :

bénéﬁcierzfo V-er:std 100;Lemma;v;<Suj:c1nIscomp1Isinﬂsn,Objde:de-scompllde-sinﬂde-snIen>;
cat=v, @DeCompInd, @ Ctr1SujObjde; %actif, %passif_i1npersonne1, %act1'f_impersonne1_comp1

4.5 Résultats

Le lexique verbal obtenu contient 16 903 entrées pour 5 694 lemmes verbaux différents, c’est-
a-dire un nombre moyen d’entrées par lemme de 2,96. A titre de comparaison, le Leﬁj‘ contient
seulement 7072 entrées verbales pour 6818 lemmes verbaux distincts, soit un nombre moyen
d’entrées par lemme de 1,04. Le lexique issu de 1g1eX, quoique décrivant moins de lemmes
verbaux, est donc beaucoup plus couvrant en termes de constructions syntaxiques et donc beau-
coup plus ambigu. Les lemmes verbaux les plus ambigus dans le Leﬁj‘ sont tenir et ( re )faire (6
entrées) alors que dans le lexique extrait de 1g1eX il s’agit des lemmes tenir (53 entrées), jouer
(44 entrées) et prendre (35 entrées). Au niveau extensionnel, le Leﬁj‘ contient 361 268 entrées,
alors que le lexique extrait de 1g1eX en contient 763 555.

L’ obtention de ce lexique a partir de 1g1eX par le processus décrit ici est réalisée par un script
perl de moins de 1 000 lignes. La conversion proprement dite, c’est-a-dire l’exécution du script
sur l’ensemble de 1g1eX, prend moins d’une minute. Si donc une nouvelle version des tables et
de la table des classes sont publiées, la construction du lexique correspondant au format Leﬁj‘
est quasiment instantanée, et ne nécessite aucun nouveau développement.

5 Intégration dans FRMG : évaluation et discussion

La motivation de ce travail est de permettre aux données linguistiques codées dans les tables
du Lexique-Grammaire de servir de base de données lexicales pour un analyseur syntaxique
automatique du francais. Parmi les analyseurs qui prennent en entrée un lexique au format
Leﬁj‘, nous avons choisi l’analyseur FRMG (Thomasset & de la Clergerie, 2005). Il s’appuie
sur une Grammaire d’Adjonction d’Arbres (TAG) compacte du francais générée a partir d’une
métagrammaire, et sur le Leﬁj‘. La compilation et l’eXécution de l’analyseur se déroule dans

Integrer les tables du Lexique-Grammaire a un analyseur syntaxique

le cadre du systeme DYALOG (de la Clergerie, 2005). Il utilise comme entree le resultat de la
chaine de traitement presyntaxique SXPipe (Sagot & Boullier, 2008), qui convertit un texte brut
en suite de treillis de formes connues15.

L’ integration du lexique au format Leﬁf extrait de 1g1eX dans l’analyseur FRMG est immediate :
le lexeur de l’analyseur fait appel a une base de donnees lexicales construite a partir du Leﬁj‘.
Il sufﬁt de remplacer les entrees verbales du Leﬁf par le lexique construit a partir de 1g1eX, de
conserver les autres entrees du Leﬁj‘, de construire la base de donnees lexicales correspondantes,
et de speciﬁer a FRMG d’utiliser cette demiere. Le resultat est une variante de l’analyseur FRMG,
que nous noterons FRMG1g1ex, par opposition a la variante standard notee FRMGLW37.

Nous avons evalue FRMGLeﬁef et FRMG1g1ex en analysant la partie annotee manuellement du cor-
pus EASy (Paroubek et al., 2005), soit 4 306 phrases de styles varies (journalistique, medical,
oral, questions, litteraire. . .), et en utilisant la metrique d’evaluation EASy (les chunks et les
« relations » EASy, c’est-a-dire approximativement les dependances entre mots pleins). Les re-
sultats detailles de cette evaluation seront publies par ailleurs. Globalement, on observe que les
resultats sont pour l’instant legerement meilleurs pour FRMGLeﬁrf. Par exemple, la f-mesure glo-
bale sur les chunks est de 84,4 % pour FRMGLEW contre 82,2 % pour FRMG1g1ex, et celle sur les
relations est de 59,9 % pour FRMGLeﬁrf contre 56,1 % pour FRMG1g1exu Nous ne pensons pas que
ce resultat remette en question la pertinence de l’utilisation des tables du Lexique-Grammaire
en analyse syntaxique, pour plusieurs raisons : d’une part, le processus de conversion decrit
ici et son implementation en sont encore a une version preliminaire; d’autre part, le develop-
pement du Leﬁj‘ a ete realise en parallele avec celui de FRMG et les evaluations EASy; enﬁn,
le lexique issu des tables a dﬁ etre complete par certaines entrees manquantes (auxiliaires et
semi-auxiliaires, verbes impersonnels, etc. . .), mais certaines autres manquent peut-etre encore.
Du reste, nous avons deja identiﬁe des problemes systematiques dans les donnees de depart
(telle que la passivabilite incompletement codee dans la table des classes) dont l’impact sur les
resultats est tres important. Une fois ces problemes resolus, nous esperons que FRMG1g1ex aura
des resultats signiﬁcativement meilleurs que FRMGLeﬁrf.

Il est interessant de constater que, des a present, la couverture des deux analyseurs est assez
complementaire. Par exemple, sur le sous-corpus gene ral_l emonde, 177 phrases sont en-
tierement reconnues par les deux analyseurs, 85 seulement par FRMGLeﬁrf, 76 seulement par
FRMG1g1ex, et 111 par aucun des deux. Cette complementarite est prometteuse. En particulier, il
sera interessant d’etudier les differences entre les erreurs faites par chacun de ces deux analy-
seurs, y compris au moyen de techniques automatiques telles que celles decrites dans (Sagot &
de La Clergerie, 2008). Ceci pourrait permettre d’ameliorer les differentes ressources, voire de
detecter automatiquement des erreurs dans les lexiques. Dans le cas de 1g1eX, nous nous atten-
dons a ce que la plupart de ces erreurs proviennent du processus de conversion, mais certaines
proviendront peut-etre d’erreurs dans les tables du Lexique-Grammaire, et permettront donc
d’ameliorer ces dernieres.

6 Conclusion et perspectives

Nous avons developpe une methodologie et un outil permettant de convertir la version textuelle
des tables du Lexique-Grammaire en un lexique TAL utilisant le formalisme lexical du Leﬁj", et

15SXPipe comprend entre autres des modules de segmentation en phrases, de tokenization et correction ortho-
graphique, de detection d’entites nominees, et d’ identiﬁcation non detenniniste des mots composes.

Benoit Sagot, Elsa Tolone

donc utilisable par l’analyseur syntaxique FRMG. La pertinence du lexique obtenu a été validée
par son utilisation pour l’analyse syntaxique automatique du corpus d’évaluation EASy.

Ce premier travail nous a permis d’identiﬁer un certain nombre de problemes dans les données
de départ (tables et table des classes), mais nous a conduit également a un certain nombre
de simpliﬁcations et d’approximations dans le processus de conversion. I1 y a donc la place
pour des améliorations importantes, qui pourraient permettre a terme de construire un lexique
syntaxique pour le TAL a partir des tables du Lexique-Grammaire dont l’utilisation améliorera
la qualité des outils et des ressources existants, par exemple par fusion avec d’autres ressources
lexicales ou par intégration dans un analyseur syntaxique opérationnel.

Références

BOONS J .-P., GUILLET A. & LECLERE C. (1976). La structure des phrases simples en
francais, Constructions intransitives. Geneve : Droz.

CONSTANT M. & TOLONE E. (2008). A generic tool to generate a lexicon for nlp from
lexicon-graIr1Inar tables. In Actes du 27eme Colloque Lexique et Grammaire, L’ Aquila, Italie.
DANLOS L. & SAGOT B. (2008). Constructions pronominales dans dicovalence et le lexique-
graIr1Inaire — intégration dans le Leﬁj‘. In Actes du 27eme Colloque Lexique et Grammaire,
L’Aquila, Italie.

DE LA CLERGERIE E. (2005). DyALog : a tabular logic programming based environment
for NLP. In Proceedings of 2nd International Workshop on Constraint Solving and Language
Processing (CSLP’05), Barcelona, Spain.

GARDENT C., GUILLAUME B., PERRIER G. & FALK I. (2005). Maurice Gross’ graIr1Inar
lexicon and natural language processing. In Proc. of the 2nd LTC, Poznan, Poland.

GROSS M. (1975). Me’thodes en syntaxe. Paris, France : Hermann.

GUILLET A. & LECLERE C. (1992). La structure des phrases simples en francais .' Les
constructions transitives locatives. Geneve : Droz.

PAROUBEK P., PoUILLoT L.—G., ROBBA I. & VILNAT A. (2005). EASy : campagne d’éva-
luation des analyseurs syntaxiques. In Proceedings of the EASy workshop of TALN 2005,
Dourdan, France.

PAUMIER S. (2003). De la reconnaissance de formes linguistiques a l ’analyse syntaxique.
PhD thesis, Université Paris-Est Marne-la-Vallée.

SAGOT B. & BOULLIER P. (2008). SXPipe 2 : architecture pour le traitement présyntaxique
de corpus bruts. Traitement Automatique des Langues (TA.L.), 49(2). A paraitre.

SAGOT B., CLEMENT L., DE LA CLERGERIE E. & BOULLIER P. (2006). The Leﬁj‘ 2 syn-
tactic lexicon for French : architecture, acquisition, use. In Proc. of LREC ’06.

SAGOT B. & DANLOS L. (2007). Améliorer un lexique syntaxique a l’aide des tables du
lexique-grammaire — Constructions impersonnelles. Cahiers du Cental.

SAGOT B. & DE LA CLERGERIE B. (2008). Fouille d’erreurs sur les sorties d’analyseurs
syntaxiques. Traitement Automatique des Langues (TA.L.), 49(1).

THOMASSET F. & DE LA CLERGERIE E. (2005). Comment obtenir plus des meta-
grammaires. In Proceedings of TALN’05, Dourdan, France : ATALA.

VAN DEN EYNDE K. & MERTENS P. (2006). Le dictionnaire de valence DICOVALENCE :
manuel d’utilisation. http ://bach.arts.kuleuven.be/dicovalence/manuel_0611 17.pdf.

