TALN 2009 — Session posters , Senlis, 24-26 juin 2009

Recto / Verso
Un systéme de conversion automatique anciennel nouvelle
orthographe £1 visée linguistique et didactique

Richard Beaufort Anne Dister Hubert Naets Kévin Macé
Cédrick Fairon
CENTAL / Université Catholique de Louvain, 1 Place Blaise Pascal, B-1348
Louvain-la-Neuve, Belgique
{richard.beaufort, anne.dister, hubert.naets, kevin.mace,
cedrick.fairon} @uclouvain.be

Résumé. Cet article présente Recto / Verso, un systeme de traitement automatique du lan-
gage dédié a l’application des rectiﬁcations orthographiques de 1990. Ce systeme a été déve-
loppé dans le cadre de la campagne de sensibilisation réalisée en mars dernier par le Service et
le Conseil de la langue frangaise et de la politique linguistique de la Communauté frangaise de
Belgique. Nous commengons par rappeler les motivations et le contenu de la réforme proposée,
et faisons le point sur les principes didactiques retenus dans le cadre de la campagne. La plus
grande partie de l’article est ensuite consacrée a l’implémentation du systeme. Nous terminons
enﬁn par une premiere analyse de l’impact de la campagne sur les utilisateurs.

Abstract. This paper presents Rectol Verso, a natural language processing system dedi-
cated to the application of the 1990 French spelling rectiﬁcations. This system was developed
for supporting the awareness-raising campaign promoted last March by the Superior council of
the French language in Belgium. We ﬁrst remind the motivations and the content of the reform,
and we draw up the didactic principles followed during the campaign. The most important part
of this paper is then focused on the system’s implementation. We ﬁnally end by a short analysis
of the campaign’s impact on the users.

M0tS-CléS I Rectiﬁcations orthographiques de 1990, conversion anciennel nouvelle or-
thographe, objectifs didactiques, machines a états ﬁnis.

Keywords: 1990 French spelling rectiﬁcations, ancientl new spelling conversion, di-
dactic purposes, ﬁnite-state machines.

1 Introduction

En 1990, le Conseil supérieur de la langue frangaise, présidé par Michel Rocard, et réunissant
des personnalités et des experts frangais, belge et québécois, proposait un ensemble de recti-
ﬁcations orthographiques, connues sous le nom de « nouvelle orthographe » (Goosse, 1991),
et approuvées par toutes les instances francophones compétentes en matiere de langue (en ce
compris l’AcadéInie frangaise). Ces modiﬁcations, proposées aux usagers sans leur étre impo-
sées, entrent peu a peu dans l’usage, mais sans que leur emploi ne soit systématique. Ainsi,

R. Beaufort, A. Dister, H. Naets, K. Macé, C. Fairon

on constate que ces nouvelles graphies, bien qu’intégrées dans les correcteurs orthographiques
actuels (Fontenelle, 2006) et préconisées dans l’enseignement, sont encore parfois sanction-
nées chez les éleves, tant en France qu’en Belgique. Fort de ce constat, le Conseil de la langue
francaise et de la politique linguistique de la Communauté francaise de Belgique a réalisé en
mars dernier une vaste campagne de promotion des rectiﬁcations aupres des usagers, action de
sensibilisation a laquelle la presse francophone belge a participé en « passant a la nouvelle or-
thographe » pour la version en ligne des quotidiens. Ce « passage » a été rendu possible grace au
développement d’un systeme de traitement automatique du langage spécialement dédié a cette
tache : Recto / Verso. C’est ce systeme que nous présentons ici.

2 La campagne de sensibilisation

En Communauté francaise de Belgique, un dépliant reprenant « 7 regles pour nous simpliﬁer
l’orthographe » a été diffusé a 300 000 exemplaires, conjointement a la publication en octobre
2008 de quatre circulaires Ininistérielles ofﬁcialisant le choix de la « nouvelle orthographe »
pour l’enseignement du francais en Belgique.

S’en est suivie une vaste campagne de sensibilisation au travers de la presse en ligne : quatre
des plus grands groupes de la presse francophone belge (soit un peu plus de 90 % de la presse
en ligne) ont fait le pas de passer a la nouvelle orthographe.1

Cette campagne a été menée durant la « Semaine de la langue » de mars 2009. Les éditions elec-
troniques des journaux ont alors été proposées au lecteur dans deux versions : en orthographe
« standard », comme d’habitude, et en orthographe rectiﬁée. Dans le principe, un bouton nommé
« RECTONERSO » (RECTiﬁcations Orthographiques / VERSion Originale) permettait de bas-
culer d’une version a l’autre.

Cette action poursuivait deux objectifs complémentaires. Premierement, elle voulait sensibi-
liser les grands éditeurs a la question de la nouvelle orthographe, parce qu’il est aujourd’hui
évident que la nouvelle orthographe ne po11rra se diffuser dans le public que si les grands édi-
teurs l’adoptent au préalable. Le passage temporaire de la presse a la nouvelle orthographe, dans
le cadre de la campagne, est certainement un signe encourageant dans ce sens.

Deuxiemement, la campagne avait une dimension pédagogique. L’idée était d’une part de per-
mettre au public de découvrir la nouvelle orthographe au travers de cas concrets dans des articles
réels, et d’autre part de guider cette découverte, au travers de notes explicatives présentant les
rectiﬁcations introduites dans le texte.

Les versions en ligne des quotidiens se présentent classiquement sous la forme de pages HTML.
Dans le cadre de la campagne, nous devions donc générer des pages HTML en orthographe
rectiﬁée au départ de textes en orthographe traditionnelle.

2.1 Les contraintes pédagogiques

Aﬁn de donner une dimension pédagogique aux pages en nouvelle orthographe, il fallait que
les formes rectiﬁées soient mises en évidence par rapport au reste du texte de la page, et soient
expliquées a l’uti1isateur.

1Voir www . lesoir . be; www. lalibre . be; www . dhnet . be; www . sudpresse . be

Recto / Verso

Des formes rectiﬁées visibles. Nous avons décidé d’utiliser des couleurs, réparties en deux ni-
veaux complémentaires : d’une part, une couleur pour l’ensemble du mot concerné, de maniere
a faciliter sa localisation dans la page, et d’autre part, une couleur pour la partie du mot touchée
par la rectiﬁcation, de maniere a accélérer l’identiﬁcation visuelle des modiﬁcations réalisées.
Pour ce faire, nous avons utilisé une feuille de style CSS, qui autorise entre autres l’utilisa-
tion de balises <span> pour formater un texte. Nous avons donc déﬁni deux niveaux de balises
<span> : le premier, "recto. . ", correspond au mot rectiﬁé dans sa globalité et indique si la
forme a été modiﬁée ("recto") ou est une exception ("rect o_ex"); le second, " rule. . ", en-
toure la partie du mot concemée par une regle, et indique par un chiffre de 1 a 9 le numéro de
la regle concernée. Par exemple, la phrase

le bﬁcher est la (1)
deviendra, apres rectiﬁcation,
le <span class="recto">b<span class="rule4">u</span>cher</span> est la (2)

o1‘1 "recto" et "ru1e4 " indiquent conjointement que la regle relative a la suppression de l’ac-
cent circonﬂexe sur i et u a bien été appliquée. Le CSS déﬁnit la couleur a appliquer pour chaque
classe "recto. . " et pour chaque classe "rule. . ". En l’occurrence, nous avons décidé d’uti-
liser l’orange foncé pour "recto", le vert pour "rect o_ex" et le bleu pour toutes les classes
" rule. . ", aﬁn de ne pas entrainer de surcharge cognitive.

Des rectiﬁcations expliquées. Apres analyse, et aﬁn de modiﬁer le moins possible l’apparence
de la page rectiﬁée, nous avons décidé d’opter pour l’afﬁchage d’infobulles, n’apparaissant que
lorsque l’utilisateur passe la souris sur une rectiﬁcation donnée.

Pour ce faire, nous avons exploité la présence des balises <span> a l’aide de la librairie J avaS-
cript jQuery.2 Le fonctionnement de jQuery tient dans la déﬁnition de la fonction JavaScript
"ready () " qui exécute au chargement de la page les instructions qui y sont contenues. Dans le
cas présent, il y est décrit que lorsque le curseur de la souris passe au-dessus de l’une des balises
ajoutées, une infobulle doit s’afﬁcher avec un texte. Ce texte, qui differe selon la combinaison
"recto. . " / "rule. . " rencontrée, est conservé dans un tableau JavaScript, ce qui permet de
dissocier le comportement des infobulles de leur contenu.

2.2 Un service accessible en ligne

Aﬁn de faciliter l’acces au systeme par les journaux en ligne et dans le but de simpliﬁer les
opérations de Inise a jour, Rectol Verso a été concu sous la forme d’un service web de type
SOAP. Les quotidiens en ligne ont pu transmettre ainsi leurs articles a un serveur distant, a
l’aide d’une API tres simple, et recevoir en retour ces memes textes rectiﬁés et ponctués des
balises indiquant l’emplacement et la nature des rectiﬁcations.

Les articles de presse n’ont toutefois pas été les seuls textes concemés par la campagne, puis-
qu’une interface web accessible au grand public a également été mise en place. Accédant elle
aussi au service web, elle a permis a chacun d’employer le systeme de rectiﬁcations.

Du cote serveur, l’architecture reste simple : le service web recoit le texte a rectiﬁer; il y ap-
plique une série de prétraitements visant a normaliser l’encodage du document; le texte est
ensuite transmis au moteur de rectiﬁcations, et, une fois traité, renvoyé au client par le service
web.

2Vmrhttp://jquery.com

R. Beaufort, A. Dister, H. Naets, K. Macé, C. Fairon

3 Implémentation

3.1 Outils utilisés

L’ ensemble des traitements linguistiques décrits dans cet article ont été implementés sous la
forme de machines a états ﬁnis. Selon les besoins, il s’agit d’automates ou de transducteurs,
pondérés ou non (Mohri, 1996; Roche & Schabes, 1997).

Nous avons utilisé la bibliotheque de machines a états ﬁnis et le compilateur présentés dans
(Beaufort, 2008). La bibliotheque propose la plupart des algorithmes standard de la littérature
dans leur version pondérée. Elle autorise la création et la sauvegarde de machines dynamiques
(construites au vol), et permet la sauvegarde et le chargement de machines binaires (complete-
ment précalculées), plus compactes et plus rapides a charger. Le compilateur, développé autour
de la bibliotheque, convertit en machines a étas ﬁnis des regles de réécriture pondérées, des lan-
gages réguliers, des dictionnaires et des n-grammes. Les regles de réécriture autorisées prennent
la forme générale

<p—>1/2::)\_p/w (3)

ou go, lorsqu’il est entouré par A et p, se réécrit 1/) et se voit attribuer le poids w. Dans cette
formulation, (,0, 1/2, A et p sont des expressions régulieres (McNaughton & Yamada, 1960) et ea
est déﬁni sur le semi-anneau tropical (Kuich & Salomaa, 1986). Dans tous les cas, le résultat de
la compilation est une machine a états ﬁnis au format binaire de la bibliotheque.

3.2 Architecture générale du systéme

Les réﬂexions préliminaires au développement de Recto / Verso ont été les suivantes :

1. Certaines regles de la réforme ne sont pas purement lexicales. C’est le cas, par exemple,
du pluriel des noms composés ou de l’accord du participe passé laisse’ devant inﬁnitif.
Rectol Verso devait donc inclure un moteur d’analyse linguistique.

2. Dans le cadre de la campagne de sensibilisation, Rectol Verso devait traiter des pages
HTML et donc étre capable de masquer les éléments non linguistiques le temps du traite-
ment, et de les réintroduire ensuite dans la version réformée, aﬁn de respecter l’afﬁchage
prévu par le créateur de la page.

Sur la base de ces considérations, Rectol Verso a été pourvu des modules suivants :

1. Un module de prétraitement HTML, qui cache le contenu non linguistique du texte a
traiter;
2. Un module de désambigiiisation linguistique, qui analyse le contenu linguistique du texte ;

3. Un module de conversion, qui applique la réforme sur le résultat de l’analyse;

4. Un module de post-traitement HTML, qui réinsere les éléments non linguistiques dans le
texte réformé.

Nous commencons en 3.3 par décrire le moteur d’analyse linguistique, qui constitue le coeur
du systeme. Nous détaillons ensuite en 3.4 les modules de pré- et post-traitement HTML, qui
travaillent de pair. Ces modules font toute l’originalité et la robustesse de l’application. Nous
terminons enﬁn en 3.5 par le module de conversion, qui est la raison d’étre de Rectol Verso.

Recto / Verso

3.3 Le module de désambigiiisation linguistique

Ce module est fortement inspiré de (Beaufort, 2008), auquel nous renvoyons le lecteur pour une
description détaillée. Dans ce systeme, la phase de désambigiiisation linguistique se liIr1ite a la
suite d’étapes nécessaires a segmenter un texte en unités de sens (dates, téléphones, URLs, ...,
nombres, formes lexicales), eta attribuer a chaque unité et a chacune de ses parties une et une
seule analyse morphologique possible : catégorie, genre, nombre et personne. Aucune structure
syntaxique n’est construite, et aucune analyse sémantique n’est entreprise. Le systeme est or-
ganisé en trois couches : un prétraitement, une analyse morphologique et une désambigiiisation
syntaxique.

1. Le prétraitement est réalisé par un transducteur Pre obtenu par compilation de regles
de réécriture qui décrivent les unités de sens a détecter. En cours de processus, un texte
W est donc composé avec le transducteur Pre, ce qui produit un transducteur W’, dont
l’entrée contient le texte et la sortie contient uniquement les unités détectées, chaque
unité étant systématiquement située en face du premier caractere qui lui appartient. La
ﬁgure 3.3 en donne une illustration. A partir de ce résultat et en appliquant l’algorithme
de segmentation de machines a états ﬁnis proposé par (Beaufort, 2008), W’ est segmenté
en un vecteur de machines a états ﬁnis VW/, o1‘1 chaque machine correspond a une seule
unité. Ce sont les machines mémorisées dans ce vecteur qui subiront les étapes suivantes
du traitement.

2. L’ analyse morphologique repose principalement sur deux transducteurs pondérés. Le pre-
mier, dédié aux formes connues, représente un simple lexique de formes ﬂéchies. Le se-
cond, dédié aux formes hors vocabulaire, permet de choisir les categories a attribuer aux
formes en fonction de leur terminaison (il correspond a l’expression réguliere « .+ {su f } »
o1‘1 « .+ » est une suite non nulle de caracteres, et « {su f } » est l’ensemble des sufﬁxes
du francais, complété de la chaine vide 6). Les deux transducteurs sont pondérés par des
modeles de mot distincts, de la forme — log p(w,- 

3. L’ analyse syntaxique, enﬁn, s’organise en deux niveaux. Le premier, représenté sous la
forme d’un automate pondéré, implémente un n-gramme — log p(ti|ti‘2, ti”) lissé par
interpolation linéaire (Beaufort et al., 2002). Le second est un transducteur qui regroupe
des suites de catégories susceptibles de constituer des formes composées de différents
types : mots composés (e.g. nom, tiret, nom —> nom), formes verbales composées plus
ou moins complexes (e. g. auxiliaire, participe passe’ —> verbe), etc. On retiendra que les
deux niveaux d’analyse sont conservés dans des transducteurs distincts mais alignés, de
maniere a donner aux traitements suivants la possibilité d’un acces a une information
macro- ou micro-scopique.

On notera que la composition de l’analyse morphologie et de l’analyse syntaxique permet la
reconstitution d’un modele de langue complet sous la forme de Bayes :

P(T|W) = argTmi11 Z — log p(w,-|t") o E — 1ogp(ti|ti_2, 77-1) (4)

Apres désambigiiisation, le texte se présente sous la forme de plusieurs machines a états ﬁnis
alignées. Leur parcours en parallele permet de remplir une structure de données, que nous avons
baptisée OrthoML et qui présente les niveaux d’inclusion suivants :

paragraphe —> phrase —> unite’ de sens —> forme composée —> forme simple

R. Beaufort, A. Dister, H. Naets, K. Macé, C. Fairon

A:Alpha /\ h:8 A ,:Plmct /\ ""28 r\ u:Alpha /x n28 /\ ""28 r\ 21:8 /'\ S28 /\ !:Endpunct
0 xx xx xx xx xx xx xx xx xx 0

FIG. 1 — Application du prétraitement sur le texte « Ah, un as ! »
3.4 Les modules de pré- et post-traitement HTML

Une page HTML contient deux types d’éléments non linguistiques :

1. Des éléments structurants. Il s’agit exclusivement des balises HTML (ouvrantes et fer-
mantes) permettant de délimiter des portions cohérentes de texte : une phrase (<BR>), un
paragraphe (<P>), une liste (<UL, <OL>, <LI>) ou un titre (<Hl>, <H2>, etc.). Dans
une page HTML, ces balises sont parfois le seul indice d’une ponctuation forte, absente
du texte lui-meme.

2. Du bruit. I1 s’agit de tout le reste. Dans ce reste, nous avons décidé de placer les balises
de formatage des polices (<B>, < I>, <U>, etc.), qui peuvent faire irruption n’importe ou
dans le texte, que ce soit entre deux mots d’une meme phrase ou dans un mot lui-méme.

Pour chaque type, nous avons construit un nouveau transducteur de prétraitement :

1. Tag, qui identiﬁe les éléments structurants du texte et leur attribue une nouvelle unité, le
Tag. Ce transducteur est obtenu et fonctionne de maniere similaire a Pre.

2. Hid, qui identiﬁe le bruit présent dans le texte et le cache a l’analyse. Dans ce cas-ci,
les regles de réécriture ne projettent plus les éléments détectés sur une unité, mais sur la
chaine vide 6. Dans le résultat de la composition W o Hid, le bruit est présent sur l’entrée,
mais est absent de la sortie du transducteur.

Idéalement, nettoyer le texte, identiﬁer les éléments structurants et détecter les unités classiques
devraient étre réalisés comme suit :

W’ = 7r2(W o Hid) 0 Tag 0 Pre (5)
ou 7r2(-) note la projection du langage de sortie de 

Cependant, la projection fait disparaitre le bruit de la page, de maniere irrécupérable. Or, l’ob-
jectif est d’appliquer la réforme sur le texte, tout en conservant l’intégra1ité de la page d’origine.
Pour ce faire, nous avons procédé comme suit :

1. Le prétraitement est réalisé sans projection : W’ = W o Hid 0 Tag o Pre.

2. Le résultat du prétraitement est dupliqué, et la projection est appliquée sur la copie uni-
quement : W7’, = 7r; (W’

3. L’ étape de segmentation du texte en unités, sous la forme de machines a états ﬁnis conser-
vées dans un vecteur, est appliquée aux deux versions, la bruitée et la projetée.

4. La désambigiiisation morphosyntaxique et l’application des rectiﬁcations orthographiques
sont réalisées sur le vecteur correspondant a la version projetée, 

5. A la ﬁn du traitement, un alignement entre les deux versions du texte est réalisé, de ma-
niere a contenir a la fois la totalité de la page initiale, et les rectiﬁcations introduites dans
le texte. Dans le principe, cet alignement est obtenu comme suit entre les deux versions
du texte :

W” = Best(W’ o  (6)
si ce n’est qu’il est réalisé au niveau des deux vecteurs d’unités :

W” = Best(VW: [1] o VW7/r[1]) - .. . - Best(VW: o VW74 (7)

Recto / Verso

3.5 Le module de conversion
3.5.1 Description de l’algorithme

L’ algorithme consiste en un parcours recursif des differentes couches de la structure de donnees
remplie par le module de desambigiiisation. Toutes les operations sont realisees au travers de
machines a etats ﬁnis, par composition avec des modeles precompiles. Le niveau o1‘1 tout com-
mence est en fait celui des unites. Le processus de rectiﬁcation n’y est cependant declenche
qu’en presence d’une unite alphabetique, et se deroule en deux etapes.

La premiere etape traite successivement les differentes formes composees (comp) de l’unite.
Pour rappel, a ce stade de l’analyse, une forme composee est un niveau de la structure de
donnees, mais peut en realite ne contenir qu’une forme simple. Le traitement realise a ce niveau
differe en fonction de la categorie de la forme, et seuls les determinants et les substantifs sont
concernes. S’il s’agit d’un determinant, son nombre (Number) est conserve pour un emploi
ulterieur. S’il s’agit d’un substantif, le systeme tente de lui appliquer les regles de rectiﬁcation,
relatives aux mots composes et aux mots etrangers, qui sont contenues dans un lexique :

LFmn(Comp) ..Fmn(Number)) o fsmRectoLexicon (8)

C’est ici que le nombre du dernier determinant rencontre intervient, puisqu’il est utilise pour
preciser au lexique si la forme traitee est au singulier ou au pluriel. Qu’il y ait eu rectiﬁcation
ou pas, cette etape se terIr1ine par la concatenation de la forme composee a la machine a etats
ﬁnis representant l’unite complete.

La seconde etape concerne l’unite complete (fsmunit) et est realisee sous la forme d’une cas-
cade de deux compositions :

fsmUnit o fsmRectoRule o fsmMarkRule (9)

A ce stade, les mots etrangers et les mots composes concernes par la reforme ont deja ete
traites. Toutes les autres rectiﬁcations sont encore a appliquer, ce qui est fait dans la premiere
composition de la cascade. La deuxieme composition de la cascade n’applique plus de regles
de rectiﬁcation, mais insere, autour des formes modiﬁees, les balises <span> qui permettront le
formatage du texte et l’afﬁchage des bulles informatives lors de la lecture de la page dans un
navigateur. Ces balises s’inserent autour de toutes les rectiﬁcations, y compris celles realisees
sur les mots etrangers et les mots composes.

L’ algorithme se termine par la creation et l’impression (dans un ﬁchier de sortie) de la chaine de
caracteres correspondant a l’unite. C’est a ce moment qu’est realise le post-traitement HTML
decrit en 3.4, 011 un alignement permet de combiner dans le texte de sortie a la fois les rectiﬁca-
tions realisees et les informations non linguistiques qui appartenaient a la page initiale.

3.5.2 Deux modes de gestion des rectiﬁcations

On le constate dans l’algorithme, les mots composes et les mots etrangers a rectiﬁer sont geres
a l’aide d’un lexique, alors que les autres rectiﬁcations sont gerees par des regles de reecriture.
Voici les justiﬁcations de ce choix.

Utilisation d’un lexique. Qu’il s’agisse des mots etrangers ou des mots composes, il est pos-
sible d’en dresser une liste exhaustive. En ce qui concerne les mots etrangers, il est bien evident

R. Beaufort, A. Dister, H. Naets, K. Macé, C. Fairon

que leur nombre est a priori inﬁni. Cependant, les seuls mots étrangers qui seront reconnus
comme tels et sans erreur sont ceux recensés dans les lexiques utilisés. Dans le cadre de la cam-
pagne, ces lexiques ont bien sﬁr été complétés.

En ce qui conceme les mots composés, ceux concemés par les rectiﬁcations sont de la forme
« porte-avion » (verbe + nom) et « sans-papier » (préposition + nom). Il est de ce fait possible
d’exprimer l’ensemble des mots composés que le systeme peut rencontrer, sous la forme de
l’expression réguliere suivante :

({PREP}|{VERBE}) - "—" - {NOM} (10)

ou {PREP} représente l’ensemble des prépositions du lexique, {VERBE} correspond aux formes
verbales qui peuvent participer a la création d’un mot composé, et {NOM} fait reference a l’en-
semble des substantifs du lexique. Grace au compilateur utilisé, il est possible de décrire des
lexiques dont les formes acceptées en entrée sont réécrites en sortie. En voici un exemple :

garde—chasses<SG> —> garde—chasse

garde—chasse<PL> —> garde—chasses (11)
ou <SG> et <PL> indiquent respectivement que le mot est singulier ou pluriel. Ceci permet d’évi-
ter de devoir décrire des regles de réécriture plus ou moins lourdes, dont chacune ne s’applique-
rait, au ﬁnal, qu’a une forme du lexique. Les différentes combinaisons possibles autorisent plus
de 3 millions de mots composés potentiels (354 verbes / prépositions X 92 778 noms), compilés
en 25,7s et représentés sous une machine a états ﬁnis compacte de 466 Ko.

Utilisation de régles. Les autres rectiﬁcations nécessitent des regles de réécriture pour l’une des
deux raisons suivantes. Soit le nombre de formes concernées est potentiellement inﬁni. C’est
le cas des regles concernant l’accent circonﬂexe. Soit la regle nécessite la connaissance d’un
contexte postérieur a la forme a modiﬁer, et indescriptible sous la forme d’un lexique. C’est
le cas, par exemple, de la regle « laissé + inﬁnitif », qui implique de repérer, a l’aide d’une
expression réguliere, l’inﬁnitif qui serait présent dans le contexte droit du participe.

3.5.3 Insertion des balises <span>

Si les machines a états ﬁnis ont de nombreux avantages, elles présentent cependant un incon-
vénient majeur : elles ne facilitent pas l’identiﬁcation d’un symbole de l’alphabet qui aurait été
réécrit par l’un ou l’autre regle. Dans une machine, tous les symboles sont égaux. Il est des lors
difﬁcile de repérer qu’une regle de réécriture a été appliquée.

Le compilateur que nous avons utilisé (cf. point 3.1) propose un mécanisme permettant de
résoudre cette difﬁculté. I1 autorise l’utilisation de marqueurs, symboles extérieurs a l’alphabet
utilisé, que l’on peut insérer dans une regle de réécriture aﬁn d’identiﬁer un phénomene et d’en
suivre 1’ evolution.

Dans notre cas, les marqueurs ont été exploités comme suit. Nous avons déﬁni un couple de
marqueurs par regle de rectiﬁcation. Par exemple, [RU1] et [RU1END] pour la regle concernant
le pluriel des mots composés, le premier indiquant le début d’une rectiﬁcation, et le second en
indiquant la ﬁn. Ceci étant fait, voici comment se réécrit une ligne du lexique :

garde—chasse<PL> —> garde—chasse [RU1] s [RU1END] (12)

Grace a la présence de ces marqueurs, l’insertion des balises <span> a été fortement simpliﬁée.
En effet, les regles précisent maintenant qu’en présence de marqueurs de ce type, il faut d’une

Recto / Verso

part introduire une balise globale autour de la forme complete :
<span class="recto">garde-chasse[RU1]s[RU1END]</span> (13)
et d’autre part réécrire les marqueurs, en les replacant par le nom de la regle correspondante :

<span class="recto">garde—chasse<span class="rule1">s</span></span> (14)

4 Evaluation du systéme

Robustesse et nombre d’articles traités. Lors du lancement de 1’app1ication, quelques bugs
ont causé plusieurs fois l’arrét brutal du systeme. Une rapide analyse nous a perIr1is de les trou-
ver et de les corriger, de sorte que l’application a traité, sans arrét du systeme, plus de 1 000 000
de textes au cours de la Semaine de la langue francaise en fete (mi-mars 2009). L’ action, de-
puis, continue. En effet, la presse partenaire, convaincue par la stabilité de l’application et ayant
surtout constaté une augmentation de la consultation des articles en ligne, a souhaité conti-
nuer de proposer ce service a ses lecteurs. C’est ainsi qu’a l’heure o1‘1 ces lignes sont écrites,
Rectol Verso a traité plus de 7 000 000 d’articles, soit environ 3,2 articles/seconde.

Performances et taille des articles traités. L’ application a été installée sur 4 serveurs pourvus
d’une distribution Ubuntu Server J eOS 8.04.1, d’un processeur 3 GHz et de 2 048 Mo de RAM.
Elle traite 20 000 caracteres/seconde lorsque le traitement peut rester déterministe (absence ou
faible présence d’éléments non linguistiques), et tombe au minimum a 10000 caracteres/se-
conde en cas d’indéterIninisme fort (forte présence d’éléments non linguistiques).

Les articles traités ont une taille moyenne de 3 500 caracteres, ce qui nous donne un traitement
moyen de 170 ms. La plupart des textes oscillent entre 200 et 4 500 caracteres, 2% des textes
se situent entre 15 000 et 30000 caracteres, et 1 texte sur 50 000 environ dépasse les 60000
caracteres.

Qualité de l’analyse. Toutes les formes concernées par les Rectiﬁcations publiées au Journal
ofﬁciel sont traitées par notre logiciel, hormis punch (la boisson) qui s’écrit désormais ponch
conformément a la prononciation. En effet, notre systeme ne propose pas de désambigiiisation
sémantique, et il ne nous était pas possible de distinguer la boisson de son homonyme (au sens
de « dynamisme »).

Lors d’une révision manuelle de 1 000 articles, nous avons constaté a deux reprises que les noms
propres (Nivelles, Capelle), homographes de formes concemées par la réforme (tu nivelles, il
capelle), avaient été mal analysés et modiﬁés a tort. Ce sont les seules erreurs que nous ayons
eu l’occasion d’observer.

5 Conclusions

Dans cet article, nous avons présenté Rectol Verso, un systeme dédié a l’application de la nou-
velle orthographe, spécialement développé dans le cadre de la Semaine de la langue francaise
en Belgique. Pour étre acceptée par la presse et bien accueillie par le public, l’application devait
étre rapide, simple et intégrer une dimension pédagogique. Nos développements ont taché d’at-
teindre ces objectifs. L’ application, réalisée a l’aide de machines a états ﬁnis, traite entre 10 000

R. Beaufort, A. Dister, H. Naets, K. Macé, C. Fairon

et 20 000 caracteres/seconde selon le taux d’éléments non linguistiques contenus dans le texte.
Le service web, de type SOAP, accepte des pages HTML complexes et y modiﬁe les formes
concernées par la réforme, sans altérer le reste de la page. Les feuilles de style et les scripts
J avascript, enﬁn, facilitent l’identiﬁcation des rectiﬁcations réalisées et permettent l’afﬁchage
d’infobulles explicatives.

Ceci ayant été Inis en place, il restait a attendre le retour du public, dans le cadre de la campagne
de sensibilisation. Recto/ Verso a intéressé les lecteurs des quotidiens en ligne, qui l’ont testé
massivement. La demande des journaux de maintenir le systeme sur leur site est d’ailleurs la
preuve la plus tangible de cet intérét du public pour la « nouvelle orthographe ».

Remerciements

Cette recherche a été partiellement ﬁnancée par le projet « Vocalise », dans le cadre du pro-
gramme FIRST Post-Doc de la Région wallonne (convention 716619), ainsi que par le Service
de la langue de la Communauté francaise de Belgique.

Nous remercions Noémi Boubel, Bernadette Dehottay et Sophie Roekhaut, pour leur interven-
tion dans la constitution de certaines ressources linguistiques, et Olivier Blanc, pour les conseils
qu’il nous a donnés lors de l’étab1issementdes principes de l’architecture client/ serveur.

Références

BEAUFORT R. (2008). Application des Machines a Etats Finis en Synthese de la Parole. Se’lec-
tion d’unite’s non uniformes et Correction orthographique. PhD thesis, Faculté d’Informatique,
Facultés Universitaires Notre-Dame de la Paix, Namur, Belgique. 605 pages.

BEAUFORT R., DUTOIT T. & PAGEL V. (2002). Analyse syntaxique du francais. Pondération
par trigrammes lissés et classes d’ambigu'1'tés lexicales. In Actes des XXI W Joume’es d’Etudes
sur la Parole (JEP’02), p. 133-136.

FONTENELLE T. (2006). Les nouveaux outils de correction linguistique de Inicrosoft. In P.
MERTENS, C. FAIRON, A. DISTER & G. PURNELLE, Eds., Actes de la 135 conference sur
le traitement automatique des langues naturelles (TALN’06), volume 1, p. 3-19, Louvain-la-
Neuve : Presses Universitaires de Louvain.

GOOSSE A. (1991). La « nouvelle » orthographe, Expose’ et commentaires. Louvain-la-
Neuve : Duculot.

KUICH W. & SALOMAA A. (1986). Semirings, Automata, Languages, volume 5 of EATCS
Monographs on Theoretical Computer Science. Berlin, Germany : Springer-Verlag.

MCNAUGHTON R. & YAMADA H. (1960). Regular expressions and state graphs for automata.
IRE Transactions on Electronic Computers EC, 9(1), 39-47.

MOHRI M. (1996). On some applications of ﬁnite-state automata theory to natural language
processing. Journal of Natural Language Engineering, 2, 1-20.

E. ROCHE & Y. SCHABES, Eds. (1997). Finite-State Language Processing. Cambridge,
Massachusetts : MIT Press.

