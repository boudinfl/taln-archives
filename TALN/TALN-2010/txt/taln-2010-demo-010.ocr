TALN 2010, Montreal, 19-23 juillet 2010

Text-it/ Voice-it
Une application mobile de normalisation des SMS

Richard Beaufort Kevin Mace Cedrick Fairon
CENTAL, Universite catholique de Louvain, 1348 Louvain-la-Neuve, Belgique
{richard.beaufort,kevin.mace,cedrick.fairon} @uclouvain.be

Resume. Cet article presente Text-it/ Voice-it, une application de normalisation des SMS pour tele-
phone mobile. L’ application permet d’envoyer et de recevoir des SMS normalises, et offre le choix entre
un resultat textuel (Text-it) et vocal (Voice-it).

Abstract. This paper presents Text-it/ Voice-it, an application that makes it possible to normalize
text messages directly from mobile phones. The application allows the user to both send and receive
normalized text messages, and gives the choice between a textual (Text-it) and a vocal (Voice-it) result.

M0tS-CléS 2 SMS, normalisation, application, plugin, serveur.

Keywords: Text messages, normalization, application, plugin, server.

1 Introduction

Depuis la ﬁn des annees ’90, les fournisseurs de telephonie mobile proposent a leurs utilisateurs de com-
muniquer en s’envoyant des messages ecrits : les textos ou SMS (du nom du service lui-meme, Short
Message Service). Comme le constatent Fairon et al. (2006), les SMS s’ecartent signiﬁcativement des
conventions orthographiques. Si bon nombre de ces ecarts peuvent certainement étre qualiﬁes de fautes
d’orthographe, la majorite, pourtant, releve plut6t de la strategie de codage, voire du cumul de strategies.
Les utilisateurs experimentes, par exemple, n’hesitent pas a combiner jeux et transcriptions phonetiques
(‘demain’ —> ‘2mI ’), squelettes consonantiques (‘t0uj0urs’ —> ‘tjrs’), ou separateurs incorrects, manquants
et abusifs (‘j esper’ pour ‘j’espere’) au sein d’une meme sequence (‘j’cr0ib1kcv’ pour ‘je crois bien que ya
va ’). Quelles qu’en soient les raisons, ces ecarts par rapport aux conventions orthographiques compliquent
la gestion automatique des SMS par des applications telles que la synthese de la parole (a destination, par
exemple, des personnes malvoyantes ou des automobilistes) et la recherche d’informations (par exemple,
l’extraction automatique de rendez-vous a ajouter a l’agenda).

Dans un tel contexte, on peut des lors faire l’hypothese que la normalisation des SMS, c’est-a-dire la
reecriture des SMS en une orthographe plus conventionnelle, deviendra, dans un avenir proche, une etape
a part entiere du processus de communication par SMS.

Text-it/Voice-it a ete congu dans cette perspective : l’application permet d’ajouter la normalisation des
SMS aux fonctionnalites deja presentes sur le telephone portable. Le systeme se divise en deux parties :
un serveur et un plugin. Le serveur, invisible pour les utilisateurs, realise la normalisation. Le plugin,
installe sur le telephone mobile, donne acces a un certain nombre d’options de normalisation et commu-

R. BEAUFORT, K. MACE, C. FAIRON

nique avec le serveur de normalisation. L’ application permet aussi bien d’envoyer que de recevoir des
SMS normalisés, et offre le choix entre deux résultats : le texte normalisé (Text-it) ou la synthese vocale
correspondante (Voice-it). L’ algorithme de normalisation a été présenté dans le détail dans Beaufort et al.
(2010) auquel nous renvoyons le lecteur.

Cet article s’organise comme suit. Aﬁn de faciliter la compréhension du fonctionnement du systeme dans
son ensemble, nous commencons par présenter en section 2 le plugin installé sur le mobile, avant de
présenter le serveur en section 3. La démonstration proposée dans le cadre de la conférence est ensuite
brievement décrite en section 4.

2 Le plugin

Le plugin est encore en cours de développement et n’est actuellement ﬁnalisé que pour les smartphones
utilisant le systeme d’exploitation Android. L’objectif est cependant de le décliner pour le plus grand
nombre de plateformes possible. A terme, le plugin sera téléchargeable sur des sites web spécialisés dans
la distribution d’applications pour téléphones mobiles, tels que l’Apple Store et l’Andr0id Market.

Une fois installé, le plugin autorise deux modes de fonctionnement : en réception et en émission. Le mode
reception permet a l’utilisateur de recevoir des SMS normalisés. I1 peut étre conﬁguré au travers d’une
interface (ﬁgure la) qui donne acces a un certain nombre d’options :

— Activer : cochée, cette option assure que le plugin se déclenche a la réception d’un nouvel SMS.

— Auto text-it : par défaut, le plugin demande conﬁrmation avant de normaliser un SMS recu (ﬁgure lb).

Lorsque cette option est cochée, la normalisation est réalisée d’ofﬁce et afﬁchée a l’écran.
— Message original : cette option cochée, le SMS original est afﬁché en plus du SMS normalisé (ﬁgure lc).

a tn rir m revey, tyx memport e }SpR 1 jr

    

~'In:nn"Iri'i'n ati _

te,:‘t Conﬁrmation text-it
I

Message original
:iIu

. '_  |'Cil'|':I_|I'|.EI| Ecun:

Ncrmalisatiun du SMS regu ?

Normallser Annuier

Inform ions

A pro 05 de text-it ®

Irr'u:nr' 2| u:un-_'-

   

(a) Panneau de ([1) Demande de (c) Aﬁﬁchage du
conﬁguration conﬁrmation SMS normalise’

FIG. 1 — Quelques interfaces du plugin.

Text-it/ Voice-it

Actuellement, nous employons la bibliotheque de synthese de la parole foumie par Eyes-free
(http://code.goog1e.com/p/eyes—free/). La vocalisation d’un SMS est donc réalisée directement
sur le telephone, a partir du SMS normalisé, et est accessible a l’utilisateur via un bouton de l’interface
d’afﬁchage (ﬁgure 1c). A terme, par contre, nous prévoyons d’utiliser le systeme de synthese présenté
dans Beaufort et al. (2010), aﬁn d’améliorer la détection et la phonétisation des unités linguistiques (URL,
numéros de téléphone, etc.) présentes dans le message a synthétiser. La synthese sera alors réalisée sur le
serveur, ce qui préservera la batterie du téléphone.

Le mode émission est en cours de développement. Il permettra d’envoyer des SMS normalisés. Dans
l’ensemble, la fonctionnalité devrait fortement ressembler a l’envoi d’un SMS standard, si ce n’est que
l’utilisateur devra spéciﬁer le type de message : textuel (Text-it) ou vocal (Voice-it). Une fois le texte rédigé,
le plugin l’enverra au serveur pour normalisation, et attendra le résultat pour l’envoyer au destinataire. Un
message textuel (Text-it) sera bien sﬁr envoyé sous la forme d’un SMS. Le format d’envoi d’un message
vocal (Voice-it), par contre, reste encore a déﬁnir. Il pourrait s’agir d’un MMS ou d’un depot sur la boite
vocale du destinataire.

3 Le serveur

Le plugin communique avec l’application installée sur le serveur au travers d’un service web constitué de
deux parties : un client et l’application en elle-méme. Lorsqu’un plugin fait une requéte de normalisation,
un client spéciﬁque est créé, soumet une requéte a 1’ application, en attend la réponse et la renvoie au plugin.
Pour gérer l’ensemble des interactions possibles entre les clients et l’application, nous avons utilisé des
« pipes nommés ». Sous Linux, un pipe nommé fonctionne comme un pipe d’entrée/sortie classique, si ce
n’est qu’il porte un nom qui l’identiﬁe de maniere univoque. Ceci offre plusieurs avantages :

1. Plusieurs processus peuvent accéder au meme pipe nommé (écriture/lecture multiple).

2. Les pipes nommés se gerent comme des ﬁchiers standard. Les écritures simultanées sont donc trai-
tées de maniere séquentielle, ce qui évite les risques de mélange de données.

3. Un pipe nommé peut étre ouvert en mode bloquant : tout processus qui y accede en lecture est des
lors bloqué tant qu’aucune information n’y est écrite, ce qui réduit la consommation CPU.

4. Un processus peut utiliser plusieurs pipes nommés, en entrée et/ou en sortie.

L’ architecture présentée en ﬁgure 2 proﬁte directement de ces avantages :

1. L’ application possede un seul pipe d’entrée, ou tous les clients écrivent. Elle traite séquentiellement
les requétes dans l’ordre d’arrivée, et se met en mode d’attente (pipe bloquant) des que le pipe est
vide. Une requéte est un nom de ﬁchier contenant un SMS. L’application lit donc le nom dans le
pipe, ouvre le ﬁchier correspondant et traite le SMS qu’il contient.

2. L’application possede un pipe d’erreur commun, qui lui permet de signaler a tous les clients actifs
qu’un probleme qui les concerne tous s’est produit (par exemple, une impossibilité de se charger).

3. Tout client crée deux pipes qui lui sont propres, et les ouvre en lecture. L’ application, de son coté,
ouvre les deux memes pipes en écriture. Le premier pipe est un pipe de sortie qui permet d’écrire le
nom du ﬁchier-résultat produit par le traitement. Le second pipe est un pipe d’erreur qui permet a
l’application d’indiquer si une erreur est survenue lors du traitement du ﬁchier déposé par le client.

4. Lorsque le client a recu les résultats attendus, il supprime les pipes qu’il a créés et renvoie le résultat
(texte ou son) vers le plugin (et donc le téléphone) qui l’a appelé.

R. BEAUFORT, K. MACE, C. FAIRON

5. Lorsque l’application recoit une demande d’arret, elle supprime ses pipes d’entree et d’erreur avant
de s’arreter.

Par souci de robustesse et aﬁn de securiser le service, nous avons developpe un module de surveillance,
dont le principe est illustre en ﬁgure 3. Ce module realise trois operations :

1. Il veriﬁe la presence de l’application en memoire vive (ﬂeches pointillees). Si 1’ application a disparu,
le systeme de surveillance la relance.

2. Il veriﬁe que l’application fonctionne correctement (ﬂeches pleines). Le test est realise en four-
nissant a l’application un ﬁchier dont le temps de traitement est connu. Si l’application ne repond
pas dans les temps requis, un embouteillage est en cours et l’application ainsi que tous les clients
associes sont interrompus. L’ application est ensuite relancee.

3. Lorsque l’application est relancee 3 fois sans succes, le module de surveillance redemarre la ma-
chine, se relance lui—meme et initialise l’application en memoire.

 

PIPE

DTNTREE APPLICATION ' ' "I
COMMUN |
I
I
CUENT CLIENT CLIENT PROCESSUS MEMOIRE I
1  n :
D'ERREUR :
COMMU .
PIPE DE PIPE PIPE DE PIPE PIPE DE PIPE I
SORTIE D'ERREUR SORTIE D'ERREUR SORTIE D'ERREUR ‘

CLlENT1 CLlENT1 CLIENT... CLIENT... CLlENTn CLlENTn

I I I I I I
FIG. 2 — Architecture du serveur. FIG. 3 — Module de surveillance.

4 La démonstration

Dans le cadre de la session de demonstration, nous proposons de tester l’application Text-it/Voice-it en
mode reception. Les participants qui le souhaitent auront l’occasion d’envoyer leurs propres SMS vers un
smartphone equipe du plugin.

Si une connexion SSH est disponible sur le lieu de la conference, il sera egalement possible d’observer le
traitement realise sur le serveur.

References

BEAUFORT R., ROEKHAUT S., COUGNON L.-A. & FAIRON C. (2010). Une approche hybride traduc—
tion/correction pour la normalisation des SMS. In Actes de la Conference sur le TraitementAut0matique
des Langues (TALN’I0). A paraitre.

FAIRON C., KLEIN J. R. & PAUMIER S. (2006). Le langage SMS .' etude d’un corpus informatise’ £1
partir de l’enquéte Faites don de vos SMS 61 la science. Presses Universitaires de Louvain. 136 pages.

