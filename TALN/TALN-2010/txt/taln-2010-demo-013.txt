TALN 2010, Montreal, 19-23 jui11et2010

LEOPAR, un analyseur syntaxique pour les grammaires d’interaction

Bruno Guillaume, Guy Perrier
INRIA Nancy-Grand Est - LORIA - Nancy-Université

Résumé. Nous présentons ici l’analyseur syntaxique LEOPAR basé sur les grammaires d’interaction
ainsi que d’autres outils utiles pour notre chaine de traitement syntaxique.

Abstract. We present the parser LEOPAR which is based on the Interaction Grammars formalism.
We present also other tools used in our framework for parsing.

M0tS-CléS I Analyse syntaxique, grammaires d’interaction, polarités.

Keywords: Parsing, Interaction Grammars, polarities.

Introduction

Les grammaires d’interaction (Guillaume & Perrier, 2010) sont un formalisme grammatical qui place la
notion de polarite’ au coeur du mécanisme de composition syntaxique. Les objets de base d’une grammaire
d’interaction sont des fragments d’arbres syntaxiques sous-spéciﬁés qui sont décorés par des polarités. Ces
polarités expriment l’état de saturation du fragment concerné et sa capacité d’interaction avec d’autres
fragments. La composition syntaxique consiste alors a superposer partiellement ces fragments d’arbres
pour saturer leurs polarités et obtenir un arbre unique completement spéciﬁé o1‘1toutes les polarités auront
été saturées.

L’ opération de superposition d’arbres est plus générale que les opérations habituelles dans les grammaires
d’arbres comme les TAG et elle permet donc de mieux abstraire et de factoriser un certain nombre de
constructions syntaxiques. Cependant les grammaires a large couverture restent nécessairement tres am-
bigués. Avec les ressources actuelles pour le francais, l’ambigu'1'té moyenne par mot est de l’ordre de 7,
c’est-a-dire qu’il y a en moyenne 7 descriptions d’arbres différentes a considérer pour chaque mot d’une
phrase et donc que le nombre de combinaison a considérer pour une phrase de N mots et de l’ordre de 7 N .

Les outils que nous avons développés ont pour but de valider le formalisme en permettant d’écrire des
ressources a large échelle et de les tester. Ainsi l’analyseur LEOPAR dans sa version actuelle est concu
pour construire, a l’aide d’une grammaire et d’un lexique, toutes les analyses possibles d’une phrase en
entrée. Compte tenu de cet objectif, nous n’avons pas développé de méthodes statistiques pour l’anal-
yse syntaxique dans les grammaires d’interaction et nous utilisons peu d’heuristiques lors des analyses.
Nous nous sommes essentiellement intéressés a la mise au point de méthodes exactes de désambiguisation
lexicale.

BRUNO GUILLAUME, GUY PERRIER

1 La cha'1‘ne de traitement

La chaine de traitement de LEOPAR est décrite par la ﬁgure ci-dessous :

  

Res sources linguis Iiques

 
   
 
 

Lexique

   
  

  

Régles de segmenlalion Arbres synmgmatiques

  

Automate dc
descriptions d'arb1e

 

 
  

  

Crrammaire source Structures en dépendances

  

Le compilateur de grammaires XMG1 est un outil de développement de grammaires a large couverture,
pour lesquelles le maintien de la cohérence est une tache particulierement difﬁcile. XMG est fondé sur
la distinction entre grammaire source et grammaire objet. La premiere est écrite par un humain dans un
langage de haut niveau sous forme de classes combinées par conjonction ou disjonction. Ensuite, XMG
compile cette grammaire source en un grammaire objet directement utilisable par un systeme de TAL.

Le compilateur de lexiques LEXICOMP permet de compiler des lexiques extensionnels sous forme d’au-
tomates compacts et rapides d’acces. Chaque forme ﬂéchie est décrite a l’aide d’hypertags qui regroupent
les informations syntaxiques et morphologiques.

Le segmenteur en mots TOKTOK permet de segmenter en mots une phrase. Il utilise les informations du
lexique et représente l’ambigui'té a l’aide d’automates acycliques.

L’ancrage de la grammaire dans le lexique utilise la notion d’hypertag. A chaque arbre produit par
XMG est associé un hypertag qui décrit les contraintes d’ancrage qui se fait alors par uniﬁcation avec les
informations lexicales.

Le ﬁltrage avec les polarités (Bonfante et al., 2004) utilise la saturation des polarités comme principe
controlant la composition syntaxique. Ce principe est utilisé pour la désambiguisation lexicale : on peut
éliminer les choix lexicaux qui ne sont pas globalement neutres.

Le ﬁltrage avec les dépendances (Bonfante et al., 2009) repose sur le fait que chaque arbre initial est une
structure insaturée qui attend d’interagir avec un autre arbre pour créer une dépendance. On peut calculer
statiquement sur la grammaire objet une matrice de contraintes; celle-ci permet, pour une phrase donnée,
de supprimer les choix lexicaux qui n’ont pas de possibilité de se saturer dans la phrase considérée.

L’analyse profonde recherche de facon exhaustive l’ensemble des modeles pour lesquels l’analyse de
gauche a droite ne laisse pas un nombre trop grand de polarités non résolues. La recherche se fait incre-
mentalement par fusion successives de noeuds.

2 La mise en aeuvre de LEOPAR

En plus d’une interface par ligne de commande, l’analyseur offre une interface graphique de dialogue avec
l’utilisateur. Cette interface permet de piloter l’analyse mais aussi de Visualiser les ressources lexicales
et grammaticales, ce qui est tres utile pour le débogage. Sous une forme ou sous une autre, l’interface

1. XMG (Duchier et al., 2004) est librement disponible sous licence CeCILL (http : / / source sup . cru . f r/ xmg)

LEOPAR

utilisateur fournit différents parametres qui permettent de personnaliser l’utilisation de l’analyseur.

L’analyse peut étre effectuée de facon totalement automatique ou selon un mode manuel. Dans ce cas,
c’est l’uti1isateur qui effectue la sélection lexicale et qui ensuite choisit, a chaque étape de l’analyse,
les noeuds a fusionner. Une fenétre interactive permet de Visualiser l’état d’analyse a chaque étape et de
revenir éventuellement en arriere pour la reprendre différemment. Comme il est expliqué dans Marchand
et al. (2009, 2010), les saturations utilisées lors de l’analyse permettent également de déduire une structure
en dépendances.

Notre chaine de traitement a été utilisée pour produire FRIGRAM, une GI du francais a large couverture.
La plupart des constructions grammaticales du francais sont couvertes, et parmi elles, un certain nombre
qui sont non triviales : coordination, extraction avec "pied piping" et barrieres, négation . . . La grammaire
objet, dans son état actuel, contient 2 670 arbres élémentaires sous-spéciﬁés non ancrés issus de 359 classes
de la grammaire source.

La grammaire a été testée sur la TSNLP du francais (Test Suite for Natural Language Processing). Le
fait que notre grammaire soit fondée sur des connaissances linguistiques lui assure une bonne précision
et liIr1ite la surgénération : 88% des 1 300 phrases grammaticales sont analysées correctement et 85% des
1 600 phrases non grammaticales sont rejetées par notre grammaire.

3 Exemple

Considérons la phrase : « Un e’leve qui est lent £1 comprendre est découragé par le travail. »

La ﬁgure ci-dessous montre les résultats obtenus par les différentes méthodes de ﬁltrage. Avant tout
désambigu'1'sation, chaque mot a en moyenne 7.34 structures possibles (soit 7 .3412 = 24 X 109 sélec-
tions lexicales a considérer). Chacune des deux méthodes de ﬁltrages permet de diminuer fortement cette
ambigu'1'té moyenne (2.63 pour les polarités et 2.90 pour les dépendances) mais surtout, elles sont tres
complémentaires tant en temps de ﬁltrage qu’en termes d’ambigu'1'té (au ﬁnal une ambigu'1'té moyenne de
1.53, c’est-a-dire seulement 168 sélections lexicales a considérer).

 

Faute de place, seul le format en structure de dépendances est illustré ci-dessous pour notre exemple. Il
est intéressant de noter qu’on obtient plus que des dépendances de surfaces : en traits discontinus, par
exemple, on note que le nom e’leve est le sujet de l’inﬁnitif comprendre.

subj

passlv
X

obj
dcl subj subjaur aobj obj agl dcl
' u
-
cl n

UI1 eleve qui est lent 51 comprendre est décourage par le travail
dct ‘n pro \' adj prcp \' an V prcp d

~ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .v

BRUNO GUILLAUME, GUY PERRIER

4 Perspectives

De fagon évidente, LEOPAR n’est pas actuellement opérationnel pour traiter de gros corpus comme ceux
en jeu dans la derniere campagne d’évaluation PASSAGE 2. LEOPAR n’est pas congu pour faire de l’anal-
yse robuste, il ne foumit donc aucune information partielle pour des phrases qui ne sont pas grammaticales
au sens de notre grammaire. De plus, LEOPAR n’utilise pas de statistiques, il fait une recherche exhaustive
parmi les nombreuses ambiguités possibles pour une phrase d’un corpus; les méthodes de désambigu'1'-
sation développées permettent d’analyser des phrases d’environ 20 mots mais nous ne pouvons pas pour
l’instant analyser les phrases plus longues.

Les deux points sur lesquels nous travaillons actuellement sont, d’une part, le développement de méthodes
d’analyses syntaxiques robustes et, d’autre part, la développement d’analyses sémantiques a partir des
structures produites par l’analyseur (Bonfante et al., 2010).

Remerciements

Nous tenons a remercier Paul Masson qui a largement contribué au développement des outils présentés
ici.

Références

BONFANTE G., GUILLAUME B. & MOREY M. (2009). Dependency constraints for lexical disambigua-
tion. In proceedings of I WPT 09, Paris, France.

BONFANTE G., GUILLAUME B., MOREY M. & PERRIER G. (2010). Réécriture de graphes de dépen-
dances pour l’interface syntaxe-sémantique. In Actes de TALN 10, Montreal, Canada.

BONFANTE G., GUILLAUME B. & PERRIER G. (2004). Polarization and abstraction of grammatical
formalisms as methods for lexical disambiguation. In CoLing’2004, 2004, p. 303-309, Geneva, Switzer-
land.

DUCHIER D., LE ROUX J. & PARMENTIER Y. (2004). The metagraInInar compiler : A NLP Applica-
tion with a Multi-paradigm Architecture. In Second International Mozart/Oz Conference - MOZ 2004,
Charleroi, Belgium.

GUILLAUME B. & PERRIER G. (2010). Interaction Grammars. Research on Language and Computation
(a paraitre).

MARCHAND J ., GUILLAUME B. & PERRIER G. (2009). Analyse en dépendances a l’aide des gram-
maires d’interaction. In Actes de TALN 09, Senlis, France. poster.

MARCHAND J ., GUILLAUME B. & PERRIER G. (2010). Motifs de graphe pour le calcul de dépendances
syntaxiques completes. In Actes de TALN 10, Montreal, Canada.

2.http://atoll.inria.fr/passage/eval2.fr.html

