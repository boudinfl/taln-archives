TALN 2011, Montpellier, 27juin — l"'ju1'11et 2011

Vers une prise en charge approfondie des phenoménes iteratifs par
TimeML

J ulien Lebranchu, Yann Mathet
Université de Caen Basse-Normandie, UMR 6072 GREYC, F-14032 Caen, France
Prénom.Nom@unicaen.fr

Résllnlé. Les travaux menes ces dernieres armees autour de l’iteration en langue, tant par la communaute
linguistique que par celle du TAL, ont rnis au jour des phenomenes particuliers, non reductibles aux represen-
tations temporelles classiques. En particulier, une iteration ne saurait structurellement etre reduite a une simple
enumeration de proces, et du point de vue de l’aspect, met en jeu sirnultanement deux visees aspectuelles inde-
pendantes. Le formalisme TimelVIL, qui a vocation a armoter les informations temporelles portees par un texte,
integre deja des elements relatifs aux iterations, mais ne prend pas en compte ces demieres avancees. C’est ce que
nous entreprenons de faire dans cet article, en proposant une extension a ce formalisme.

Abstract. The work that has recently been done concerning the iterative phenomena in language, which was
performed by the linguistic and TAL communities, has illuminated speciﬁc phenomena, not reducible to classical
time representations. In particular, an iteration can not structurally be reduced to a simple listing of process, and
involves simultaneously two independent referred aspectual. The TimelVIL formalism, which aims to annotate
temporal information of a given text, includes already relative elements to iterations but does not take into account
recent advances. That is the reason why in this paper, we propose to extend this formalism.

M0tS-CléS 3 TimeML, discours, semantique, phenomenes iteratifs.

Keywords: TimeML, discourse, semantics, iterative phenomena.

1 Introduction

Le travail que nous menons actuellement se place dans le contexte de la semantique temporelle, et plus precisement
dans celui des phenomenes iteratifs en corpus. Si plusieurs etudes linguistiques se sont attachees a decrire les
mecanismes iteratifs autour de la proposition ou de la phrase, nos travaux se positionnent quant a eux au niveau
du discours (reperage des donnees iteratives au sein d’un texte, determination de l’etendue de chaque iteration,
etc., cf. (Lebranchu, 2009)). C’est dans ce contexte que nous nous attachons a determiner le plus precisement les
informations temporelles et iteratives d’un texte, et que nous portons un interet particulier a TimeML.

L’iteration en langue est un phenomene menant a la construction de differents proces repartis dans le temps et
consideres comme etant la repetition d’un meme evenement. De fagon typique, ce phenomene peut se manifester
a partir d’ une seule proposition telle que « Nous sommes allés 7 fois :2 la montagne. » ou le proces << nous aller a la
montagne » est itere par l’adverbe de quantiﬁcation << 7 fois ». Elle peut etre circonscrite a une seule proposition,
mais peut aussi s’etaler sur plusieurs propositions ou phrases, successives ou non, comme dans l’exemple qui suit.

Chaque lundi matin, le brocanteur qui logeait sous I ’alle’e étalait par terre ses ferrailles. Vers
midi, au plus fort du marche’, on voyait paraitre sur le seuil un vieux paysan de haute taille. Peu de
temps aprés, c’e’tait Liébard, le fermier de Toucques, [. . .]

Ainsi, le circonstanciel chaque lundi matin declenche l’iteration du proces << le brocanteur étaler par terre ses
ferrailles », a raison d’une fois par semaine sur une certaine periode. Les deux propositions << Vers midi, . . ., on
voir paraitre », et << Peu de temps apres, ce étre Liebard » sont elles des constituants de cette iteration, qu’elles
viennent successivement enrichir. Nous noterons en revanche que la subordonnee (qui logeait sous I ’alle’e) n’est
pas incluse dans l’iteration.

Aﬁn de representer les informations liees aux phenomenes iteratifs, nous avons opte pour ISO-TimelVIL (ci—apres
TimeML), un formalisme XML deﬁni par Lee et al. (2007), dont 1’ obj ectif est d’ annoter des textes avec 1’ ensemble
de leurs informations temporelles. Il permet d’annoter les unites linguistiques realisant des proces, les expressions
temporelles, les relations aspectuelles, temporelles ou de subordination qui peuvent exister entre evenements et
expressions temporelles ainsi que les marqueurs de ces relations.

JULIEN LEBRANCHU, YANN MATHET

TimeML offre cependant une prise en charge assez limitee des phenomenes iteratifs, et l’objet de cet article
est donc d’enrichir ce formalisme en consequence. Nous exposons dans la section 2 les entites necessaires a la
representation dans notre approche des phenomenes iteratifs. La section 3 presente une introduction a TimeML,
ses enj eux, sa facon actuelle de formaliser des iterations, et en etudie les limites. Enﬁn nous exposons a la section 4
nos propositions d’extension de ce formalisme.

2 Tour d’horizon des phénoménes itératifs en langue

La litterature sur les phenomenes iteratifs est principalement orientee vers la source de ces phenomenes. Citons
notamment les travaux de Condamines (1990) sur les subordonnees temporelles qui font une distinction entre la
phrase simple et la phrase complexe a subordonnee temporelle. Plus recemment, Lim (2002) a etudie la notion de
frequence en francais, en presentant de facon approfondie les differents mecanismes mis en place dans les pheno-
menes iteratifs. Nous orientons nos travaux selon deux approches complementaires, une approche aspectuelle et
une approche orientee objet, que nous allons brievement presenter.

L’approche aspectuelle se fonde sur le modele de la semantique de la temporalite (ci—apres « SdT») en francais
de Gosselin (1996). Ce modele neo—Reichenbachien integre les differents parametres explicatifs de la temporalite
verbale en francais. Il repose sur une representation du temps linguistique au moyen d’une ligne temporelle et
quatre intervalles temporels, dont en particulier l’intervalle de reference qui en constitue la pierre angulaire. Il
propose un ensemble de regles permettant de rendre compte des phenomenes linguistiques lies a la temporalite,
en se basant sur deux concepts linguistiques 2 le temps qui situe le proces dans le passe, le present ou le futur,
et l’aspect qui precise la facon dont est presente le proces. Le traitement des phenomenes iteratifs se fonde sur
les memes principes mais un nouveau concept a ete introduit pour pouvoir representer les iterations 2 la serie
iterative. Elle est concue comme un macro—proces englobant une serie d’occurrences d’un meme element itere,
ce dernier etant considere comme « modéle » (ou prototype) de chacun des iteres. Un aspect important de ce
dispositif est qu’il permet de rendre compte du fait que l’iteration peut faire l’objet, simultanement, de deux
visees aspectuelles eventuellement differentes, comme dans « Depuis deux mois, il mangeait en dix minutes. », ou
la visee est aoristique sur le proces modele, et inaccomplie sur la serie (d’ou la compatibilite de circonstanciels
apparemment contradictoires 2 en dix minutes evalue la duree du proces modele, tandis que depuis deux mois, porte
sur le debut de la serie et le moment considere). Cette approche a fait l’objet d’adaptations a d’autres langues et
notamment 1’ anglais.

La seconde approche, qui a une visee cognitive, propose une Modelisation Objet des Phenomenes Iteratifs (MOPI),
cf. (Mathet, 2007). En particulier, la notion de modele iteratif (comprenant un ou plusieurs proces modeles) servant
de support a l’iteration, et le processus menant a l’instanciation multiple de ce modele en differents iteres (la serie
iterative evoquee supra) ont ete modelises de facon orientee objet. Par ailleurs, la notion d’Iterateur rend compte
des elements declencheurs d’une iteration (comme par exemple un circonstanciel), et sont repartis en 4 classes 2
les iterateurs calendaires (tous les jours, le jeudi, ...), les iterateurs frequentiels (souvent, rarement, parfois, ...),
les iterateurs quantiﬁcationnels (3 fois, a cinq reprises, .. .), et les iterateurs evenementiels qui correspondent aux
subordonnees temporelles.

 

Modéle Lteratif

 

FIGURE 12 Le modele iteratif aller 61 la montagne et ses iteres.

Parallelement, en plus de l’iteration, le modele distingue une seconde structure iterative 2 la selection. Les se-
lections, via un selecteur (adverbe de frequence, ...), viennent selectionner certains iteres d’une iteration aﬁn
d’enrichir ou de modiﬁer ces derniers. Dans « Nous sommes allés 7 fois 61 la montagne. Parfois, des amis nous ont
accompagnés », le proces modele aller 61 la montagne est repete par le declencheur quantiﬁcationnel. Puis s’opere
une selection, rattachee a l’iteration du proces precedent, qui se voit enrichie du proces modele des amis nous
accompagner. Notons qu’une selection constitue elle-meme une iteration au sens ou elle est constituee d’iteres
provenant d’un meme modele.

A la lumiere de ces etudes, nous souhaitons donc que soient prises en charge les informations iteratives suivantes 2

VERS UNE PRISE EN CHARGE APPROFONDIE DES PHENOMENES ITERATIFS PAR TIMEML

— le modele de l’iteration (l’iterant) ;

— la serie associee (les iteres) ;

— la visee aspectuelle propre au modele d’une part, et a la serie d’autre part;

— les iterateurs et la categorie a laquelle ils appartiennent;

— la notion de selection operant sur une iteration.

La Figure 2 presente autour d’un exemple un certain nombre de ces informations.

type : pmcés type : pmcés

, . tc :’ arfat tc :’ rfa’t tv zcirconstancicl
typezdcclcnchcurcalcndam: ‘"95 ‘“‘P 1 mps unpa 1 _p(:

yalcur : lundi matin

. . . . . yalcur: inacoompli
IlCI'€||]0Il I I101] IlCI'€||]OIl I 0|]! \
haque lundi maIin,1e brocanleur qui ooeail sous 1‘a11ee elalai par terre ses ferrailles. Vers midi au plus fort du marche’, on

yalcur : inaccompli valcur : aoristiquc \ alcur : midi mm 3 smc

       
      

 
     

'0 an araitr sur le seuil un vieux paysan de haule taille. Peu de temps apres élail I iebard, le fermjer de Toucques, 
type 'pmc¢s , V .
temps ; imparfail type :ciroonswncic1 ‘W 'P‘,°°°5 ,
Valcur : aoﬁsﬁquc V 81¢“, : pcu dc [Cmps aprés lcmps . unparfzut

yalcur ' aoristjquc

iteration : oui , , ,
IlCl'Z.|lIOIl : oul

FIGURE 2: Structures de traits relatives aux informations temporelles.
3 TimeML

Presentation

TimeML est le fruit d’un groupe de travail dirige par James Pustejovsky qui vise a standardiser les annotations
semantiques ayant trait a la temporalite dans un texte en langage naturel. Originellement, il fut concu pour re-
pondre a quatre problemes lies a l’annotation des evenements et des expressions temporelles 2 l’identiﬁcation
d’un evenement et son ancrage dans le temps, l’ordonnancement des evenements les uns par-rapport aux autres
(ordonnancement lexical ou discursif), le raisonnement sur des expressions temporelles en prenant en compte le
contexte (la semaine derniére) et le raisonnement sur la persistance des evenements (combien dure un evenement).
Le guide d’annotation issu des premiers travaux est tourne vers l’anglais, mais les elements du standard sont a
priori independants de la langue consideree. Il existe notamment des travaux sur l’italien ou encore sur le coreen,
et, plus recemment, un guide d’annotation pour le francais a ete elabore (Bittar, 2010).

Les entités de TimeML

Actuellement, aﬁn de couvrir l’essentiel des informations temporelles que l’on peut associer a un texte, le standard
prevoit les fonctionnalites suivantes 2 l’annotation des evenements, l’etiquetage des expressions temporelles et
la normalisation de leurs valeurs, ainsi que la mise en evidence des relations aspectuelles, temporelles ou de
subordination qui peuvent exister entre ces deux types d’entites temporelles. Le standard propose trois types
d’entites annotables 2 les adverbiaux (TIMEX3), les eventualites (EVENT), et les signaux (SIGNAL).

Les TIMEX3 representent les expressions temporelles, et sont ordonnees selon quatre classes 2 les dates (le 23 mars
2011, 23/03/2011, . . .), les heures (I 1 H29, le matin, . . .), les durees (4 jours, deux ans er demi, .. .) et les ensembles
(armuellement, le jeudi, ...), correspondant respectivement aux types DATE, TIME, DURATION et SET. Il est
possible d’annoter les expressions temporelles comme l ’arme’e prochaine, le lundi précédent dont les valeurs sont
speciﬁees par rapport un autre point de reference. Les EVENT correspondent aux evenements d’un enonce dans
une acception large puisque integrant les etats. On retrouve cette acception dans differents travaux sous la notion
d’eventualite (Vendler, 1967), ou encore proces que nous reprenons a notre compte. Ces proces sont marques
textuellement soit par un verbe soit par un nom, et sont classes selon une ontologie predeﬁnie composee de 7
classes 2 occurrence (la plupart des evenements), etat, action ou etat intensionnel (ceux—ci supposent un second
evenement qui ne se realise pas necessairement, comme dans je voudrais qu ’z'l vierme), action d’enonciation ou de
perception (dire, reveler, entendre, voir, . . .) et les aspectuels (commencer, ﬁnir de, continuer, .. .). Le formalisme
permet de distinguer l’evenement lui-meme de sa realisation en attribuant un identiﬁant a l’evenement et un a
l’instance. L’entite EVENT permet egalement de representer les informations telles que le temps grammatical,
la forme (nom, verbe, adjectif), l’aspect (Progressive, Imperfective, Perfective,. . .) ou encore la presence d’une
negation. Enﬁn, la balise SIGNAL sert a identiﬁer une forme (generalement une preposition) marquant une relation
temporelle entre evenements et localisations temporelles, telle que aprés dans l’exemple Il viendra aprés le 3 avri l.
Le standard prevoit, en plus des entites, la formalisation des relations existantes entre ces entites. Ces relations
sont de trois types 2 TLINK, representant les relations temporelles entre des evenements, des marqueurs temporels

ou entre l’un et l’autre (ces relations sont issues des travaux d’Allen (1983) sur les intervalles, entre autres la
succession, l’ante’rz'0rz'te’ et le recouvrement); ALINK, representant les relations entre les verbes aspectuels et

J ULIEN LEBRANCHU, YANN MATHET

les événements auxquels ils referent; et SLINK, introduisant les relations entre deux instances d’événements.
L’ exemple suivant presente une annotation TimeML de la phrase « Bill veut enseigner le lundi »

Bill <EVENT eid="el” eiid="eil" class=”I_STATE" pos="VERB" tense="PRESENT” aspect="NONE"
polarity="POS">veut</EVENT> <EVENT eid=”e2” eiid=”ei2” Class="OCCURRENCE" pos="VERB"
aspect="NONE” tense="NONE" vform="INFINITIVE" polarity="POS"> enseigner</EVENT>

<TIMEX3 tid=“tl“ type=“SET“ value=“XXXX—WXX—l“> le lundi</TIMEX3>

<TLINK eventInstanceID=”ei2” relatedToTime=”tl” relType=”IS_INCLUDED"/>

<SLINK eventInstanceID=”eil” relType=”INTENSIONAL" subordinatedEventInstance=”ei2"/>

Les itérations dans TimeML

Actuellement, le standard représente les iterations au niveau d’un evénement, c’est-a-dire via l’entite EVENT
en renseignant l’attribut CARDINALITY. De plus, il est egalement possible de créer l’ensemble des instances en
cream 11 entites. Le standard formalise les selections d’une sous—série d’evenements en utilisant les cardjnalités
respectives des entités EVENT et une relation TLINK de type INCLUDES ou IS_INCLUDED. Quant aux declen—
cheurs, il est uniquement possible d’annoter des << quantiﬁcateurs », via l’entite EVENT, et des << calendaires »,
par l’entité TIMEX. Dans ce dernier cas, l’entité TIMEX représente l’ensemble des unites temporelles décrivant
l’expression temporelle. L’ exemple ci—dessus presente l’annotation d’une iteration dont le déclencheur calendaire
est << le lundi », represente par le patron << }O(X—WXX—l » associe a TIMEX.

Les limites actuelles

Compte—tenu de ce que nous venons de presenter, les limites de Ti1neML relativement aux phenomenes itératifs
sont de deux ordres.

Premierement, il n’y pas de distinction entre l’instance d’un evenement et l’instance d’une iteration, hormis l’at-
tribut cardinality. Or, nous avons montre qu’il est possible d’affecter des valeurs aspectuelles djfferentes a la serie
iterative et au proces. De plus, il est nécessaire de determiner si le rattachement d’un proces se fait au niveau de
l’iteration (J ’allais souvent a la mer. C’e’tait des moments magniﬁques.) ou de l’evenement (Marie tomba plusieurs
fois en tachant d ’atteindre la barriére, puis parvint a la franchir.).

Deuxiemement, le standard, par choix des concepteurs, ne permet pas de prendre en compte les adverbes de
frequences (<< rarement », << souvent », .. .) ou bien les conjonctions de subordination (<< quand », << lorsque », « a
chaque fois que », . . .), c’est—a-dire les itérateurs de type << frequentiel » et << événementiel ». De plus, le formalisme
de representation des expressions temporelles n’est pas complet. Il ne permet pas de couvrir des expressions telles
que << Un mardi sur deux », << tous les troisiemes mardis du mois », << trois jours ouvrables », ou encore << le 4eme
des 6 jours de campagne ».

4 Extension de TimeML aux phénoménes itératifs

Nous allons proposer dans cette section un certain nombre d’extensions au standard Ti1neML relatives aux phe-
nomenes itératifs. Pour distinguer du standard TimelVIL les extensions que nous proposons, nous avons choisi
d’ utiliser l’espace de nom « iteration » qui precede les entités que nous introduisons. Nous proposons donc l’entité
ITERATION:STRUCTURE pour les structures itératives, et l’entite ITERATION:TRIGGER pour les declencheurs. 1

4.1 Les structures itératives

Nous proposons de représenter les structures itératives via une entité STRUCTURE dans laquelle nous integrons un
attribut obligatoire TYPE, permettant de distinguer une iteration et une selection. Pour rendre compte de l’ ensemble
des informations necessaires, nous avons les attributs suivants :

— l’attribut STID attribue un identiﬁant a l’entite STRUCTURE;

— l’attribut TYPE permet de distinguer l’itération de la selection («iteration », << selection »);

— l’attribut TRIGGERID permet d’identiﬁer le declencheur associé a la structure ;

— l’attribut ASPECT renseigne la valeur aspectuelle de la structure (aoristique, accompli, inaccompli et prospectif) ;
— l’attribut STRUCTUREINSTANCEID permet de représenter les liens entre deux structures itératives, notamment

dans les cas d’imbrication d’itérations et de selections.

Nous avons montré préalablement qu’une structure iterative est composée de proces. Nous conservons la repre-
sentation existante, c’est—a—dire l’entité EVENT, en lui aj outant un attribut (nommé STRUCTUREINSTANCEID) qui
permet d’identiﬁer la structure iterative a laquelle elle est rattachée. L’ exemple qui suit illustre la representation

1. Par souci dc lisibilité, dans la suite dc Particle, nous ne mentionnons pas l’espace dc noms.

VERS UNE PRISE EN CHARGE APPROFONDIE DES PHENOMENES ITERATIFS PAR TIMEML

des structures itératives, ou nous retrouvons le déclencheur de l’itération 7 fois (dont nous detaillons la balise
TRIGGER dans la suite de cet article), et l’éVénement itére aller a la montagne. Puis le declencheur parfois qui
opere une selection de certains itérés, pour les enrichir du proces modele des amis nous accompagner.

Nous
<EVENT eid=”el” eiid=”eil” aspect=”aoristique” structureInstanceID=”stl">sommes allés</EVENT>

<TRIGGER tid=”tl”...>7 fois</TRIGGER> a la montagne.

<STRUCTURE type=”iteration” stid=”stl" triggerID=”tl” aspect=”aoristique”/>
<TRIGGER tid=”t2”...>Parfois,</TRIGGER> des amis nous <EVENT eid=”e2” eiid=”ei2”
aspect=”aoristique” structureInstanceID=”st2”>ont accompagnés</EVENT>.
<STRUCTURE type=”selection” stid=”st2” triggerID=”t2” aspect=”aoristique”
structureInstanceID="stl"/>

4.2 Les déclencheurs

Nous proposons de créer une nouvelle entité pour couvrir l’ensemble des déclencheurs d’ iterations tels que nous
avons pu les déﬁnir en présentant le modele MOPI. Nous representons donc ces demiers par l’entite TRIGGER a
laquelle est adjoint un ensemble de couples d’attributs et Valeurs pour notarmnent distinguer les djfferents types
de déclencheurs. L’entite est donc composée d’un identiﬁant TRID, d’un attribut TYPE et d’un attribut VALUE
contenant la Valeur portee par le déclencheur analyse qui sont tous trois obligatoires, et en fonction du déclencheur,
nous avons un certain nombre d’attributs optionnels que nous detaillons.

Les déclencheurs aspectuels

Les déclencheurs de type aspectuel, tels que encore, présupposent l’existence d’ autres instances de l’eVenement.
Nous proposons de speciﬁer le nombre d’ itérés au moyen d’un patron simple, correspondant a un nombre mini-
mum de repetitions présupposees suivi du symbole "+". Dans l’exemple suivant, nous avons donc au minimum
deux instances de casser une vitre.

I1 a <TRIGGER tid=”tl” type=”ASP” value="2+">encore</TRIGGER> cassé une vitre.

Les déclencheurs quantiﬁcationnels

Les déclencheurs de type quantiﬁcationnel, pour rappel, correspondent a des syntagmes tels que << a trois reprises »,
<< 5 fois », << quelques fois ». L’ attribut TYPE se Voit affecter la Valeur QUANT, et l’attribut VALUE contient la
Valeur de la repetition portée par le quantiﬁeur. Dans les cas ou la semantique associée au quantiﬁeur n’est pas
precise, comme pour << plusieurs fois », la Valeur VALUE est unspeciﬁed.

Marie tomba <TRIGGER trid=”nl” value=”3" type=”QUANT”>é trois reprises</TRIGGER>.

Nos <TRIGGER trid=”n2” value=”2” type=”QUANT">2 voyages</TRIGGER> a Hawaii furent merveilleux.

Les déclencheurs événementiels

Les déclencheurs événementiels correspondent aux conjonctions introduisant des subordonnées temporelles telles
que lorsque, ti chaque fois que, des que. Nous attribuons la Valeur EV a l’entite TYPE tandis que l’attribut VALUE
spéciﬁe la relation temporelle existant e11tre la subordonnée introduite par le marqueur évenementiel et la propo-
sition principale. L’ exemple suivant illustre une representation du marqueur lorsque qui spéciﬁe une relation de
simultaneité entre les deux propositions, sur l’énonce Lorsque John enseigne at I ’I U1} 1'] dépose d ’abord les enfants
:2 I ’e’cole. Remarquons qu’il existe une contradiction apparente e11tre la Valeur de l’introducteur et la principale qui
s’explique par le fait que le proces principal peut dans certains cas, comme ici avec « John enseigne », etre en fait
une partie seulement d’un scenario itere plus large inferé a partir de ce proces.

<TRIGGER trid="evl” type="EV" value="SIMULTANEOUS">Lorsque</TRIGGER> John

<EVENT eid=”el” eiid=”eil” structureInstanceID=”scil” aspect=”aoristique">enseigne</EVENT>

é l’IUT, <STRUCTURE type=”iteration” structureID=”scil” triggerID=”evl” aspect=”inaccompli"/>
il <EVENT eid=”e2” eiid=”ei2” structureInstanceID=”scil” aspect=”accompli” >dépose</EVENT>

<signal sid=”s2">d’abord</signal> les enfants a l’école.
<TLINK eiid="ei2” relatedToEvent="eil" relType="BEFORE" signalID="s2" />

Les déclencheurs calendaires

Les déclencheurs calendaires sont actuellement représentés par l’entite TIMEX, permettant de formaliser des
formes telles que chaque lundi, tous les jeudis. Cependant certaines expressions ne sont pas exprimables dans
ce formalisme, notaimnent pour des exemples tels que un mardi sur deux, tous les troisiemes mardis du mois.
Par souci d’homogénéité, nous représentons également ces déclencheurs par l’entite TRIGGER, en spéciﬁant le
type par la Valeur CAL et rendant la Valeur SET de TIMEX obsolete, dans le cadre de notre extension. Aﬁn de
couvrir tous les expressions calendaires, nous utilisons la fonnalisation algebrique developpee par P. Enjalbert et
G. Becher (A paraitre) qui possede un ensemble de mécanismes permettant de calculer les series associées a une
expression calendaire iterative. La fonction permet d’ obtenir la serie correspondant a la Valeur de l’ attribut VALUE,
et nous obtenons les representations suivantes pour les expressions associées :

J ULIEN LEBRANCHU, YANN MATHET

— un mardi sur deux => SUR(1, 2, MARDI)

— tous les troisiemes mardis du mois => TOUSLESN(3, MARDI)

Par ailleurs, il est possible de se referer temporellement au déclencheur calendaire soit a un niveau global (J ’allais
a la piscine tous les mardis. Maintenant, j ’y vais le jeudi.), soit au niveau modele (Tous lesjeudis, John enseigne
pendant 3 heures puis il va manger au RU.). Aﬁn de distinguer les deux niveaux, nous ajoutons un identiﬁant au
niveau modele, TMID, auquel il pourra etre fait reference.

<TRIGGER trid=”tl” tmid=”tmil” type=”CAL” value=”TousLesN(jeudi)">Tous les jeudis</TRIGGER>,
des habitués venaient faire une partie de boston.

Les déclencheurs fréquentiels

Nous ﬁnissons par la representation des déclencheurs fréquentiels (rarement, parfois, . . .), qui s’avere etre plus
complexe que pour les déclencheurs precedents. En effet, le calcul de la fréquence depend de nombreux parametres
te1s que 1’agent mis en oeuvre dans 1’énonce, le contexte ou bien encore l’action réalisée. Par exemple, dans les
deux exemples suivants : Elizabeth T. s’est souvent marie’e et Elizabeth T. a souvent tourne’ des ﬁlms, 1’adverbe
souvent aura une frequence différente. Dans notre premier exemple, la fréquence est de huit mariages au cours de
sa vie tandis que le second fait reference a 70 toumages. Ce calcul de la fréquence dépasse cependant le cadre de
cet article. Nous proposons donc de representer la valeur semantique associée par une fonction. Dans nos deux
exemples precedents, nous représentons donc la fréquence par la fonction often come suit :

E.T. a<TRIGGER trid=”trl” type=”FREQ” value=”often()”>souvent</TRIGGER> tourné des films.
I
5 Conclusion

Une extension 2 du langage Ti1neML s’est averee necessaire pour une annotation enrichie des phénomenes itera-
tifs. Premierement, pour rendre compte de la double visée aspectuelle, de la serie iterative et du proces ; deuxieme—
ment, pour capturer 1’ ensemble des structures iteratives, iterations et selections ; et troisiemement, pour représenter
les différents déclencheurs existants. De fait, nous avons elabore deux nouvelles entités STRUCTURE et TRIGGER
représentant respectivement les structures iteratives et les déclencheurs. Dans la perspective d’une meilleure inte-
gration, il nous reste a deﬁnir une representation des déclencheurs de type conﬂits comme dans l’exemple « Depuis
deux mois, il mangeait en dix minutes. » que nous avons presente ci—dessus. Actuellement, notre annotation s’est
limitée a quelques articles du journal Le Monde, notre prochaine etape se consacrera donc a réaliser une annotation
sur un corpus plus consequent.

Références

ALLEN J . F. (1983). Maintaining knowledge about temporal intervals. Commun. ACM, 26(11), 832-843.

BITTAR A. (2010). Building a TimeBank for French : A Reference Corpus Annotated According to the ISO-
TimeML Standard. PhD thesis, Universite Paris Diderot (Paris 7).

CONDAMINES A. (1990). Les conjonctions de subordination temporelle en frangais. Cahiers de Grammaires,
15, 25-54.

ENJALBERT P. & BECHER G. (a paraitre). Ite’rations, chapter L’ iteration dans le modele SdT : une formalisation
algebrique.

GOSSELIN L. (1996). Se’mantique de la temporalite’ en francais : un modele calculatoire et cognitifdu temps et
de l’aspect. Duculot.

LEBRANCHU J . (2009). Vers une analyse automatique des phenomenes iteratifs en corpus. In G. WILLIAMS,
Ed., Actes des 6emes Journe’es de la Linguistique de Corpus, Lorient, France : Université de Bretagne—Sud.

LEE K., PUSTEJOVSKY J ., BUNT H., BOGURAEV B. & IDE N. (2007). language resource management —
Semantic annotation framework (SemAF) - Part I : Time and events. Rapport inteme, International Organization
for Standardization, Geneva, Switzerland.

LIM J .—H. (2002). la fre’quence et son expression en francais. Honoré Champion.
MATHET Y. (2007). Une approche cognitive de l’itération et sa modélisation objet. RTE.
VENDLER Z. (1967). Linguistics in Philosophy. Comell U. P.

2. La syntaxe complete associée a1’extension que nous venons de présenter est décrite au sein d’une DTD accessible a1’adIesse :
http://jlebranc.perso.info.unicaen.fr/TimeML/timeml—iter.dtd

