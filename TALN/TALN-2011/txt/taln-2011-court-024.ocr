TALN 2011, Montpellier, 27juin — 1"'ju1'11et 2011

Stratégie d’exploration de corpus multi-annotés avec GlozzQL

Yann Mathetl Antoine Widlocherl
(1) GREYC, UMR CNRS 6072, Université de Caen, 14032 Caen Cedex
{prenom.nom} @unicaen.fr

Résﬂmé. La multiplication des travaux sur corpus, en linguistique computationnelle et en TAL, conduit
a la multiplication des campagnes d’annotation et des corpus multi—annotes, porteurs d’informations relatives a
des phenomenes varies, envisages par des annotateurs multiples, parfois automatiques. Pour mieux comprendre les
phenomenes que ces campagnes prennent pour obj ets, ou pour controler les donnees en vue de 1’ etablissement d’ un
corpus de reference, il est necessaire de disposer d’outils permettant d’explorer les armotations. Nous presentons
une strategie possible et son operationalisation dans la plate-forme Glozz par le langage GlozzQL.

Abstract. More and more works in compuational linguistics and NLP rely on corpora. They lead to an
increasing number of annotation campaigns and multi—a1motated corpora, providing informations on various lin-
guistic phenomena, annotated by several annotators or computational processes. In order to understand these lin-
guistic phenomena, or to control annotated data, tools dedicated to annotated data mining are needed. We present
here an exploration strategy and its implementation within the Glozz platform, GlozzQL.

M0tS-Clés, Keywords: Corpus, Annotation, Exploration, GlozzQL.

1 Besoins en exploration de corpus

De nombreux travaux sur corpus, en linguistique computationnelle et en TAL, donnent lieu a des campagnes d’an-
notation et a la production de corpus multi—a1motes. Pour mieux comprendre les phenomenes que ces campagnes
prennent pour obj ets, pour assister le processus d’ armotation et pour controler son resultat, il est necessaire de dis-
poser d’outi1s et de methodes permettant d’interroger les annotations. Avant d’introduire le langage GlozzQL, qui
en permet l’exploration, nous commencerons par indiquer les caracteristiques des donnees auxquelles il s’applique
et presenter le meta—modele sur lequel il repose.

1.1 Corpus multi-annotés

Apres avoir insiste sur le fait que nous ne visons pas la mise en place d’un environnement dedie a l’etude
d’une conﬁguration linguistique particuliere, mais la deﬁnition de strategies permettant l’exploration combinee
de phenomenes heterogenes, nous pouvons en particulier mettre en avant les proprietes suivantes. Données multi-
annotateurs : Les donnees explorees sont le fruit d’annotations realisees par plusieurs annotateurs. Elles peuvent
porter sur les memes textes et sur les memes objets et on souhaitera souvent pouvoir les confronter. Variete
categorielle : Ces corpus annotes sont porteurs d’informations linguistiques et infra—linguistiques (par exemple
typo—dispositionnel1es) heterogenes correspondant a differents points de vue sur le materiau textuel. Ainsi, par
exemple, on po11rra disposer d’un etiquetage morpho—syntaxique, d’indications de dependance resultant d’une
analyse syntaxique, du reperage d’ occurrences d’ elements de lexiques... Conﬁgurations structurellement va-
riees : Les differents phenomenes armotables relevent de modes de structuration fortement heterogenes. Certaines
approches identiﬁent ainsi, par exemple, des segments textuels (unites morphologiques, entites nommees, seg-
ments thematiques...), la 01) d’autres se concentrent sur l’identiﬁcation de relations entre des obj ets plus ou moins
distants (relations syntaxiques, relations semantiques de coherence...) ou sur la reconnaissance de dispositifs plus
complexes (chaines de coreference, structures enu1neratives...). Granularite variable : Ces differentes structures
operent a des echelles pouvant varier fortement. Si le mot constitue ainsi souvent 1’ echelle elementaire, les a1mota—
tions syntaxiques prendront place a l’echelle de la phrase et les annotations discursives (par exemple thematiques)
pourront deborder les echelles phrastiques. Topologies variees : La distribution des differents phenomenes repond
a des << topologies » variees : parfois juxtaposes, les objets pourront aussi etre imbriques ou se chevaucher.

YANN MATHET, ANTOINE WIDLOCHER

1.2 Exploration de corpus annotés

En quoi l’exploration de corpus annotés peut—elle alors consister ‘.7 Du point de vue de sa ﬁnalité et de ses usages,
disons qu’elle vise souvent a nous assister dans la recherche d’une meilleure comprehension de phénomenes
étudiés. Dans d’autres cas, elle permettra, une fois le phenomene bien connu et annoté, de naviguer entre ses
occurrences, par exemple pour analyser leur population (analyse de fréquence, de correlations...) ou veriﬁer que
les occurrences ont été annotees conformément au modele d’annotation ﬁxé. Dans la plupart des cas, l’exploration
doit nous permettre de valider certaines hypotheses relatives a des phénomenes, ou nous mettre sur la voie de
leur formulation. On po11rra alors distinguer des taches d’exploration, en fonction du degré de supervision dont
elles font l’objet, de la pure << découverte » a la validation d’une hypothese déja ﬁnement formulée. Au—dela
de la diversite des usages, nous proposons de déﬁnir l’exploration de corpus comme la confrontation entre les
données d’un corpus et un modele (eventuellement partiel) de phenomene exploitant des informations disponibles
(données textuelles brutes, annotations prealables, informations typo—dispositionnelles...), modele visant a isoler
les propriétés récurrentes des conﬁgurations visées et pouvant etre aussi peu contraignant que possible dans le cas
de l’exploration ouverte (fouille de texte, certaines approches statistiques...) ou au contraire tres contraint dans le
cas de la validation d’un modele théorique ou opératoire bien établi.

Explorer un corpus c’ est alors exprimer un modele d’un phénomene observe, modele faisant reference aux données
disponibles. L’ expression de ce modele devra s’appuyer sur un formalisme permettant de le décrire, en ﬁxant les
contraintes que devront veriﬁer des conﬁgurations textuelles pour etre regardées comme instances dudit modele.
La question se pose des lors de savoir quel formalisme permettra de procéder a cette description. Pour répondre a
cette question, il est nécessaire d’interroger l’adéquation entre tel ou tel formalisme de representation et telle ou
telle famille de conﬁgurations linguistiques. Pour une méthode d’exploration de corpus dédiée a un phénomene
particulier, on pourra s’appuyer sur un formalisme permettant la representation de conﬁgurations structurellement
homogenes (motifs séquentiels, arbres syntaxiques...). Pour l’exploration combinée de structures hétérogenes, on
s’appuiera idéalement sur un formalisme sufﬁsamment versatile autorisant la representation, dans un langage uni-
ﬁé, d’objets structurellement tres différents. Ajoutons que le choix du formalisme d’interrogation doit également
etre guide, en plus de son expressivite, par sa declarativite et son aptitude a masquer l’appareil procedural qui
prendra en charge l’analyse effective des données.

Se pose également la question de la place que doit occuper l’exploration de corpus au sein du dispositif experi-
mental. Si un usage classique des outils d’exploration est d’étudier un corpus apres aimotation de ce demier, leur
utilisation au sein meme du proces sus d’ annotation peut aussi se révéler pertinente. En effet, l’ annotation manuelle
de corpus consiste souvent a opérer de fagon incrémentale en altemant phases d’observation et d’annotation.

Enﬁn, il est important de preciser que le systeme d’exploration de corpus devra etre couple a un mécanisme de
retour au texte permettant, etant donnée une liste d’occurrences correspondant aux contraintes exprimées, de les
consulter in situ.

1.3 Etat de l’art

Guidée par l’expression d’ un modele, l’exploration de corpus pourra s’appuyer sur des outils dédiés a une famille
tres speciﬁque de conﬁgurations linguistiques. De ce point de vue, tout formalisme d’expression de regles et de
contraintes consacré a un domaine d’étude particulier ou a un paradigme formel particulier, couple a un analyseur
automatiquel, pourrait etre utilise pour une exploration ainsi orientee. Il permet en effet par nature de mettre en
relation des informations préexistantes (par exemple morphologiques) pour découvrir des conﬁgurations d’ordre
supérieur (par exemple syntaxiques) et po11rra donc etre exploité pour interroger le corpus. Toutefois, de tels
dispositifs ont principalement pour obj ectif d’a1moter automatiquement un corpus et ne visent pas prioritairement
a produire des representations synthétiques (liste d’occurrences, concordanciers...). De plus, souvent dédiés a
un type d’objet, il ne permettent pas d’interroger conjointement des elements hétérogenes, pour explorer leurs
eventuelles correlations avec les structures visées. Enﬁn, et plus genéralement, ces structures visées ne pourront
appartenir qu’a des categories restreintes : un formalisme dedié a l’analyse syntaxique ne permettra souvent pas
d’ explorer des structures thématiques ou des chaines de coreférence.

Le besoin d’interroger des données relatives a des phénomenes linguistiques varies et structurellement hétérogenes

1Evoquons par exemple le cas d’Unitex (Paumier, 2003), pour les approches orientées-automates.

STRATEGIE D’EXPLORATION DE CORPUS MULTI-ANNOTES AVEC GLOZZQL

pourra trouver une reponse partielle dans l’utilisation d’ environnements integres d’experimentation et d’ a1mota-
tion automatique tels que GATE (Cunningham et al., 2002), LinguaStream (Widlocher & Bilhaut, 2008), ou encore
UlMA, dans l’utilisation qui en est faite en TAL, par exemple par (Hernandez et al., 2010). De tels environne—
ments reposent en effet sur des modeles d’annotation sufﬁsamment abstraits pour qu’il soit possible de representer
des objets linguistiques varies et de les interroger de maniere uniﬁee, conformement a notre programme. De plus,
ces environnements proposent des formalismes de representation de regles varies (regles sequentielles, automates,
grammaires de contraintes...) permettant d’encoder des modeles linguistiques tres heterogenes, aﬁn de les projeter
sur corpus. S’il est souvent possible, en aval d’une chaine de traitement, de Visualiser et d’ explorer les donnees
annotees, et si les formalismes proposes peuvent etre mis au service d’un travail d’ exploration, il convient cepen—
dant de noter que ces outils sont prioritairement destines a l’annotation automatique et qu’ils exigent un travail de
mise en oeuvre trop important pour la seule exploration de donnees pre—constituees.

D’autres travaux s’orientent davantage vers la mise en place d’ environnements d’ exploration de corpus multi-
annotes. Si CorpusReader (Loiseau, 2008) prend place sur ce terrain de l’exploration de corpus, il convient de
noter qu’il se situe en amont de l’exploration proprement dite, davantage charge de la constitution des observables
que de leur interrogation. I1 vise en effet principalement a integrer des annotations issues de plusieurs niveaux de
description linguistique et d’ analyseurs varies, en prealable de l’etude des correlations entre ces niveaux. Du reste,
la preparation des donnees pour laquelle il a ete initialement pense l’oriente de maniere privilegiee vers des etudes
statistiques, au demeurant non integrees a l’outil lui—meme. La plate—forme Annis (Chiarcos et al., 2008) offre
l’environnement d’exploration de corpus multi—annotes le plus proche de nos preoccupations. Elle s’appuie sur le
modele generique Paula qui permet d’ exploiter des armotations provenant d’outils varies, procedant a des niveaux
d’ analyse eventuellement differents, et est directement operationnelle avec nombre de documents deja annotes.
Elle dispose d’un langage d’interrogation uniﬁe, AnnisQL, qui permet d’adresser des requetes a ces armotations
heterogenes. Cependant, ces travaux privilegient l’interoperabilite et l’interrogation d’annotations preexistantes,
la ou nous souhaitons permettre d’interroger les donnees pendant le processus d’annotation, pour le guider.

2 Cadre théorique et opérationnel

La mulitplicitie des phenomenes linguistiques observables conduit assez naturellement a la multiplicite des mo-
deles, des theories, formalismes et formats permettant d’ en rendre compte. Or nous souhaitons pouvoir etudier de
maniere uniﬁee ces phenomenes heterogenes, pouvoir explorer leurs combinaisons et interactions.

Aﬁn d’uniformiser la representation des phenomenes observables et annotables, nous nous appuyons sur le meta-
modele URS (pour Unite-Relation-Schema), issu de (Wid16cher, 2008), qui propose un cadre theorique abstrait,
non dedie a telle ou telle theorie ou a tel ou tel type d’objet, et permettant consequemment la description de
modeles linguistiques varies. Dans le cadre ﬁxe par le meta—modele, des modeles speciﬁques, relatifs a telle ou
telle theorie, peuvent etre exprimes, en declarant les classes d’obj ets linguistiques identiﬁables et en explicitant la
maniere sont leurs instances doivent etre caracterisees.

1 « inlenace » 2

A M..-

l «interface» l l «inlenace» l l «interface»

Unit Relation Schema

9

FIG. 1 — Diagramme de classes UML du meta—modele URS

Represente par la ﬁgure 1, ce meta—modele repose sur l’articulation de trois categories abstraites d’elements, qui
representent l’ensemble des obj ets manipulables. Ces éléments peuvent etre plus speciﬁquement des unités, des re-
lations ou des schémas. Tous sont caracterises par un type, qui explicite typiquement leur categorie linguistique, et
par un ensemble de traits qui representent leurs proprietes. Les categories manipulables, les traits disponibles pour
un type donne et les valeurs qu’ils peuvent prendre dependent d’un modele d’annotation speciﬁque deﬁni pour
une campagne donnee. La notion d’ unite renvoie a des segments textuels, de taille quelconque : mots, syntagmes,
phrases, segments thematiques... Une relation designe un lien, oriente ou non, entre deux elements. Si les relations

YANN MATHET, ANTOINE WIDLOCHER

entre unites sont les plus utilisees, notons que l’expressiVité du méta—modele autorise également la deﬁnition de
relations portant sur des schemas ou des relations. Relations syntaxiques de dépendance et relations sémantiques
de coherence consituent des exemples bien connus de telles relations. Les schémas peuvent pour leur part etre
utilises pour représenter des conﬁgurations complexes, eventuellement récursives, impliquant une combinaison
quelconque d’élements de plus bas niveau (unites, relations ou schémas imbriqués). Une chaine de coreference
pourra par exemple etre représentée par un ensemble de relations binaires groupées au sein d’un schema dont les
traits caracteriseront la reference commune. Les structures énumératives constituent un autre exemple de struc-
ture complexe exigeant une telle expressivité. Il est important de remarquer que ce meta-modele abstrait peut etre
utilise pour représenter une grande diversite de structures, que celle—ci soient du reste strictement linguistiques
ou non. Ainsi, la structure d’un document (sections, titres...) et les indications typographiques (graisse, italique,
listes...), elements dont on sait l’i1nportance pour l’exploration de certains phenomenes de langue, peuvent etre
encodées sans sortir de ce cadre. Représentees de maniere homogene, toutes les informations disponibles pourront
etre explorées de maniere uniﬁee.

La plate-forme d’annotation et d’exploration de corpus Glozz (Widlocher & Mathet, 2009) utilise ce méta—modele.
La methode d’exploration présentée ci—apres y a été implémentée.

3 Paradigme des contraintes et GlozzQL2

Le paradigme des contraintes offre un cadre adapté a la prise en consideration de l’hétérogénéité des données
evoquées en section 1.13. En effet, ce paradigme permet en particulier de représenter de maniere uniforme des
categories de structures irreductibles les unes aux autres (unites, relations et schémas), pouvant opérer a des
echelles tres Variées, en s’abstrayant si necessaire de leur inscription textuelle effective, de l’ordre des elements
du texte et des distances qui les séparent. Le Langage GlozzQL repose sur ce paradigme4.

3.1 GlozzQL, un langage de requétes incrémental et :71 fort pouvoir expressif

GlozzQL ayant Vocation a etre utilise par un public large, il repose sur des concepts simples et une interface gra-
phique pour la construction des requetes, des assemblages incrémentaux permettant de parvenir progressivement
a l’expressiVité nécessaire. ll repose sur deux concepts interdépendants, la notion de contrainte (Constraint), et
la notion d’annotation contrainte (ConstrainedAnnotation).

Constraint : Une contrainte exprime une condition que doit satisfaire une annotation pour etre sélectionnée. 20
types de contraintes sont prédeﬁnis, couvrant un large spectre de requetes. Certaines contraintes peuvent s’appli-
quer spéciﬁquement a un type d’element particulier (unite, relation, schema), d’autres sont universelles, et enﬁn 3
contraintes portent sur d’autres contraintes aﬁn de les modiﬁer ou de les combiner (Not, Or, And).

Parmi les contraintes universelles, mentionnons notamment Feature qui permet de contraindre des Valeurs de
traits, Author qui permet de contraindre l’identiﬁant de l’annotateur dans le cas de corpus multi-armotés, et
quelques autres qui ont trait a la position relative d’ entités par rapport a d’autres (Distance, After, Before).

Parmi les requetes speciﬁques aux unites, Te1:tContains permet de speciﬁer une sequence de texte que l’entité
doit contenir, Re gE1:p déﬁnit une expression reguliere a laquelle le texte contenu dans l’unité doit se conformer,
tandis que Covers et CoveredBy sont relatives a d’autres unites, et imposent respectivement le fait que l’unite
contrainte recouvre un certain type d’unité, et la réciproque. Par exemple, C 1 = tea:tContains(”isotope”) est
une contrainte portant sur une unite et imposant que cette demiere contienne le texte "isotope".

Concemant les schemas, la contrainte Contains spéciﬁe que ce demier doit contenir un type d’entité particulier,
par exemple une unite contenant le texte "isotope". Cette contrainte est doublement paramétrable, d’une part en
autorisant ou non la recherche en profondeur, d’autre part en contraignant le nombre d’entités concemées.

Enﬁn, deux contraintes sont spéciﬁques aux relations, Start et Target, qui permettent respectivement de speciﬁer

2Manuel ct vidéos dc démonstration dc GlozzQL sont disponibles sur http : / / www . gloz z . org.

3Ce point a été amplement discuté dans (Wid16cher, 2008).

4Selon une autre stratégie d’exploration, assez opportuniste, il est également possible, depuis Glozz, d’exporter simplement les données
annotées vers un SGBDR et de bénéﬁcier dc Pexpressivité et de la puissance dc SQL pour les interroger.

STRATEGIE D’EXPLORATION DE CORPUS MULTI-ANNOTES AVEC GLOZZQL

la source ou la cible d’une relation de fagon similaire a la contrainte Contains des schemas.

Constrained Annotation : De fagon corollaire, on appelle "annotation contrainte" un ensemble d’aimotations sa-
tisfaisant une contrainte donnee. Par exemple, U m't1 : C1 deﬁnit l’ensemble des unites qui satisfont la contrainte
C1, c’est—a—dire qui contiennent le texte "isotope".

Construction incrémentale et interdépendante des Constraints et des ConstrainedAnnotations : Une an-
notation contrainte depend, par deﬁnition, d’une contrainte. La reciproque peut etre Vraie, dans la mesure ou,
comme nous l’aVons Vu, certaines contraintes s’appuient sur des annotations contraintes. C’est par exemple le cas
de 02 = C'ontaz'ns(Um't1), qui est une contrainte exprimant le fait, pour un schema, de contenir une unite de
U m't1, c’est-a-dire contenant le texte "isotope". Pour obtenir l’ensemble des schémas correspondants, il sufﬁt de
déﬁnir l’aimotation contrainte correspondante Schemal : 02. De la sorte, il est possible de construire de fagon
incrémentale des contraintes et des annotations contraintes de plus en plus riches. L’ avantange est double : d’une
part, chaque etape du processus de construction de requetes est élémentaire; d’autre part, chacune de ces etapes
constitue elle—meme un résultat partiel éventuellement intéressant et exploitable en soi (en cherchant tous les sche-
mas contenant une unite contenant le texte "isotope", on a aussi et d’abord trouvé l’ensemble des unites contenant
"isotope").

3.2 Exemple réel de constitution de requétes

Observons un exemple issu d’une cainpagne d’aimotation dans laquelle des schémas appelés SE (structures enu-
mératives) peuvent contenir, entre autres, des unites appelées "amorces". Nous souhaitons accéder d’une part a
tous les schemas comportant une amorce, et d’autre part a tous ceux qui n’en comportent pas.

Constraints Constrained Annotations
‘Constraon Content Scope
Cl TypeName — amorce Any
CZ Contannslunnlr. Leve|—1 rnin—1 max—No Re|:'Schema
C3 NOIICZI Re|:'Schema Annotation Constraint Marches
C4 TYDENEFNE — SE AW Unltl C1-—»TypeName — amorce 6
CS /\ndICZ.C41 Rel/Schenni schema (5_—>AndnCz_(4: 6
C6 AndIC3.C4- Rel/Schenia SchemaZ C6——>An(1IC3.C«<- 1

FIG. 2 — Exemple de construction de requetes GlozzQL

Pour ce faire, comme illustré par la ﬁgure 2, nous créons U m't1 comme l’ensemble des unites de type amorce, qui
s’appuie sur la contrainte C’ 1. Nous créons ensuite la contrainte C2 imposant qu’un schema contienne un element
de U m't1, et sa contraposée 03. Come nous souhaitons obtenir uniquement les schémas de type SE, nous
creons la contrainte idoine C4. 11 reste alors a créer 05 par conjonction de 02 et 04, imposant qu’un schema
soit de type SE et comporte une amorce, et 06 par conjonction de 03 et 04. Nous en tirons respectivement
Schemal et S'chema2, qui repondent au probleme pose. La demiere colonne "Matches" indique pour chacune
des ConstrainedAnnotations quel en est le nombre d’occurrences dans le texte annoté en cours. Rappelons que
par ce processus incremental, nous obtenons des résultats intermédiaires a chacune des etapes, comme U m't1 qui
nous donne l’ensemble des unites "Amorces", au nombre de 6 dans cet exemple.

3.3 Exploration et exploitation des résultats

Navigation : A tout moment, chacune des ConstrainedAnnotations se Voit attribuer l’ensemble des occur-
rences correspondantes dans le texte actif, et un clic sur l’une d’entre elles permet d’acceder a son contenu. Dans
l’exemple de la ﬁgure 3, un clic sur Schemal fait apparaitre dans la fenetre du dessous les 6 occurrences de
schémas concemées (ﬂeche 1 de la ﬁgure 3). Des lors, un clic sur l’une de ces occurrences permet de sélectionner
et d’accéder immédiatement a son contenu dans la fenetre principale (ﬂeche 2 de la ﬁgure 3), ce qui rend possible
son observation dans le texte ainsi que, éventuellement, sa modiﬁcation immediate.

Panier : Un systeme de panier permet de collecter sélectivement des paquets de résultats (par exemple tous les
elements de Schemal et de S'chema2). Il est alors notaimnent possible d’enregistrer le contenu du panier en tant
que nouveau ﬁchier d’aimotation, ou au contraire de demander a ce que les annotations contenues dans le panier
soient supprimees du texte en cours d’ annotation.

YANN MATHET, ANTOINE WIDLOCHER

    
   
    

9‘ E1.':'£;""""‘ ‘

‘ [W4 comliluc probxllilemenl un lnurnunl d;m~ les

 

Annotation Constraint Matches
C1——>TypeName = amorce 6

cxxux dc paix it

I (364.390,97.391,365.392)|D:439
_ (366.394.367.407.368.393.369.41Z.370.411) |D=440
(408.398.371.382.372.39S.373.198.396.199.374,397.20

. (409.37B,399.294.400.379.401l |D=442
In pmx  u pcrnm dc |c\cr mule aunbu-_1u1'lc' xur lu K‘C(!nn‘.l|\.\ ' 2 2 - s_SE(402.3BO.334.403.413.410.338.404) ID=443

FIG. 3 — Exploration des résultats d’une requete GlozzQL au sein du processus d’annotation

Uniﬁcation : Un mécanisme optionnel appele "uniﬁcation", dans le detail duquel nous ne pouvons entrer dans le
cadre de cet article, permet de considérer chaque C'orLstrainedArm0tatiorL comme une Variable entrant dans le
systeme d’équations constitué par l’ensemble des contraintes. De la sorte, il est notamment possible de recher-
cher des conﬁgurations telles que trois unites liees par des relations triangulaires, de chercher toutes les relations
orientées du bas Vers le haut, etc. (ce qui serait impossible par défaut).

Usages de l’outil au sein d’une campagne d’annotation : Les requetes créées avec GlozzQL peuvent étre sauVe—
gardées (dans un format spéciﬁque XML), et des jeux de requetes peuvent donc faire partie integrante du matériau
fourni aux annotateurs d’une campagne donnee. Par ailleurs, le fait de disposer d’un tel outil au sein meme du
processus d’annotation permet notamment 2 1) d’accéder a tout momenta des conﬁgurations particulieres pouvant
servir de base a la suite du processus d’annotation et 2) de controler a tout moment la conformité des annotations
produites. Il sufﬁt pour cela de creer des C'orLstrairLedArmotatz'orLs correspondant a des conﬁgurations interdites
pour la campagne d’annotation en cours.

Références

CHIARCOS C., DIPPER S., GOTZE M., LESER U., LUDELING A., RITZ J. & STEDE M. (2008). A Flexible
Framework for Integrating Annotations from Different Tools and Tag Sets. Revue Traitement Automatique des
Langues (TAL), 49(2), 189-215.

CUNNINGHAM H., MAYNARD D., BONTCHEVA K. & TABLAN V. (2002). GATE 2 A framework and graphical
development environment for robust NLP tools and applications. In Proceedings of the 40th Anniversary Meeting
of the Association for Computational Linguistics.

HERNANDEZ N ., POULARD F., VERNIER M. & ROCHETEAU J. (2010). Building a French—speaking commu-
nity around UIMA, gathering research, education and industrial partners, mainly in Natural Language Processing
and Speech Recognizing domains. In Workshop Abstracts LREC 2010 Workshop ’New Challenges for NLP Fra-
meworks’, p. p64, La Valleta Malta.

LOISEAU S. (2008). CorpusReader 2 construction et interrogation de corpus multiannotés. Revue Traitement
Automatique des Langues (TAL), 49(2), 189-215.

PAUMIER S. (2003). De la reconnaissance de formes linguistiques a l ’analyse syntaxique, volume 2, Manuel
d’Unitex. PhD thesis, Universite de Marne la Vallée.

WIDLOCHER A. (2008). Analyse macro-sémantique des structures rhétoriques du discours - Cadre théorique et
modele ope’ratoire. PhD thesis, Universite de Caen Basse—Normandie.

WIDLOCHER A. & BILHAUT F. (2008). Articulation des traitements en TAL — Principes méthodologiques et
mise en oeuvre dans la plate-forme LinguaStream. Revue Traitement Automatique des Langues (TAL), 49(2),
73-101.

WIDLOCHER A. & MATHET Y. (2009). La plate-forme Glozz 2 environnement d’annotation et d’exploration de
corpus. In Actes de TALN 2009 (Traitement automatique des langues naturelles), Senlis, France 2 ATALA LIPN.

