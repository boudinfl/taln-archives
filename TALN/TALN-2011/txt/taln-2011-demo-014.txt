LOL : LANGAGE OBJET DEDIE A LA PROGRAMMATION LINGUISTIQUE

LOL : Langage objet dédié a la programmation linguistique

Jimmy Ma, Mickael Mounier, Helena Blancafort, Javier Couto, Claude de Loupy

(1) Syllabs, 15 rue Jean—Baptiste Berlier, 75013 Paris, France
{ma, mounier, blancafort, couto, loupy} @syllabs.com

LOL (Linguistic Object Language) est un langage dédié a la description d’objets linguistiques développé
par la société Syllabs. Ce langage s’integre dans une plateforrne industrielle et perrnet aux linguistes
d’écrire des regles d’extraction d’information ainsi que des regles de correction d’étiquetage
morphosyntaxique. Lors de la conception de ce langage, l’idée était de proposer un vrai langage de
programmation qui soit a la fois puissant au niveau de l’expression et a la fois simple a utiliser par des
linguistes. De plus, ce langage perrnet une manipulation de plus haut niveau sans nuire aux performances du
systeme produit.

LOL est un langage declaratif qui permet de Visualiser la langue sous la forme d’un langage de description
de connaissances linguistiques plutot que d’un langage de programmation. LOL est aussi un langage objet
avec des objets prédéﬁnis comme les tokens (mots, prefixes, etc.), les phrases, etc. Les linguistes peuvent
définir leurs propres obj ets, des listes d'éléments, ou des obj ets plus complexes reconnus a l’aide de patrons.
Les speciﬁcations écrites par les linguistes sont interprétées et mises en relation avec l’ensemble des
ressources et outils de base développés par Syllabs (un lexique morphosyntaxique, un segmenteur, un
étiqueteur morphosyntaxique, un guesser). Cette plateforme inclut également un outil de Visualisation en
html. La sortie peut actuellement etre foumie sous format txt, XML ou J SON. Les analyseurs ainsi produits
sont mis a disposition Via des APIs REST (web services) sur les plateformes de Syllabs.

Concernant la manipulation des objets linguistiques, le linguiste manipule des tokens et ses différents
attributs. Il peut ainsi accéder a différentes informations du token: 1) classe du token (mot, url, etc.), 2)
information lexicales et morphosyntaxiques, 3) information graphique (typographie, nombre de caracteres,
etc.), 4) informations sur le guessing (s’il s’agit d’un token inconnu et si oui, s’il a été deviné); 5)
positionnelles pour faire des conditions en fonction de la position dans le texte (ex : debut de phrase ou de
paragraphe). Ci—dessous un exemple de regle de correction et de regle d’extraction.

correcﬁon_rule { extracﬁon_rule {

// correction d’e1reuI [conditions]

//due 91 l’ambigu'1'té Nom-Adjectif !1eft_ﬁlter_potentia]PN I token.c1ass(begin)
[conditions] f: FirstNameCap{ 1,2}

token.POS(D) I token.POS(X) 1: (PREMOD_NOM)? Farni1yNameCap //(token.string("-")? Farni1yNameCap)?
token.POS(A)& token.ambig(N) [actions]

token.POS(Sp) create Person[f,1] : priority(1); conﬁdence = 1.0 {
[actions] ﬁrstname = match[f]
match[2].POS=N lastname = match[1]

} }

Figure 1 : Exemples de régles

Aujourd’hui LOL est utilise dans plusieurs applications industrielles commercialisées, notamrnent pour des
applications basee sur l’extraction d’information (par ex. analyse de tonalite) et pouvant s’intégrer dans un
processus de Veille ou de tagging automatique de textes. Le linguiste peut également utiliser l’outil pour
améliorer l’étiqueteur morphosyntaxique, voire le specialiser sur le corpus du client en jouant sur les
differentes proprietes du token (par ex. : conditions d’application d’une regle en fonction de la classe du
token, la position dans le texte, le contexte et graphie). LOL est indépendant de la langue et est utilise dans
des applications industrielles ou de recherche en 8 langues, dont le chinois et le russe. Nous prévoyons
d’ouvrir la plateforrne de maniere a perrnettre a des utilisateurs de créer leurs propres analyseurs.

