_ _ ACOLAD _ _
Plateforme pour 1’éd1t1on collaboratlve dépendanclelle

Francis Brunet-Manquat et Jéréme Goulian
LIG-GETALP, Université Pierre Mendes France Grenoble 2
Francis . Brunet—Manquat@imag . fr et Jerome . Goulian@imag . fr

RESUME

Cet article présente une plateforme open-source pour l’édition collaborative de corpus
de dépendances. Cette plateforme, nommée ACOLAD (Annotation de COrpus
Linguistique pour l’Analyse de Dépendances), propose des services manuels de
segmentation et d’annotation multi-niveaux (segmentation en mots et en syntagmes
minimaux (chunks), annotation morphosyntaxique des mots, annotation syntaxique des
chunks et annotation syntaxique des dépendances entre mots ou entre chunks). Dans cet
article, nous présentons la plateforme ACOLAD, puis nous détaillons la représentation
pivot utilisée pour gérer les annotations concurrentes, enﬁn décrivons le mécanisme
d’importation de ressources linguistiques extemes.

ABSTRACT

ACOLAD: plat:form for collaborative dependency annotation

This paper presents an open-source platform for collaborative editing dependency
corpora. ACOLAD platform (Annotation of corpus linguistics for the analysis of
dependencies) offers manual annotation services such as segmentation and multi-level
annotation (segmentation into words and phrases minimum (chunks), morphosyntactic
annotation of words, syntactic annotation chunks and annotating syntactic
dependencies between words or chunks). In this paper, we present ACOLAD platform,
then we detail the representation used to manage concurrent annotations, then we
describe the mechanism for importing external linguistic resources.

MOTS-CLES : annotation collaborative de corpus, annotations concurrentes, dépendances
KEYWORDS : corpus collaborative annotation, concurrent annotations, dependencies

1 Introduction

De nombreuses applications de TAL nécessitent de grandes quantités de données
annotées manuellement. La production de ces données est coﬁteuse. D’aut:re part, la
nature et la qualité des annotations 5 produire dépendent trés largement des besoins en
terme d’exploitations futures du corpus (Valli et Véronis, 1999). Pour faciliter la
production de tels corpus, plusieurs outils récents ont été développés parmi lesquels on
peut citer: l’application Web 2.0 System EasyRef développé dans le cadre de l’ANR
action Passage pour annoter des corpus syntaxiques dans les formats Easy et Passage
(Paroubek et al., 2009), l’extension ﬁrefox WebAnnotator qui permet d’annoter des
pages Web selon une DTD définie par l’utilisateur (Xavier, 2012). Ces outils tentent de
résoudre de nombreux problémes liés 5 la création de corpus, en particulier, l’aspect
collaboratif pour EasyRef et l’aspect générique pour WebAnnotator. Dans cet article,
nous nous intéressons 5 2 problémes cruciaux liés 5 l’annotation de corpus: Comment

Actes de la con_fe'rence onjointe JEP-TALN-RECITAL 2012, volume 2: TALN, pages 335-342,
Grenoble, 4 an 8 jun 2012. ©2012 ATAI.A 8: AFCP

335

représenter les annotations concurrentes ? Comment importer et utiliser de maniere
générique des ressources linguistiques externes comme des dictionnaires ou des analyses
morphosyntaxiques ?

Nous tentons avec la plateforme ACOLAD (Annotation de COrpus Linguistique pour
l’Analyse de Dépendances) de répondre a ces questions. Cette plateforme open-source a
été développée avec pour objectif de faciliter la tache d’édition collaborative lors de la
creation d’un corpus de dépendance. Elle propose des services manuels de segmentation
et d’annotation multi-niveaux (segmentation en mots et en syntagmes minimaux
(chunks), annotation morphosyntaxique des mots, annotation syntaxique des chunks et
annotation syntaxique des dépendances entre mots ou entre chunks).

Apres une vue d’ensemble de la plateforme ACOLAD, nous nous focalisons dans cet
article sur la representation pivot utilisée pour gérer les annotations concurrentes et le
mécanisme d’importation de ressources linguistiques externes.

2 ACOLAD, une plateforme pour l’édition de corpus de
dépendances

2 .1 Présentation

L’idée est de proposer sur la meme plateforme une palette de services permettant la
creation de corpus annotés pour les besoins classiques de développement d’outils
linguistiques. Les intérets de notre environnement sont les suivants :

— visualisation et edition graphique simple des annotations (voir ﬁgure 1) ;

- -, r....=.@.....n.u... 
|_A D Edilzur de mum dc divlndlnoa

 

Mes mum

phrueﬂ /fan r......:..‘/?l...:v..n yjxiuxygz

 

Figure 1 : creation d’une analyse de dépendances

— edition manuelle conﬁgurable :

o choix entre différentes granularités d’unités d’annotations (dépendances
entre mots et/ou entre chunks) ;

o possibilité d’utiliser différents jeux d’étiquettes (grammaticales,
syntaxiques au niveau des chunks et des dépendances) pour tenir
compte des spéciﬁcités de chaque corpus (écrit, oral transcrit ou oral
issu de la reconnaissance de parole par exemple) et des besoins en
terme d’exploitation future du corpus ;

336

o choix des contraintes structurelles de dépendances a associer a l’édition
en coursl (projectivité ou non projectivité, analyse totale ou partielle) ;
— possibilité d’éditer simultanément les ambigu'1'tés d’analyse tant au niveau mots,
chunks, qu’au niveau des dépendances syntaxiques.

2.2 Architecture de la plateforme ACOLAD

La plateforme ACOLAD est une application web consacrée au développement
collaboratif de corpus de dépendances. La plateforme est organisée en une architecture
3-tiers classique (voir ﬁgure 2) : une couche de présentation (responsable de l’interface
avec les utilisateurs), une couche de traitement (qui fournit les services) et une couche
données (responsable du stockage des données persistantes).

Plaleforme ACOLAD (Java + GWT + spring roo)

- couche présenlalion couche traitement couche données
T \ Validation des Mm

HTML données chunk

Serveur CS5 Gesnon des Phrase 3) Base de
HTTP Javascript conlribuuons B données
(Apache) Gesﬁon des Umismeur C relatlonnelle

/ requéles Groups
- ssefnon des Inlormalmn

_ T Informations
partagées

 

Figure 2 : architecture générale de la plateforme ACOLAD

Pour utiliser la plateforme ACOLAD, le responsable de la tache d’annotation du corpus
n’a pas a écrire de code spéciﬁque Java ni de pages Web dynamiques spéciﬁques. Il doit
simplement fournir, outre la liste des annotateurs et des modérateurs, une description
du jeu d’étiquettes (sous forme XML) et éventuellement les dictionnaires nécessaires a la
tache (quelques dictionnaires sont déja intégrés, par exemple LEFFF/DELAF pour le
frangais).

3 Représentation pivot pour l’annotation concurrente

La plateforme ACOLAD se base sur une representation par pivot pour distinguer les
differences de segmentation, d’étiquetage et d’annotation dépendancielle.

3.1 Matrice de dépendances (MD)
Toute annotation est décrite, dans notre plate-forme, par une representation matricielle.

Notre representation, nommée matrice de dépendance (MD), est un couple <L, M>
composé de :

— Une liste de noeuds (L), un noeud étant compose d’informations linguistiques

1 Pour le moment il s'agit d'une liste pré-établie de contraintes.

337

relatives aux mots et/ou aux chunksz qu’il decrit ;

Une matrice carree (M) permettant de decrire les dependances entre noeuds
(implementee sous forme de matrice creuse). La case (i, j) contient l’ensemble
des dependances entre le noeud i et le noeud j de la liste de noeuds.

 
   

     

   

COMP/émenl Determinant

4/X

SSS moyens

DeIer 

La recherche

frangaise

perd

Figure 3 : exemple d’analyse de dependances

La MD correspondant a la structure de dependance syntaxique de la ﬁgure 3 est :

L

relallon

M = .
recherche lrancalse perd moyens

la caﬁdeterminant la

recherche caﬁnom

fmncaise caF adjectif recherche

perd caFverbe

ses caFde'Ienninant "a"9a‘5°

moyens caFnom

perd

ses

 

mcyens

Cette representation matricielle des donnees presente trois avantages pour le traitement
informatique :

Maniabilite: de nombreux outils mathematiques sont associes aux matrices :
ajout, suppression, comparaison, etc. Tous ces outils permettent un traitement
simple de l’information contenue dans une matrice.

Efficacite: les methodes utilisant les matrices comme structures de donnees,
telle que la reconnaissance de motifs ou la fusion de matrice, se montrent tres
eff1caces et tres simples a mettre en place.

Simplicite de la description d’analyse multi-niveaux (toutes les informations
peuvent etre presente dans la meme matrice de dependances)

3.2 Annotations concurrentes

Pour illustrer le mecanisme de gestion d’annotations concurrentes d’ACOLAD, nous
prenons comme exemple dans la suite le cas de segmentations multiples. Le principe
consiste a regrouper les noeuds representant la meme segmentation dans la phrase
(information commune minimale). Mais elle consiste egalement a representer les
discordances issues des differentes segmentations des structures et clues, par exemple,
aux mots composes, aux entrees des dictionnaires (Etats Unis ou Etats-Unis), etc.

Pour ce faire, nous creons une structure, appelee reseau de segmentation (RS),
representant les differentes segmentations de la phrase et permettant de lier les noeuds

2 Dans la suite de Particle, on ne traitera pour l'exemple que les relations de dependance entre mots.

338

des structures. Ce réseau peut étre vu comme un « pivot de liaison » entre ces structures.
Ce réseau est un treillis, chaque naeud du réseau représentant une segmentation possible
d’un mot et servant de liaison eI1tre les naeuds des structures de dépendance.
Concretement, un naeud Nrs d’un RS contient deux informations :

— SNODE(Nrs) : intervalles représentant la sous-chaine dans la phrase
correspondant au naeud Nrs, Par exemple, les mots de la phrase « On avait
dénombré cent vingt-neuf candidats » auront pour intervalles : On[1-2],
avait[3-7], dénombré[8-15], etc. Cette information est basée sur les SSTC
(Structured String-Tree Correspondences) proposée par (Boitet et Zaharin,
1988) ;

— L : un ensemble contenant les naeuds des structures liés au naeud Nrs.

Le réseau de segmentation ﬁnal obtenu représente les segmentations possibles et lie les
naeuds des structures entre eux. Une fois que la correspondance eI1tre les naeuds des
structures est établie, la plateforme peut fusionner ces structures pour foumir une
unique représentation de dépendance combinant toutes les informations linguistiques
relatives aux structures (illustré dans la ﬁgure 4).

Sujet Comp Camp Camp
SN _ on avail dénombré cent vingt-neuf candidats
b" 1-2 3-7 8-15 16-19 20-29 30-38
Sujet 16' 9

Camp

 

     
  

Obje!
Figure 4 : exemple d’annotations concurrentes

4 Importer des informations linguistiques extemes

La plate-forme ACOLAD doit étre capable de récupérer des informations linguistiques
provenant d’autres outils (par exemple d’analyseurs lexicaux ou morphosyntaxiques),
c’est-a-dire d’extraire les informations des résultats qu’ils produisent puis de les
interpréter. Nous pensons en effet que cette fonctionnalité doit faire partie intégrante de
l’outil afin de foumir un cadre simple de transformation des données aux utilisateurs
diffusable en tant que « plugin » avec l’outil. Le processus se compose de deux phases :

— La phase d’extraction proprement dite dépendante des analyseurs utilisés ;
— La phase de projection des informations extraites.

4.1 Extraction des informations
Un module d’extraction peut étre généré facilement pour chaque outil exteme. Ce

module permet de lire les ﬁchiers résultats produits, de vériﬁer leurs bonnes
structurations et d’extraire les données linguistiques contenues dans ces ﬁchiers.

339

4.1 .1 Production des modules d’extraction

La production de modules d’eXtraction s’organise en deux étapes. Dans un premier
temps, il faut déﬁnir un ﬁchier de spéciﬁcations qui décrit le format du ﬁchier résultat
produit par l’outil (une grammaire de description). Il faut ensuite enrichir cette
grammaire avec des méthodes3 qui permettent d’eXtraire les données linguistiques
contenues dans les résultats d’analyse. Un module d’extraction peut alors étre produit a
partir de la grammaire et des méthodes.

Chaque module d’eXtraction généré est constitué de deux analyseurs :

— Un analyseur lexical qui convertit une séquence de caractéres provenant du
ﬁchier résultat a analyser en une séquence d’objets, nommés tokens ;

— Un analyseur syntaxique qui consomme la séquence de tokens calculée
précédemment pour vérifier la syntaxe du ﬁchier résultat. Il exécute également
les actions associées a la grammaire.

4.1 .2 Grammaire de description

Une grammaire de description représente le format des ﬁchiers résultats foumis par un
analyseur. Cette grammaire est de type hors contexte et elle est composée de deux
ensembles:

— Un ensemble de tokens, représentant les objets (nombre, chaine, etc.) contenus
dans un ﬁchier résultat ;

— Un ensemble de régles syntaxiques, représentant la syntaxe d’un ﬁchier résultat
en fonction des tokens.

4.1 .3 Grammaire de description enrichie

Pour extraire les données linguistiques présentes dans les ﬁchiers résultats, des
méthodes d’eXtraction sont introduites dans les grammaires de description. Ces
méthodes se présentent sous la forme de procédures insérées dans les régles
syntaxiques. Elles permettent d’eXtraire les données linguistiques. Quand une régle
syntaxique de la grammaire est appliquée, les méthodes correspondantes sont exécutées.
La grammaire ainsi créée est I1ommée grammaire de description enrichie. Nous donnons
ci-aprés un extrait d’une grammaire de description augmentée pour une analyse de
dépendance.

// Régle syntaxique

void RelationDeDependance() (
// Declaration des variables
String etiquette ; Mot motl, mot2 ;

etiquette=<Chaine> "(" mot1=Element() "," mot2=Element() ")"
// oﬁ — Element() est une re le s ntaxi ue retournant an ob et Mot
9 Y q I
// — <Chaine> est un token représentant une chaine

(
// Extraction d’une relation syntaxique avec la
// méthode d’extraction AjoutRelationSyntaXique
phrasecourante.AjoutRelationSyntaxique(etiquette, motl, mot2)

5 Un panel de méthodes est pmposé pour réa1iserl’extraction des inforn-nations ling-uistiques.

340

l
}
void Element() (
<Chaine> "A" <Chaine> "A" ( <Chaine> )+ ( " " <Chaine> ) )? ":" <Nombre>
// <Nombre> est un token representant un_nombre positif
// le + signifie que la chaine peut apparaitre plusieurs fois
// le ? signifie que la chaine peut apparaitre au moins une fois

)

La regle syntaxique précédente s’applique sur chacune des relations de dépendance
extraites de l’analyse faite par l’analyseur XIP de la phrase « La recherche francaise perd
ses moyens. » :

SUBJ(<perd“perdre“+VERB_P3SG:3>,<recherche“recherche“+NOUN_SG:l>)
VARG(<perd“perdre“+VERB_P3SG:3>,<moyens“moyen“+NOUN_PL:5>)
NN(<recherche“recherche“+NOUN_SG:l>,<frangaise“frangaise“+NOUN_INV:2>)
DETERM(<La“le“+DET_SG:O>,<recherche“recherche“+NOUN_SG:l>)

4.2 Projection des données extraites

Aprés avoir extrait toutes les données linguistiques des résultats d’un analyseur, il faut
faire correspondre ces données a une norme commune établie, spéciﬁée en amont en
fonction des jeux d’étiquettes donnés pour la tache d’annotation.

Cette phase peut étre reproduite facilement autant de fois que nécessaire et ainsi
s’adapter aux différentes granularités des jeux d’étiquettes envisagés en fonction des
besoins de la tache.

Pour normaliser les données extraites, un ensemble de regles de projection est déﬁni.
Une regle de projection est constituée d’une partie gauche représentant les données
linguistiques a reconnaitre et d’une partie droite représentant les mémes informations
normalisées. Par exemple, pour les données brutes extraites dans l’eXemple précédent,
les regles instanciables sont“ :

SUBJ($var1, $var2) = Sujet($var1, $var2)
VARG($var1, $var2) ::= Objet($var1, $var2)

NN($var1, $var2) ::= Complement($var1, $var2)
DETERM($var1, $var2) ::= Determinant($var2, $var1

// La relation DETERM est projetee en une relation
// Determinant en modifiant l’ordre relatif des mots

L’eXtraction d’information d’ACOLAD est basée sur les outils développés pour la
plateforme de combinaison d’analyseurs syntaxiques DepAn (Brunet-Manquat, 2005).
L’approche a été expérimentée et validée dans (Brunet-Manquat, 2004).

5 Perspectives

ACOLAD propose des services manuels permettant de segmenter une phrase ou de

produire des analyses de dépendances. Cet environnement est actuellement utilisé pour
produire des analyses de dépendances pour le francais. Mais cet outil, par son

‘ une variable $vari représente soit un mot soit un chunk

341

formalisme de dépendances et son aspect conﬁgurable (choix des jeux d'étiquettes,
choix des contraintes structurelles de dépendances -- en particulier pour tenir compte de
la variabilité de l'ordre des mots selon la langue (Holan, 2000)), a un potentiel
multilingue.

Des expérimentations sont actuellement menées pour intégrer les premiers résultats
d’ACOLAD dans nos travaux sur l’analyse syntaxique automatique et la production de
documents auto-explicatifs (Blanchon et al., 2006).

Les services proposés par ACOLAD pourront également étre intégrés a des
environnements tel que Sect:ra_w, un systeme collaboratif permettant d’évaluer, de
présenter, d’eXploiter et de réviser des corpus de traduction automatique (Huynh et al.,
2008), par exemple pour proposer l’ajout de dépendances syntaxiques.

Enﬁn, ACOLAD po11rra étre proposé dans le cadre de campagne d’évaluation
d’analyseurs syntaxiques de dépendances pour aider a fabriquer les analyses références.

Notre plateforme est proposée a la communauté sous licence publique générale limitée GNU
(GNU Lesser General Public License). Elle sera prochainement disponible a l’url suivante :
https://forge.imag.fr/projects/acolad/.

Références

BLANGHON, H., BOITET, C. AND CHOUMANE, A. (2006). Traduction automatisée fondée sur
le dialogue et documents auto-explicatifs: bilan du projet LIDIA. in TAL. vol. 47(3):30 p.

BRUNET-MANQUAT F. (2005). Improving dependency analysis by Syntactic parser
combination. Proceedings of IEEE NLP—KE 2005, Wuhan, China, Oct 30- Nov 1, 2005.

BRUNET-MANQUAT, F. (2004). CREATION D'ANALYSEURS DE DEPENDANCE PAR COMBINAISON
D'ANALYSEURS SYNTAXIQUES. THESE EN INFORMATIQUE. UNIVERSITE JOSEPH FOURIER - GRENOBLE
1. 21 DECEMBRE 2004. 169 P.

HOLAN T., KUBON, OLIVA K., PLATEK M. (2000). On complexity of word order, in TAL.,
41(1), pp. 273-300, Hermes, Paris, France.

HUYNH C.-P., BOITET C. & BLANGHON H. (2008). SECTra_w : an Online Collaborative
System for Evaluating, Post-editing and Presenting MT Translation Corpora. Proc. LREC—
os, Marrakech, 27-31/5/08, ELRA/ELDA, ed., 8 p.

PAROUBEK P., VILLEMONTE DE LA CLERGERIE E., LOISEAU S., VILNAT A., ET FRANCOPOULO G.
(2009) The PASSAGE Syntactic Representation, 7th International Workshop on Treebanks
and Linguistic Theories (TLT7, Groningen, January 23-24, 2009)

VALLI, A. VERONIS, J. (1999). Etiquetage grammatical des corpus de parole : problémes
et perspectives. Revue Frangaise de Linguistique Appliquée, IV(2), 113-133. (dossier : l'oral
spontané)

XAVIER T. (2012). WebAnnotator, an Annotation Tool for Web Pages. Proceedings of the

8th International Conference on Language Resources and Evaluation (LREC 2012, to
appear). Istanbul, Turkey, 2012.

342

