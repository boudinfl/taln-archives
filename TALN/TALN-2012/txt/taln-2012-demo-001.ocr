Grew : un outil de réécriture de graphes pour le TAL

Bruno Guil1aume1»Z Guillame Bonfante1»3 Paul Masson
Mathieu Morey4’5 Guy Perrier1»3

(1) LORIA — Campus Scientiﬁque — BP 239 — 54506 Vandoeuvre—les—Nancy cedex

(2) INRIA Grand Est — 615, rue du Jardin Botanique — 54600 V1llers—les—Nancy
(3) Université de Lorraine — 34, cours Léopold — CS 25233 — 54502 Nancy cedex

(4) Laboratoire Parole et Langage, Aix—Marseille Université
(5) Linguistics and Multilingual Studies, Nanyang Technological University

RESUME
Nous présentons un outil de réécriture de graphes qui a été congu spécifiquement pour des
applications au TAL. I1 permet de décrire des graphes dont les noeuds contiennent des structures
de traits et dont les arcs décrivent des relations entre ces noeuds. Nous présentons ici la réécriture
de graphes que l’on considére, l’implantation existante et quelques expérimentations.

AB STRACT
Grew: a Graph Rewriting Tool for NLP

We present a Graph Rewriting Tool dedicated to NLP applications. Graph nodes contain fea-
ture structures and edges describe relations between nodes. We explain the Graph Rewriting
framework we use, the implemented system and some experiments.

MOTS-CLES : réécriture de graphes, interface syntaxe-sémantique.

KEYWORDS: graph rewriting, syntax-semantics interface.

1 Réécriture de graphes

Méme si la structure d’arbre est mise en avant pour les modélisations linguistiques, elle est
souvent insufﬁsante, notamment pour les représentations sémantiques. Méme en syntaxe, autour
d’une structure d’arbre, des mécanismes comme la coindexation ou les structures de traits
réentrantes font apparaitre des structures de graphes. Partant de ces observations, pour avoir
un cadre unique d’étude, nous avons pris le parti de considérer toutes ces structures comme des
graphes. Evidemment, un cadre naturel pour décrire les calculs et les transformations sur les
graphes est la réécriture de graphes. En effet, la réécriture est un modéle de calcul qui permet de
décrire n’importe quelle transformation; c’est également un domaine trés actif en informatique
théorique et de nombreux résultats de conﬂuence ou de terrninaison existent.

Par rapport a la réécriture de mots ou de terrnes, la réécriture de graphes est plus délicate et il
n’existe pas de déﬁnition canonique de cette réécriture. Les travaux théoriques, utilisant la théorie
des catégories, décrivent deux types de réécriture (SPO et DPO) ; cependant ces définitions,
mathématiquement élégantes, sont peu pratiques pour écrire effectivement des regles. Nous
avons donc utilisé une autre présentation qui décrit explicitement les transformations a appliquer
au graphe 21 l’aide d’une suite d’actions élémentaires.

Actes de la con_fe'rence conjofnte JEP-TALN-RECITAL 2012, volume 5: Démonstrations, pages 1-2,
Grenoble, 4 an 8 juin 2012. ©2012 ATAI.A 8: AFCP

2 le logiciel Grew

Nous donnons quelques détails et particularités de notre systéme ci-dessous. Plus d’informations
dont disponibles sur le site grew . loria . fr.

Graphes. Les graphes que nous considérons sont composés d’un ensemble de noeuds qui
contiennent des structures de traits non récursives et d’un ensemble d’arcs étiquetés.
Ces arcs codent en fait des relations, ils vériﬁent donc touj ours la contrainte qu’il n’y peut
pas y avoir deux arcs avec la méme étiquette, la méme source et le méme but. Dans les
expérimentations, les relations utilisées sont des dépendances mais le systéme permet d’ex-
primer n’importe quel type de relations (comme la dominance dans un arbre syntagmatique
par exemple).

Régles. Pour manipuler les graphes, nous utilisons des régles de réécriture. Une régle de réécri-
ture est déﬁnie en trois parties : un patron positif qui est un graphe qu’on va chercher ‘a
apparier avec une partie du graphe a réécrire ; un ensemble éventuellement vide de patrons
négatﬁ qui peuvent bloquer l’application de la régle ; une liste de commandes qui décrivent
les transformations a apporter au graphe. Les commandes permettent d’ajouter, de modiﬁer
ou de supprimer des traits, des noeuds ou des arcs.

Modules. Dans les applications, le nombre de regles a considérer peut étre grand (plusieurs
centaines). Pour controler le comportement global du calcul et pour faciliter le développe-
ment et la maintenance d’un systeme, les regles sont réparties dans différents modules. A
l’intérieur d’un module, les régles ne sont pas ordonnées et tous les résultats sont calculés.
En revanche, les modules sont ordonnés et la réécriture de l’ensemble du systéme se fait en
appliquant chaque module sur l’ensemble des résultats du module précédent. Un systéme
de régles organisées en modules s’appelle un GRS (pour Graph Rewriting System).

Interfaces uﬁlisateurs. Le logiciel GREW permet de définir un GRS et de l’appliquer ‘a des
graphes. D’une part, une interface graphique permet de visualiser le détail d’une réécriture :
il est possible de Visualiser l’ensemble des étapes de la réécriture, régle par régle. D’autre
part, il est possible d’appliquer un GRS sur un ensemble de graphes (éventuellement sur un
cluster de calcul) et d’obtenir des statistiques sur l’ambigu'ité du calcul et sur les fréquences
d’ut1'lisation des régles ou des modules.

Notre systéme a été expérimenté (Guillaume et Perrier, 2012) sur des données de tailles réelles :
réécriture de 12 000 graphes a l’aide d’un systéme de 34 modules contenants plus de 400 régles.
Parmi des fonctionnalités récentes, on peut noter la possibilité de paramétrer les régles avec des
informations lexicales et l’ajout un nouveau type de régles qui ﬁltrent les résultats d’un module
pour ne garder que ceux qui respectent certains motifs. Ces deux nouveautés permettent de
mieux factoriser les régles et donc facilitent le développement de plus grands systémes de régles.

Références

GUILLAUME, B. et PERRIER, G. (2012). Annotation sémantique du French Treebank a l’aide de la
réécriture modulaire de graphes. In Actes de TAIN 2012 (Traitement automatique des langues
naturelles), Grenoble. ATA1.A.

