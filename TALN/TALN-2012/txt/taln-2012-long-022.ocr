Annotation sémantique du French 'I'reebank a1’aide de la
réécriture modulaire de graphes

Bruno Guillaumel» 2 Guy Perrier1»3
(1) LORIA — Campus Scientiﬁque — BP 239 — 54506 Vandoeuvre—les—Nancy cedex
(2) INRIA Grand Est — 615, rue du Jardin Botanique — 54600 V11lers—les—Nancy
(3) Université de Lorraine — 34, cours Léopold — CS 25233 — 54502 Nancy cedex
bruno.g'uillaume@loria.fr, g'uy.perrier@loria.fr

RFISUMF.
Nous proposons d’annoter le French Treebank a l’aide de dépendances sémantiques dans le
cadre de la DMRS en partant d’une annotation en dépendances syntaxiques de surface et en
utilisant la réécriture modulaire de graphes. L’article présente un certain nombre d’avancées
concernant le calcul de réécriture utilisé : l’utilisation de regles pour faire le lien avec des
lexiques, en particulier le lexique des verbes de Dicovalence, et l’introduction de ﬁltres pour
écarter a certaines étapes les annotations incohérentes. Il présente aussi des avancées dans le
systéme de réécriture lui-méme, qui a une plus large couverture (constructions causatives, verbes
£1 montée, ...) et dont l’ordre des modules a été étudié de facon plus systématique. Ce systéme a
été expérimenté sur l’ensemble du French Treebank a‘1l’aide du prototype GREW, qui implémente
le calcul de réécriture utilisé.

AB STRACT
Semantic Annotation of the French Treebank using Modular Graph Rewriting

We propose to annotate the French Treebank with semantic dependencies in the framework of
DMRS starting from an annotation with surface syntactic dependencies and using modular graph
rewriting. The article presents some new results related to the rewriting calculus: the use of
rules to make a link with lexicons, especially with the lexicon of verbs Dicovalence, and the
introduction of filters to discard inconsistent annotations at some computation steps. It also
presents new results related to the rewriting system itself: the system has a larger coverage
(causative constructions, rising verbs, ...) and the order between modules has been studied in a
more systematic way. This system has been experimented on the whole French Treebank with
the prototype GREW, which implements the used rewriting calculus.

MOTS-CLES : réécriture de graphes, interface syntaxe-sémantique, dépendances, DMRS.
KEYWORDS: graph rewriting, syntax-semantics interface, dependencies, DMRS.

Introduction

Les résultats présentés dans cet article se situent dans la continuité de (Bonfante et al., 2010, 2011;
Morey, 2011). Le but de ces différents travaux est de produire une annotation sémantique de gros
corpus ‘a partir d’une annotation syntaxique en dépendances. L’annotation sémantique se situe
au niveau de la phrase et elle est réalisée, comme pour la syntaxe, sous forme de dépendances.

Actes de la conférence onjointe JEP-TALN-RECITAL 2012, volume 2: TALN, pages 293-306,
Grenoble, 4 an 8 juin 2012. ©2012 ATAI.A 8: AFCP

293

I.’idée est d’avoir une annotation lisible et minimale, c’est-a-dire évitant tout engagement dans
des choix linguistiques trop pointus, qui susciteraient la controverse. Nous avons choisi comme
cadre formel la DMRS (Dependency Minimal Recursion Semantics) (Copestake, 2009), car elle
répond a ces exigences.

Pour le francais, il existe trés peu de corpus annotés syntaxiquement; le plus grand actuellement
est le French Treebank. Le French Treebank est un corpus de phrases extraites du journal « Le
Monde » qui ont été annotées en constituants (Abeillé et aL, 2003). Ces annotations ont ensuite
été converties en dépendances syntaxiques (Candito et al., 2009) en suivant le format décrit dans
le guide mis au point a cet effetl. C’est ce dernier corpus qui est utilisé ici sous l’abréviation FTB.

Méme si les ambiguités syntaxiques sont levées par l’annotation du FTB, la production des
structures sémantiques est encore ambigué et plusieurs structures DMRS peuvent correspondre a
un seule phrase du FTB.

Les structures DMRS produites font intervenir la notion d’actant sémantique mais les actants
ne sont pas classés selon leur réle. La DMRS n’a pas voulu s’engager par rapport ‘a un choix
particulier de r6les thématiques. Les actants d’un prédicat donné sont simplement distingués
par un numéro et notés arg1, arg2, ... en suivant un ordre d’oblicité syntaxique ﬁxé. Quand le
prédicat est un verbe dans notre application, ces arguments font référence a un lexique externe
qui est Dicovalence (Van den Eynde et Mertens, 2003). Bien que celui-ci soit avant tout un
lexique syntaxique, il dispose d’informations ﬁnes et fait notamment des distinctions de lemmes
en fonction de leur traduction en néerlandais et en anglais; il peut donc étre utilisé comme un
lexique sémantique.

Pour le calcul, le cadre formel que nous utilisons est celui de la réécriture de graphes qui est
motivée par la forme des objets que nous manipulons. En effet, les structures DMRS produites
sont des graphes de dépendances sémantiques. Méme si, en entrée, les structures sont le plus
souvent des arbres de dépendances syntaxiques, pour le calcul de la sémantique, nous avons
besoin de compléter ces arbres avec, par exemple, certains actants syntaxiques des inﬁnitifs et
certains antécédents des pronoms déterminés par la syntaxe. Nous obtenons alors des graphes
dans toute leur généralité, avec des noeuds qui ont plusieurs antécédents et avec des cycles.

Contrairement au cas de la réécriture de termes, il n’y a pas de définition canonique de la
réécriture de graphes. Nous avons choisi une déﬁnition opérationnelle (cf. Section 1) ou la partie
droite d’une regle est décrite par des commandes. Nous l’avons implanté dans un prototype
baptisé GREW2 qui a été utilisé pour l’expérimentation sur le FTB.

Les résultats présentés dans cet article constituent des avancées par rapport aux travaux précé-
dents sur deux plans. D’un part, le calcul de réécriture de graphes a été enrichi par l’introduction
de regles lexicales qui permettent de faire le lien avec des lexiques (Dicovalence dans notre
application) et par l’introduction de ﬁltres qui opérent a la ﬁn des modules pour ne conserver que
les annotations cohérentes selon certains critéres linguistiques ; ces nouveautés sont présentées en
Section 2. D’autre part, le systéme de régles a été signiﬁcativement étendu et l’ordonnancement
des modules a été revu de facon systématique; ces nouveautés sont présentées en Section 3. La
Section 4 décrit alors l’ensemble des régles de notre systéme. Nous sommes ainsi en mesure de
fournir des résultats expérimentaux plus riches et plus complets qui sont exposés a la Section 5.

1http: //alpage . inria. fr/ statgram/frdep/fr_ s1:a1:_dep_pars ing . html
zhttp: //grew . loria. fr

294

1 Présentation du calcul

1.1 La forme des régles de réécriture

Les regles de réécriture sont décrites en trois parties; considérons une regle R qu’on cherche a
appliquer a un graphe G ; R se compose de :

0 un patron positif qui est un graphe qu’on va chercher ‘a apparier avec une partie de G,
l’appariement se faisant de fagon injective;

0 un ensemble éventuellement vide de patrons négatifs qui sont des extensionsa du patron
positif et qui imposent des conditions négatives sur G; s’il est possible d’étendre un
appariement du patron positif de R avec l’un des patrons négatifs de R, la regle R ne
s’applique pas;

0 une liste de commandes qui vont étre exécutées dans l’ordre; une commande va effectuer
une transformation élémentaire sur G (ajout ou suppression d’un noeud, d’un arc ou d’un
trait, fusion de deux noeuds, ...).

Si une régle s’applique a un graphe G et produit un graphe G’, nous écrirons : G —> G’.

On peut maintenant s’interroger sur le coﬁt de l’application d’une régle R a un graphe G. On doit
procéder a l’appariement d’un graphe (un patron de la régle R) avec un sous-graphe du graphe G
et on sait que ce probléme, dans toute sa généralité, est NP-complet. Ici, néanmoins, cela se fait
dans des conditions particuliéres :

0 les patrons utilisés dans les régles sont trés petits ;

0 les patrons sont toujours connexes et ont généralement une seule racine, exe exceptionnel-
lement deux (une racine est un noeud qui est un ancétre de chacun des autres noeuds du
graphe) ;

0 le nombre d’arcs sortant d’un noeud d’un patron est borné (pour le systéme utilisé dans ce
travail, la borne est de 3).

Dans ces conditions, pour un patron fixé, l’appariement est linéaire en temps par rapport ‘a la
taille du graphe auquel s’applique le patron. Il est important également de noter que dans le cas
ou le patron et le graphe sont tous les deux des arbres, l’appariement qui est utilisé suit le méme
algorithme que les outils standards de réécriture d’arbres.

1.2 L’organisation des régles en modules

Dans notre utilisation de la réécriture de graphes pour l’interface syntaxe-sémantique, chaque
principe linguistique est traduit en quelques regles lisibles et simples. Leur intérét est que leur
effet est local mais le revers de la médaille est qu’il est difﬁcile de contréler l’interaction de
centaines de régles pouvant agir en paralléle.

Pour faciliter la lisibilité et la maintenance de la cohérence globale, les regles sont regroupées
en modules, chaque module comprenant un ensemble de regles qui ont une unité linguistique
propre. L’ordre d’application des regles au sein d’un module est libre alors que l’ordre entre

3Un patron négatif respecte la méme syntaxe qu’un patron positif et peut faire référence £1 des noeuds déﬁnis dans le
patron positif.

295

modules peut étre contraint.

Les modules jouent en plus un role décisif dans la mise en oeuvre du calcul, sous l’angle de la
terminaison et de la conﬂuence. Un module M a la propriété de terminaison si pour tout graphe
G, il n’existe pas de réécriture inﬁnie G —> G1 —> G2 —> - -- par application de regles de M. Dans
notre systéme, tous les modules ont la propriété de terminaison. Le probléme aurait pu venir des
régles créant de nouveaux noeuds dans un graphe. Or, tous les noeuds créés sont rattachés a un
noeud initial et il n’est possible d’en créer qu’un nombre ﬁni. Dans ces conditions, la quasi-totalité
des modules peuvent étre munis d’une mesure proportionnelle a la taille du graphe et qui décroit
‘a chaque application de regles. Pour les autres modules, une mesure quadratique dans la taille
du graphe existe.

Etant donné un module M, un graphe G est une M -forme normale si aucune regle de M ne
s’applique ‘a G. Compte tenu de la propriété de terminaison, on sait que tous les graphes se
réécrivent en un nombre ﬁni de M -formes normales. I.’application d’un module M a un graphe
consiste donc a calculer ses M -formes normales.

Un module M est confluent si tout graphe a une unique M -forme normale. Cette propriété est
intéressante car elle rend le calcul indifférent a l’ordre d’application des regles. On ne peut pas
espérer avoir tous les modules conﬂuents car la transformation d’une annotation syntaxique en
annotation sémantique est par essence non conﬂuente, dans la mesure ou une méme annotation
syntaxique peut donner lieu a plusieurs lectures sémantiques. Avec l’organisation en modules, on
peut néanmoins controler les effets négatifs de la non conﬂuence en la restreignant ‘a certains
modules particuliers.

En résumé, ce n’est ni l’appariement des patrons de regles, ni la longueur des chemins de
réécriture qui est source de complexité des calculs. C’est avant tout la non conﬂuence de certains
modules mais ce n’est pas la méthode, la réécriture de graphes, qui est en cause. C’est l’essence
méme du probléme auquel elle est confrontée, la production d’une représentation sémantique a
partir d’une représentation syntaxique. On peut méme ajouter que la source en est essentiellement
l’ambiguité lexicale.

2 L’enrichissement du calcul

2.1 Branchement de lexiques

Dans les précédents travaux était déj‘a mis en évidence le fait que certaines regles font appel
a des informations lexicales. C’est typiquement le cas pour les regles qui transforment les
actants syntaxiques des verbes en arguments sémantiques. Elles utilisent les cadres de sous-
catégorisation attachés aux différents sens des verbes. Des informations lexicales sont nécessaires
pour traiter les expressions ﬂgées, les diverses classes sémantiques d’adverbes (Bonami et al.,
2004), d’adjectifs (Dixon et Aikhenvald, 2006; Partee, 2010) et les cadres de sous-catégorisation
des noms prédicat1'fs(Giry-Schneider, 1987).

Dans les premieres versions de notre systéme, les informations lexicales étaient gérées manuel-
lement dans les regles elles-mémes, ce qui était particulierement lourd pour la maintenance et
nuisait a la lisibilité du systéme. De plus, il n’était possible de paramétrerl’util1'sation d’une régle
que par un élément : la valeur du lemme. I.es nouvelles régles lexicales permettent :

296

0 d’utiliser plusieurs paramétres (repérés par le symbole $) dans les patrons de la régle (dans
l’exemple ci-dessous, le lemme et une préposition) ;

0 d’ut1'liser des parametres (repérés par le symbole @) dans la partie commandes des régles
(dans l’exemple, le numéro de l’entrée dicovalence).

Pour l’exemple des verbes transitifs avec un objet indi- e_2:p_obi _

rect introduit par une préposition (différente de « E1» et  rj}e3:°b'

« de »), la régle suj _V_obj _pob j qui transforme les V OBJ PREP POBJ
actants syntaxiques en arguments sémantiques utilise m‘:‘§.¥.m. ler:n(::::ap

le motif ci-contre et est décrite par le code suivant :

1ax_ru1: suj_V_obj_pobj (feature $1amma, $prep, @dicoval_id; file "suj_V_obj_pobj.1p") {
match

V [cat=v, 1amma=$1ammaJ;

OBJ [];

a1: V -[obj]—> OBJ;

PREP [cat=prap, 1amma=$prap];

a2:V -[p_obj]-> PREP;

PEIBJ [];

a3:PREP -[obj]-> POBJ;

without { V [frama=#] }

without { V -[a_obj|da_objIatolats]-> * }

mmands {

da1_adga al; da1_adga a2; da1_adga a3;

da1_noda PREP;

add_adga V -[arg2]-> OBJ; add_adga V -[arg3]-> POBJ;
V=@dicova1_id;

}

1
2
3
4
5
6
7
a
9
0 }
1
2
3
4
5
6
7
a
9

)-

Cette régle fait référence au ﬁchier suj _V_ob j _pobj .lp qui contient la liste des 149 entrées
de Dicovalence correspondant ‘a ce cadre de sous-catégorisation. Chaque ligne décrit, dans
l’ordre, le lemme, la préposition régie et le numéro de l’entrée Dicovalence. Les deux premiers
éléments constituent les valeurs possibles des paramétres d’entrée de la régle alors que le demier
représente la valeur correspondante du paramétre de sorﬁe.

odar#avac##900
accordar#avac##1090
accoup1ar#avac##1305

troquét£contra##84610
voir#an##86asO

Lorsque l’on applique la régle a un graphe de dépendance, on cherche ‘a apparier le patron
positif de la régle (lignes 2 ‘a 10) avec une partie du graphe et on vériﬁe que l’appariement ne
peut étre étendu en un appariement pour aucun des patterns négatifs. Si l’application de la
régle réussit, on vériﬁe que le couple de valeurs dans le graphe qui coincide avec $lemma et
avec $prep correspond ‘a l’une des lignes du ﬁchier suj _V_obj _pobj .lp. Si c’est le cas, on
instancie @dicoval_id avec la valeur correspondante de sortie du lexique. Les informations
lexicales extraites de Dicovalence sont transformées automatiquement en une suite de régles

lexicales (301 actuellement), accompagnées chacune d’un ﬁchier d’instanciation des paramétres.

Lorsqu’il n’existe pas de ressources directement utilisables, des embryons de lexiques ont été
construits manuellement. C’est le cas pour les cadres de sous-catégorisation des adjectifs et

297

des noms prédicatifs. C’est aussi le cas pour les adverbes qui ont une portée ﬂottante, pour les
adjectifs qui ne sont pas intersectifs.

2.2 Les filtres

Au sein de chaque module, on a déﬁni précédemment la notion de graphe en forme normale. Or,
parmi les formes normales, on peut distinguer celles qui sont cohérentes selon certains critéres
linguistiques de celles qui ne le sont pas.

Pour effectuer le tri entre les unes et les autres, nous avons introduit des filtres. Un ﬁltre se
présente comme une regle de réécriture standard mais sans la partie commandes; il comporte
seulement un patron positif et éventuellement des patrons négatifs. Exécuté en ﬁn du module
dans lequel il se situe, il ne fait que supprimer les graphes pour lesquels l’appariement entre le
ﬁltre et une partie du graphe réussit.

Les ﬁltres peuvent étre utiliser de deux fagons différentes. Ils peuvent supprimer des graphes
mal annotés initialement et dans lesquels l’information linguistique n’est plus cohérente. Mais
ils peuvent également étre utiliser pour simpliﬁer l’écriture d’un jeu de regles : il est parfois
plus simple d’écrire un ensemble de régles qui surgénérent et d’utiliser ensuite un ﬁltre pour ne
garder que les solutions pertinentes. Par exemple, le ﬁltre qui a été introduit dans le module
qui transforme les actants syntaxiques des verbes en actants sémantiques joue ce double role.
Il supprime les annotations dans lesquelles il subsiste des arguments syntaxiques. C’est le cas
notamment des verbes intransitifs qui auraient un objet direct en syntaxe profonde.

3 L’enrichissement du systéme de régles

3.1 Extension de la couverture grammaticale

Les systemes de regles présentés dans (Bonfante et aL, 2010, 2011; Morey, 2011) avaient une
couverture grammaticale relativement limitée. Celle-ci a été étendue signiﬁcativement. Nous en
donnons ici les exemples les plus marquants.

Parmi les constructions qui ont été intégrées, on trouve les constructions causatives. Dans le
FTB, un verbe causatif est traité comme auxiliaire de l’infinitif complément. Cet infinitif est
considéré comme téte du noyau verbal et comme gouverneur de tous les arguments. L’annotation
en dépendances suivant le guide du FTB de la phrase (1) est présentée ci-dessous.

(1) Ilfait descendre le secrétaire

suj obj Cette approche est un peu trop simpliﬁcatrice
I  [ $1 et ne permet pas de prendre en compte certains

H fait descendre |e secrétaire aspects. Dans l’exemple ci-dessus, «secrétaire»
P'° " " "9" “ est objet de « descendre» mais c’est ambigu :
si par exemple le secrétaire est une personne,

«secrétaire » peut étre le sujet profond de « descendre » ; s’il s’agit d’un meuble, ou si « descendre » est

298

employé avec le sens de « tuer», «secrétaire » est alors objet profond du verbe transitif « descendre ».
Aﬁn de distinguer les deux lectures, notre systéme de réécriture transforme l’auxiliaire du causatif
en verbe plein, ce qui permet d’exprimer les deux lectures ‘a travers les deux annotations ci-

dessous.
ob‘

su' o ' det su' ob‘ det
lill Ifairel ldescend rel llel lsecrétainel lill Ifairel ldescendrel 5 llel lsecnétairel
pro v v del pm v v del n
-trans causative trans
SHIP SHIP

Dans les deux schémas ci-dessus, a été introduite une dépendance représentant le sujet profond
de « descendre ». Dans le premier cas, il s’agit de « secrétaire » et dans le second, ce sujet n’est pas
exprimé dans la phrase et il est représenté par un mot vide noté e. D’une facon générale, les
dépendances syntaxiques de surface sont représentées au-dessus du texte qu’elles annotent, alors
que les dépendances profondes, qu’elles soient syntaxiques (notées avec un ’p’ terminal : sujp,
objp, ...) ou sémantiques, sont placées au-dessous du texte.

Les verbes a montée du sujet sont traités dans le FTB de la méme fagon que les verbes a controle
comme des verbes pleins. Mais il y a de bonnes raisons (Rooryck, 1989) pour les traiter aussi
comme des éléments hybrides qui se comportent parfois comme des auxiliaires. Considérons les
exemples suivants o1‘1les verbes a montée sont indiqués en gras et o1‘1 les inﬁnitifs sont soulignés.

(2) Il peut arriver deux personnes aujourd’hui
(3) La maison peut étre vendue aujourd’hui
(4) La maison peut se vendre aujourd’hui

Nous avons successivement une construction impersonnelle, une construction a la voix passive
et une construction a la voix moyenne. Si on veut éviter la multiplication du nombre des régles
pour le calcul des arguments sémantiques, il est nécessaire de transformer chaque construction
en une forme canonique. Classiquement, c’est la construction personnelle a la voix active. Pour
nos trois exemples, on obtient :

(2’) Dew: personnes peuvent arriver aujourd’hui.
(3’),(4’) On peut vendre la maison aujourd'hui.

Les régles de réécriture qui effectuent cette transformation sont grandement facilitées si les
verbes a montée sont traités comme des auxiliaires. On peut alors appliquer les mémes régles que
pour les verbes non gouvernés par des verbes a montée. Détaillons la méthode sur l’exemple (2).
Voici l’étiquetage de surface qui est donné au départ par le guide du FTB.

mod

obj
suj obj del
II peut arriver deux personnes aujourd'hui
pro v v det n adv

Une premiere régle transforme le verbe ‘a montée «pouvoir» en auxiliaire de « arriver» qui
devient la téte de la phrase.

299

mod
obj
obj det

. l ‘
/||/ lpouvoirl larriverl /deuxl lpersonnel /aujourd'hui/
p v v del n adv
trans -trans
mod

SHJP

Le fait que nous ne limitions pas la structure de dépendance ‘a un arbre permet un plus grand
pouvoir d’expression. Ainsi, le verbe « pouvoir » garde « arriver » comme objet tout en étant un
modiﬁcateur de ce dernier, ce qui donne lieu ‘a un cycle dans le graphe. Bien entendu, la téte
syntaxique de la phrase n’est plus alors la racine d’un arbre de dépendance mais c’est elle qui
reste destinée ‘a recevoir toute dépendance externe, notamment quand la phrase est insérée
comme proposition subordonnée dans une phrase complexe.

Maintenant, nous sommes en mesure de traiter la construction impersonnelle, qui est dorénavant
ancrée a « arriver» comme n’importe quelle construction impersonnelle, et de lui appliquer une
regle pour retrouver la construction canonique active correspondante. Cette regle consiste ‘a
supprimer le sujet impersonnel et l’objet de surface devient le sujet profond du verbe.

mod
obj det
lpouvoirl larriverl /deuxl lpersonnel /aujourd'hui/
v v det n adv
trans -‘trans
impersonal
modp sujp

3.2 Ordonnancement des modules

L’organisation des regles de réécriture en modules est indissociable d’une déﬁnition d’un ordre
partiel d’exécution de ces modules. Cet ordre partiel est déterminé par des choix linguistiques et
des choix de représentation. Ainsi par exemple, le module de traitement des constructions imper-
sonnelles précéde celui du traitement de la voix passive, de facon a ce que soient correctement
transformées les consuuctions passives impersonnelles.

Dans les premieres version du systeme, cet ordre n’avait pas été étudié de facon systématique
et certains choix simpliﬁcateurs posaient probléme. En effet, le choix avait été fait d’enrichir en
premier l’annotation du FTB en ajoutant les actants syntaxiques des inﬁnitifs qui étaient présents
dans la phrase. L’idée était d’enchainer ensuite par une redistribution des actants pour effectuer
le calcul des arguments sémantiques ‘a partir d’une construction canonique. Or, en réalité, les
choses peuvent étre plus complexes. Dans chacune de ces phrases (5) et (6), on a un verbe ‘a
controle en gras qui gouverne le sujet d’un inﬁnitif qui est souligné.

(5) Jean est autorisé c‘1 arriver plus tard
(6) Jean permet 61 Marie d’ étre accomgc_1gge’e par safille

Pour la phrase (5), il est nécessaire d’appliquer en premier le module de redistribution du passif,
noté PASSIVE_ARG dans notre systeme, pour retrouver la construction canonique (5’). Ensuite
seulement, on est en mesure d’appliquer le module de détermination des sujets des inﬁnitifs

300

dépendant de verbes ‘a controle, noté INF_SUBJ. Dans ce module, une regle lexicale va indiquer
que le sujet de « arriver» est l’objet direct de « autorise ».

(5’) On autorise Jean a arriver plus tard.
(6’) Jean permet a Marie que sa fille l’accompc_1gne

Pour la phrase (6), c’est le contraire. I1 faut d’abord appliquer le module INF_SUBJ pour trouver
que le sujet de « étre accompagnée » est l’objet indirect de « permet ». Ensuite, l’application du
module PASSIVE_ARG permet de transformer la voix passive en voix active (6’).

Ceci explique que l’on trouve dans l’ordre d’application des modules la séquence PASSIVE_ARG,
INF_SUBJ, PASSIVE_ARG. On peut imaginer que cette suite de modules soit insufﬁsante et qu’il faille
itérer l’aller-retour entre ces deux modules mais en pratique l’ordre ci-dessus est sufﬁsant.

La coordination, de par sa spéciﬁcité, ne peut pas étre traitée comme la plupart des constructions
syntaxiques a l’aide d’un module particulier qui viendrait s’insérer quelque part dans le graphe
d’ordonnancement des modules. Comme elle permet un partage de structures, elle interagit avec
les autres constructions syntaxiques et cette interaction doit étre modélisée par des regles qui
sont distribuées dans les différents modules de calcul de la syntaxe profonde.

Bien entendu, chacune des regles est dépendante du choix qui a été fait pour annoter la co-
ordination dans le FTB; en particulier, le fait d’imposer que la structure de dépendance soit
un arbre a de lourdes conséquences. Ainsi, on ne peut pas exprimer le partage de structures
introduit fréquemment par la coordination, qui nécessite le partage de dépendants entre gou-
vemeurs. Les regles de notre calcul vont donc consister essentiellement a retrouver le partage.
Selon que la structure partagée est le sujet d’un verbe, un auxiliaire de temps ou du passif, ou
encore l’antécédent d’un pronom relatif, le phénoméne est traité respectivement dans le module
d’introduction de sujets SUBJ_INTRO, celui de suppression des auxiliaires VERB_AUX, ou enﬁn dans
celui de détermination de l’antécédent des pronoms relatifs ANT_REL_PRO.

Le partage de compléments est plus délicat ‘a traiter dans la mesure o1‘1 un complément n’est
pas toujours obligatoire, ce qui rend l’annotat1'on du FTB ambigiie. Considérons par exemple la
phrase suivante annotée selon le guide du FTB.

(7) Jean a de'balle' et mange’ son sandwich

Si on veut exprimer que «sandwich »
est un objet partagé par « déballé » et Sui obi

« mange’ », on devrait ajouter la dé- I aux'lPsll%d1Fi idem. _
pendance objp en dessous du dessin. Jena" 3 détfillé E; 0135196 Sdtfﬂn Sandwlch

Malheureusement ce n’est pas possible
dans le FTB car le mot « sandwich » au-
rait alors deux gouvemeurs. En conse-
quence, uniquement avec la structure de dépendance, on ne peut pas distinguer la phrase o1‘1
« son sandwich » est un objet partagé de la phrase «Jean a de’balle’ son sandwich et mange’ ». Seul
l’ordre linéaire des mots permettra de faire la différence. Dans notre systéme, nous avons choisi
provisoirement de laisser ce probléme de cété.

°bJ'P

301

4 Description du systéme de régles de réécriture

Le systeme actuel comprend 458 regles, dont 325 régles lexicales, organisées en 35 modules. La
Figure 1 présente le systéme de modules sous forme d’un graphe o1‘1les noeuds représentent les
modules et les arcs les contraintes sur l’ordre d’application des modules. Seuls 9 des 35 modules
sont non conﬂuents; sur le diagramme, ils se distinguent des autres parce qu’i1s sont représentés
par des ovales opaques.

an1_Iel|_pro

FIGURE 1 — Diagramme du systéme de modules

Ces modules sont eux-mémes rangés dans 6 paquets :

0 INIT qui transforme l’annotation CONLL initiale pour la mettre ‘a un format compatible avec
les régles de calcul de la syntaxe profonde,
0 VERB dédié ‘a l’uniformisau'on du noyau verbal par suppression des auxiliaires et ‘a la

302

détermination du caractere transitif et pronominal des verbes et a la reconnaissance de
leur voix (active, passive ou moyenne),
0 SUBJ dédié au traitement du sujet des verbes et des adjectifs considérés comme prédicatifs,
0 ARGV dédié au calcul des actants syntaxiques profonds des verbes, soit par redistribution
des actants de surface (transformation des constructions impersonnelles et causatives et des
voix passive et moyenne), soit par détermination lexicale de certains actants des inﬁniﬁfs,
0 PRO qui uniformise la syntaxe des différents pronoms et détermine l’antécédent des pronoms
relatifs et des pronoms personnels réﬂéchis,
0 SEM qui transforme l’annotation syntaxique profonde en annotation sémantique.

Les quatre paquets VERB, SUBJ, ARGV et PRO contribuent ‘a la production de l’annotation des
phrases en dépendances syntaxiques profondes. C’est pourquoi elles sont rassemblées dans un
méme super-paquet DSYNT. Ensuite, a partir de celle-ci, les regles du paquet SEM calculent une
représentation sémantique de la phrase dans le format DMRS.

Le FTB ne suit pas completement le guide d’annotation et les mémes phénomenes ne sont
pas annotés dans tout le corpus de facon cohérente. Notre systeme de modules tient compte
de ces aspects et tente des récupérer certains de ces problemes d’annotation qui sont les plus
systématiques (comme par exemple des relations p-obj étiquetées dep ou des incohérences dans
les coordinations de complétives).

(8) Jean a pu étre autorise’ (‘I partir et 61 regagner son domicile

Ia Figure 2 illustre, pour la phrase (8), les deux étapes de calcul avec les trois structures :

0 l’annotation initiale en dépendances syntaxiques de surface effectuée conformément au
guide d’annotation du FTB ;

0 l’annotation en dépendances profondes obtenue apres exécution des regles des paquets
INIT, VERB, sum, ARGV et PRO;

0 la représentation sémantique en DMRS aprés exécution des régles du paquet SEM.

5 Résultats expérimentaux

Le systeme de modules présenté ‘a la section précédente a été appliqué aux 12 351 phrases du
FTB. Les statistiques completes d’utilisation des régles par module sur l’ensemble du corpus et les
résultats détaillés (avec les structures produites) sur 1% sur corpus sont accessible en ligne‘‘.

Le calcul étant non conﬂuent, on s’intéresse en premier lieu au nombre de formes normales
produites par notre systeme : on peut en effet avoir pour certaines longues phrases une forte
ambiguité. De plus, a la ﬁn de certains modules, on ﬁltre des structures que l’on considére comme
incohérentes. I1 peut donc arriver que certaines phrases ne conduisent a aucune forme normale :
dans l’ensemble du corpus, c’est le cas pour 12,8% des phrases. Pour 31,3% des phrases, le
systeme retourne une forme normale, pour 21,7%, il retourne 2 formes normales. 90,3% des
phrases conduisent a un nombre de formes normales inférieur ou égal a 8.

Pour estimer la couverture de notre systeme nous avons observé le nombre de relations de
dépendances présentes dans le FTB qui ne sont pas traitées lors de la réécriture. Dans le tableau

4h1:1:p: //wikilligramme . loria. fr/doku . php?id=1:aln_2012

303

obj

[ sun]-ux_lps] [ :|:1jx_pass 1 a_obj I objcoom re _coon1 obj del
Jean a pu étre autorisé a partir et a regagner son domicile
v v v v det n

n v prep v cc prep

mm! an
at: ya: at: d-nus:-nu an an

/Jean/ lpouvoirl /auton'ser/ 1-: lél lpanirl /etl lél lregagnerl /|e/ ldomicilel /|ui/ /de/
on map v an n p p

M  """  ....... 

mp an»

-1»

-1::

rogagnor_qq

d 69990
r _] uh)

   
    
 
    
  

  

\.
u»:s941o
fl’2|l11C:s|I_]

   
 

an Inriscr_qq_iI_qq

{ pmm.

um V
d\' so
passive Landard

 

 

FIGURE 2 — Syntaxe de surface, syntaxe profonde et sémantique pour la phrase (8).

suivant, pour les phrases qui ont au moins une forme normale et pour chaque type de lien de
dépendance du FTB, nous donnons le nombre total de liens au départ et le nombre qui restent
aprés réécriture (en valeur absolue et relative) :

C3115 aux

 

Il est difficile de séparer les cas qui proviennent d’une erreur d’annotation des cas qui se sont
pas gérés par notre systéme. Néanmoins, pour les relations pour lesquelles il reste un nombre
important de liens, et pour les cas o1‘1l’annotation est correcte, nous pouvons donner quelques
commentaires. Les comparatifs ne sont pas traités par notre systéme, la relation comp n’est donc
pas réécrite. La relation arg n’a pas été traitée. Les liens mod restant concernent les noms qui
modiﬁent un nom ou un verbe et les liens mod_re1peuvent correspondre a des cas d’ellipse dans
la relative. Pour la coordination, il n’est pas rare d’avoir plusieurs liens dep_coord qui ont le
méme gouverneur. Le lien dep est sous-spéciﬁé, il est utilisé dans des contextes assez différents
et pas tous prévus par le guide d’annotation ou par notre systéme. Pour ﬁnir, la relation obj est
utilisé pour les objets directs de verbe mais aussi pour le lien entre une préposition et le terme

304

qu’elle introduit; c’est ces dernieres relations qui peuvent rester.

Par ailleurs, pour estimer la couverture de notre usage de Dicovalence, nous donnons des
statistiques sur les verbes repérés. Le FTB complet contient 39 108 verbes et les phrases pour
lesquelles on fournit au moins une forme normale contiennent 32255 verbes. Chaque fois
que la réécriture réussit, on s’intéresse au nombre de verbes qui sont associés ‘a une entrée
de Dicovalence dans au moins une des structure finales. C’est le cas pour 17 987 verbes; cela
représente 55,8% des 32 255 verbes réécrits et 46,0% de l’ensemble des 39 108 verbes.

Pour 120 phrases du corpus, les résultats complets sont disponibles. Parmi elles, 11 phrases
ne conduisent ‘a aucune forme normale. Pour 5 de ces 11 phrases, Dicovalence ne décrit pas
le cadre nécessaire : hispaniser transitif, acheter avec a-objet et sans objet, maintenir avec un
complément locatif, souscrire transitif et vendre intransitif. Les autres cas correspondent a des
problemes d’annotation.

Plus précisément, nous avons évalué manuellement les résultats pour les 30 premieres phrases
des 120. Iorsque notre systeme fournit pour l’une d’elles plusieurs annotations sémantiques en

sortie, nous avons considéré uniquement celle qui se rapproche le plus de l’annotation souhaitée.

Pour 3 phrases, le systeme ne fournit aucune annotation en sortie et pour 3 autres, il fournit une
annotation sans erreurs. Pour le reste, nous avons noté 67 erreurs qui se répartissent ainsi : 21
sont dues a des annotations incorrectes ou insufﬁsantes dans le F'I'B au départ; dans 23 autres
cas, le systeme échoue a produire une annotation sémantique parce qu’il ne couvre pas certains
phénomenes (les 8 cas les plus fréquents concernent des expressions entre parentheses insérées
au milieu d’une phrase) ; pour les 23 cas restants, le systeme produit une annotation sémantique
mais celle-ci n’est pas correcte; les deux erreurs les plus fréquentes concernent les expressions
ﬁgées (7 cas) qui ne sont pas considérées comme telles au niveau sémantique et les négations (6
cas) qui sont exprimées généralement par un couple de mots grammaticaux mais pour lesquels
le systeme ignore le lien entre les deux éléments du couple.

Conclusion

A travers l’exemple du FTB, nous avons montré qu’il est pertinent d’utiliser la réécriture de
graphes pour annoter de facon automatique un gros corpus en dépendances sémantiques a partir
d’une annotation en dépendances syntaxiques de surface.

Les modules dans le systeme de regles de réécriture jouent un role majeur tant pour controler les
calculs que pour construire et maintenir le systeme. Celui qui a été présenté dans cet article est
congu en fonction des formats d’entrée et de sortie choisis. Toutefois le caractere modulaire du
systeme fait qu’il est possible de l’adapter a peu de frais a d’autres formats.

Pour en rester au FTB, l’annotation obtenue présente deux limites principales : l’annotation de
départ présente de nombreuses erreurs et incohérences et le cadre formel choisi pour l’annotation
sémantique, celui de la DMRS, n’offre aucune réponse quant ‘a la modélisation de certaines
propriétés sémantiques (l’intentionnalité ou les constiuctions comparatives par exemple). Pour
ce qui est de la premiere limite, on peut espérer utiliser la réécriture de graphes pour corriger les
erreurs qui sont les plus systématiques. Pour ce qui est de la seconde, nous ne pouvons que nous
en remettre aux linguistes travaillant sur ces questions.

305

Références

ABEILLE, A., CLEMENT, L. et TOUSSENEL, F. (2003). Building a Treebank for French, chapitre 10.
Kluwer Academic Publishers.

BONAMI, 0., GODARD, D. et KAMPERS-MANHE, B. (2004). Adverb classiﬁcation. In Handbook of
French Semantics, chapitre 11, pages 143-184. CLSI Publications.

BONFANTE, G., GUILLAUME, B., MOREY, M. et PERRIER, G. (2010). Réécriture de graphes de dépen-
dances pour l’interface syntaxe-sémantique. In Actes de TALN 2010 (Traitement automatique des
langues naturelles), Montréal. ATALA.

BONFANTE, G., GUILLAUME, B., MOREY, M. et PERRIER, G. (2011). Modular graph rewriting to
compute semantics. In IWCS 201 1, pages 65-74, Oxford, UK.

CANDITO, M.-H., CRABBE, B., DENIS, P. et GUERIN, E (2009). Analyse syntaxique statistique du
francais : des constituants aux dépendances. In Actes de TALN 2009 (Traitement automatique des
langues naturelles), Senlis. A'I'A1.A, LIPN.

COPESTAKE, A. (2009). Invited Talk : Slacker semantics : Why superﬁciality, dependency and
avoidance of commitment can be the right way to go. In Proceedings of EACL 2009, pages 1-9,
Athens, Greece.

D1xoN, R. W. et AIKHENVALD, A. Y., éditeurs (2006). Adjective Classes - a Cross-Linguistic '1}/pology.
Oxford University Press.

GIRY-SCHNEIDER, J. (1987). Les pre’dicats nominaux en francais. Librairie DROZ Genéve-Paris.

MOREY, M. (2011). Eﬂquetage grammatical symbolique et interface syntaxe-sémantique des
forrnalismes grammaticawc lexicalisés polarisés. These, Université de Lorraine.

PARTEE, B. H. (2010). Privative adjectives : subsective plus coercion. In BAUERLE, R. et ZIM-
MERMANN, T. E., éditeurs : Presuppositions and Discourse : Essays Offered to Hans Kamp, pages
273-285. Bingley, UK : Emerald Group Publishing.

RooRYc1<, J. (1989). Les verbes a montée et a contr6le “ambigus“. Revue que’be’coise de Zinguistique,
18(1) : 189-206.

Van den EYNDE, K. et MERTENS, P. (2003). La valence : l’approche pronominale et son application
au lexique verbal. French Language Studies, 13:63—104.

306

